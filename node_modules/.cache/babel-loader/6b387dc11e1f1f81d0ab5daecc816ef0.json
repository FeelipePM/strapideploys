{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _get = _interopRequireDefault(require(\"lodash/get\"));\n\nvar _isBoolean = _interopRequireDefault(require(\"lodash/isBoolean\"));\n\nvar _isEmpty = _interopRequireDefault(require(\"lodash/isEmpty\"));\n\nvar _isNaN = _interopRequireDefault(require(\"lodash/isNaN\"));\n\nvar _toNumber = _interopRequireDefault(require(\"lodash/toNumber\"));\n\nvar yup = _interopRequireWildcard(require(\"yup\"));\n\nvar _helperPlugin = require(\"@strapi/helper-plugin\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nyup.addMethod(yup.mixed, 'defined', function () {\n  return this.test('defined', _helperPlugin.translatedErrors.required, function (value) {\n    return value !== undefined;\n  });\n});\nyup.addMethod(yup.array, 'notEmptyMin', function (min) {\n  return this.test('notEmptyMin', _helperPlugin.translatedErrors.min, function (value) {\n    if ((0, _isEmpty[\"default\"])(value)) {\n      return true;\n    }\n\n    return value.length >= min;\n  });\n});\nyup.addMethod(yup.string, 'isInferior', function (message, max) {\n  return this.test('isInferior', message, function (value) {\n    if (!value) {\n      return true;\n    }\n\n    if (Number.isNaN((0, _toNumber[\"default\"])(value))) {\n      return true;\n    }\n\n    return (0, _toNumber[\"default\"])(max) >= (0, _toNumber[\"default\"])(value);\n  });\n});\nyup.addMethod(yup.string, 'isSuperior', function (message, min) {\n  return this.test('isSuperior', message, function (value) {\n    if (!value) {\n      return true;\n    }\n\n    if (Number.isNaN((0, _toNumber[\"default\"])(value))) {\n      return true;\n    }\n\n    return (0, _toNumber[\"default\"])(value) >= (0, _toNumber[\"default\"])(min);\n  });\n});\n\nvar getAttributes = function getAttributes(data) {\n  return (0, _get[\"default\"])(data, ['attributes'], {});\n};\n\nvar createYupSchema = function createYupSchema(model, _ref) {\n  var components = _ref.components;\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    isCreatingEntry: true,\n    isDraft: true,\n    isFromComponent: false\n  };\n  var attributes = getAttributes(model);\n  return yup.object().shape(Object.keys(attributes).reduce(function (acc, current) {\n    var attribute = attributes[current];\n\n    if (attribute.type !== 'relation' && attribute.type !== 'component' && attribute.type !== 'dynamiczone') {\n      var formatted = createYupSchemaAttribute(attribute.type, attribute, options);\n      acc[current] = formatted;\n    }\n\n    if (attribute.type === 'relation') {\n      acc[current] = ['oneWay', 'oneToOne', 'manyToOne', 'oneToManyMorph', 'oneToOneMorph'].includes(attribute.relationType) ? yup.object().nullable() : yup.array().nullable();\n    }\n\n    if (attribute.type === 'component') {\n      var componentFieldSchema = createYupSchema(components[attribute.component], {\n        components: components\n      }, _objectSpread(_objectSpread({}, options), {}, {\n        isFromComponent: true\n      }));\n\n      if (attribute.repeatable === true) {\n        var min = attribute.min,\n            max = attribute.max,\n            required = attribute.required;\n\n        var _componentSchema = yup.lazy(function (value) {\n          var baseSchema = yup.array().of(componentFieldSchema);\n\n          if (min) {\n            if (required) {\n              baseSchema = baseSchema.min(min, _helperPlugin.translatedErrors.min);\n            } else if (required !== true && (0, _isEmpty[\"default\"])(value)) {\n              baseSchema = baseSchema.nullable();\n            } else {\n              baseSchema = baseSchema.min(min, _helperPlugin.translatedErrors.min);\n            }\n          } else if (required && !options.isDraft) {\n            baseSchema = baseSchema.min(1, _helperPlugin.translatedErrors.required);\n          }\n\n          if (max) {\n            baseSchema = baseSchema.max(max, _helperPlugin.translatedErrors.max);\n          }\n\n          return baseSchema;\n        });\n\n        acc[current] = _componentSchema;\n        return acc;\n      }\n\n      var componentSchema = yup.lazy(function (obj) {\n        if (obj !== undefined) {\n          return attribute.required === true && !options.isDraft ? componentFieldSchema.defined() : componentFieldSchema.nullable();\n        }\n\n        return attribute.required === true ? yup.object().defined() : yup.object().nullable();\n      });\n      acc[current] = componentSchema;\n      return acc;\n    }\n\n    if (attribute.type === 'dynamiczone') {\n      var dynamicZoneSchema = yup.array().of(yup.lazy(function (_ref2) {\n        var __component = _ref2.__component;\n        return createYupSchema(components[__component], {\n          components: components\n        }, _objectSpread(_objectSpread({}, options), {}, {\n          isFromComponent: true\n        }));\n      }));\n      var _max = attribute.max,\n          _min = attribute.min;\n\n      if (_min) {\n        if (attribute.required) {\n          dynamicZoneSchema = dynamicZoneSchema.test('min', _helperPlugin.translatedErrors.min, function (value) {\n            if (options.isCreatingEntry) {\n              return value && value.length >= _min;\n            }\n\n            if (value === undefined) {\n              return true;\n            }\n\n            return value !== null && value.length >= _min;\n          }).test('required', _helperPlugin.translatedErrors.required, function (value) {\n            if (options.isCreatingEntry) {\n              return value !== null || value !== undefined;\n            }\n\n            if (value === undefined) {\n              return true;\n            }\n\n            return value !== null;\n          });\n        } else {\n          dynamicZoneSchema = dynamicZoneSchema.notEmptyMin(_min);\n        }\n      } else if (attribute.required && !options.isDraft) {\n        dynamicZoneSchema = dynamicZoneSchema.test('required', _helperPlugin.translatedErrors.required, function (value) {\n          if (options.isCreatingEntry) {\n            return value !== null || value !== undefined;\n          }\n\n          if (value === undefined) {\n            return true;\n          }\n\n          return value !== null;\n        });\n      }\n\n      if (_max) {\n        dynamicZoneSchema = dynamicZoneSchema.max(_max, _helperPlugin.translatedErrors.max);\n      }\n\n      acc[current] = dynamicZoneSchema;\n    }\n\n    return acc;\n  }, {}));\n};\n\nvar createYupSchemaAttribute = function createYupSchemaAttribute(type, validations, options) {\n  var schema = yup.mixed();\n\n  if (['string', 'uid', 'text', 'richtext', 'email', 'password', 'enumeration'].includes(type)) {\n    schema = yup.string();\n  }\n\n  if (type === 'json') {\n    schema = yup.mixed(_helperPlugin.translatedErrors.json).test('isJSON', _helperPlugin.translatedErrors.json, function (value) {\n      if (value === undefined) {\n        return true;\n      }\n\n      try {\n        JSON.parse(value);\n        return true;\n      } catch (err) {\n        return false;\n      }\n    }).nullable();\n  }\n\n  if (type === 'email') {\n    schema = schema.email(_helperPlugin.translatedErrors.email);\n  }\n\n  if (['number', 'integer', 'float', 'decimal'].includes(type)) {\n    schema = yup.number().transform(function (cv) {\n      return (0, _isNaN[\"default\"])(cv) ? undefined : cv;\n    }).typeError();\n  }\n\n  if (['date', 'datetime'].includes(type)) {\n    schema = yup.date();\n  }\n\n  if (type === 'biginteger') {\n    schema = yup.string().matches(/^-?\\d*$/);\n  }\n\n  Object.keys(validations).forEach(function (validation) {\n    var validationValue = validations[validation];\n\n    if (!!validationValue || !(0, _isBoolean[\"default\"])(validationValue) && Number.isInteger(Math.floor(validationValue)) || validationValue === 0) {\n      switch (validation) {\n        case 'required':\n          {\n            if (!options.isDraft) {\n              if (type === 'password' && options.isCreatingEntry) {\n                schema = schema.required(_helperPlugin.translatedErrors.required);\n              }\n\n              if (type !== 'password') {\n                if (options.isCreatingEntry) {\n                  schema = schema.required(_helperPlugin.translatedErrors.required);\n                } else {\n                  schema = schema.test('required', _helperPlugin.translatedErrors.required, function (value) {\n                    // Field is not touched and the user is editing the entry\n                    if (value === undefined && !options.isFromComponent) {\n                      return true;\n                    }\n\n                    if (['number', 'integer', 'biginteger', 'float', 'decimal'].includes(type)) {\n                      if (value === 0) {\n                        return true;\n                      }\n\n                      return !!value;\n                    }\n\n                    if (type === 'boolean') {\n                      return value !== null;\n                    }\n\n                    if (type === 'date' || type === 'datetime') {\n                      if (typeof value === 'string') {\n                        return !(0, _isEmpty[\"default\"])(value);\n                      }\n\n                      return !(0, _isEmpty[\"default\"])(value === null || value === void 0 ? void 0 : value.toString());\n                    }\n\n                    return !(0, _isEmpty[\"default\"])(value);\n                  });\n                }\n              }\n            }\n\n            break;\n          }\n\n        case 'max':\n          {\n            if (type === 'biginteger') {\n              schema = schema.isInferior(_helperPlugin.translatedErrors.max, validationValue);\n            } else {\n              schema = schema.max(validationValue, _helperPlugin.translatedErrors.max);\n            }\n\n            break;\n          }\n\n        case 'maxLength':\n          schema = schema.max(validationValue, _helperPlugin.translatedErrors.maxLength);\n          break;\n\n        case 'min':\n          {\n            if (type === 'biginteger') {\n              schema = schema.isSuperior(_helperPlugin.translatedErrors.min, validationValue);\n            } else {\n              schema = schema.min(validationValue, _helperPlugin.translatedErrors.min);\n            }\n\n            break;\n          }\n\n        case 'minLength':\n          {\n            if (!options.isDraft) {\n              schema = schema.min(validationValue, _helperPlugin.translatedErrors.minLength);\n            }\n\n            break;\n          }\n\n        case 'regex':\n          schema = schema.matches(new RegExp(validationValue), {\n            message: _helperPlugin.translatedErrors.regex,\n            excludeEmptyString: !validations.required\n          });\n          break;\n\n        case 'lowercase':\n          if (['text', 'textarea', 'email', 'string'].includes(type)) {\n            schema = schema.strict().lowercase();\n          }\n\n          break;\n\n        case 'uppercase':\n          if (['text', 'textarea', 'email', 'string'].includes(type)) {\n            schema = schema.strict().uppercase();\n          }\n\n          break;\n\n        case 'positive':\n          if (['number', 'integer', 'bigint', 'float', 'decimal'].includes(type)) {\n            schema = schema.positive();\n          }\n\n          break;\n\n        case 'negative':\n          if (['number', 'integer', 'bigint', 'float', 'decimal'].includes(type)) {\n            schema = schema.negative();\n          }\n\n          break;\n\n        default:\n          schema = schema.nullable();\n      }\n    }\n  });\n  return schema;\n};\n\nvar _default = createYupSchema;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}