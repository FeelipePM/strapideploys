{"ast":null,"code":"\"use strict\";\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar yup = _interopRequireWildcard(require(\"yup\"));\n\nvar _helperPlugin = require(\"@strapi/helper-plugin\");\n\nvar _fieldsRegex = require(\"./fieldsRegex\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar schema = yup.object().shape({\n  name: yup.string(_helperPlugin.translatedErrors.string).required(_helperPlugin.translatedErrors.required).matches(_fieldsRegex.NAME_REGEX, _helperPlugin.translatedErrors.regex),\n  url: yup.string(_helperPlugin.translatedErrors.string).required(_helperPlugin.translatedErrors.required).matches(_fieldsRegex.URL_REGEX, _helperPlugin.translatedErrors.regex),\n  headers: yup.lazy(function (array) {\n    var baseSchema = yup.array();\n\n    if (array.length === 1) {\n      var _array$ = array[0],\n          key = _array$.key,\n          value = _array$.value;\n\n      if (!key && !value) {\n        return baseSchema;\n      }\n    }\n\n    return baseSchema.of(yup.object().shape({\n      key: yup.string().required(_helperPlugin.translatedErrors.required),\n      value: yup.string().required(_helperPlugin.translatedErrors.required)\n    }));\n  }),\n  events: yup.array()\n});\nvar _default = schema;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}