{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _Select = require(\"@strapi/design-system/Select\");\n\nvar _upperFirst = _interopRequireDefault(require(\"lodash/upperFirst\"));\n\nvar _getTrad = _interopRequireDefault(require(\"../../utils/getTrad\"));\n\nvar options = [{\n  label: 'All',\n  children: [{\n    label: 'images (JPEG, PNG, GIF, SVG, TIFF, ICO, DVU)',\n    value: 'images'\n  }, {\n    label: 'videos (MPEG, MP4, Quicktime, WMV, AVI, FLV)',\n    value: 'videos'\n  }, {\n    label: 'audios (MP3, WAV, OGG)',\n    value: 'audios'\n  }, {\n    label: 'files (CSV, ZIP, PDF, Excel, JSON, ...)',\n    value: 'files'\n  }]\n}];\n\nvar AllowedTypesSelect = function AllowedTypesSelect(_ref) {\n  var intlLabel = _ref.intlLabel,\n      name = _ref.name,\n      _onChange = _ref.onChange,\n      value = _ref.value;\n\n  var _useIntl = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl.formatMessage;\n  /* eslint-disable indent */\n\n\n  var displayedValue = value === null || value.length === 0 ? formatMessage({\n    id: (0, _getTrad[\"default\"])('form.attribute.media.allowed-types.none')\n  }) : (0, _toConsumableArray2[\"default\"])(value).sort().map(function (v) {\n    return (0, _upperFirst[\"default\"])(v);\n  }).join(', ');\n  /* eslint-enable indent */\n\n  var label = intlLabel.id ? formatMessage({\n    id: intlLabel.id,\n    defaultMessage: intlLabel.defaultMessage\n  }) : name;\n  return /*#__PURE__*/_react[\"default\"].createElement(_Select.MultiSelectNested, {\n    id: \"select1\",\n    label: label,\n    customizeContent: function customizeContent() {\n      return displayedValue;\n    },\n    onChange: function onChange(values) {\n      if (values.length > 0) {\n        _onChange({\n          target: {\n            name: name,\n            value: values,\n            type: 'allowed-types-select'\n          }\n        });\n      } else {\n        _onChange({\n          target: {\n            name: name,\n            value: null,\n            type: 'allowed-types-select'\n          }\n        });\n      }\n    },\n    options: options,\n    value: value || []\n  });\n};\n\nAllowedTypesSelect.defaultProps = {\n  value: null\n};\nAllowedTypesSelect.propTypes = {\n  intlLabel: _propTypes[\"default\"].shape({\n    id: _propTypes[\"default\"].string.isRequired,\n    defaultMessage: _propTypes[\"default\"].string.isRequired,\n    values: _propTypes[\"default\"].object\n  }).isRequired,\n  name: _propTypes[\"default\"].string.isRequired,\n  onChange: _propTypes[\"default\"].func.isRequired,\n  value: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].object, _propTypes[\"default\"].array])\n};\nvar _default = AllowedTypesSelect;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}