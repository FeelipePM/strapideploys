{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _lodash = require(\"lodash\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// TODO: refacto this file to avoid eslint issues\n\n/* eslint-disable no-restricted-syntax */\n\n/* eslint-disable no-unused-vars */\nvar createAttributesLayout = function createAttributesLayout(currentLayout, attributes) {\n  var getType = function getType(name) {\n    return (0, _lodash.get)(attributes, [name, 'type'], '');\n  };\n\n  var currentRowIndex = 0;\n  var newLayout = [];\n\n  var _iterator = _createForOfIteratorHelper(currentLayout),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var row = _step.value;\n      var hasDynamicZone = row.some(function (_ref) {\n        var name = _ref.name;\n        return getType(name) === 'dynamiczone';\n      });\n\n      if (!newLayout[currentRowIndex]) {\n        newLayout[currentRowIndex] = [];\n      }\n\n      if (hasDynamicZone) {\n        currentRowIndex = currentRowIndex === 0 && (0, _lodash.isEmpty)(newLayout[0]) ? 0 : currentRowIndex + 1;\n\n        if (!newLayout[currentRowIndex]) {\n          newLayout[currentRowIndex] = [];\n        }\n\n        newLayout[currentRowIndex].push(row);\n        currentRowIndex += 1;\n      } else {\n        newLayout[currentRowIndex].push(row);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return newLayout.filter(function (arr) {\n    return arr.length > 0;\n  });\n};\n\nvar _default = createAttributesLayout;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}