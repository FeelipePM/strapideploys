{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.DraggedItem = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactDnd = require(\"react-dnd\");\n\nvar _reactDndHtml5Backend = require(\"react-dnd-html5-backend\");\n\nvar _styledComponents = _interopRequireDefault(require(\"styled-components\"));\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _toString = _interopRequireDefault(require(\"lodash/toString\"));\n\nvar _Accordion = require(\"@strapi/design-system/Accordion\");\n\nvar _Grid = require(\"@strapi/design-system/Grid\");\n\nvar _Stack = require(\"@strapi/design-system/Stack\");\n\nvar _Box = require(\"@strapi/design-system/Box\");\n\nvar _Tooltip = require(\"@strapi/design-system/Tooltip\");\n\nvar _Trash = _interopRequireDefault(require(\"@strapi/icons/Trash\"));\n\nvar _Drag = _interopRequireDefault(require(\"@strapi/icons/Drag\"));\n\nvar _ItemTypes = _interopRequireDefault(require(\"../../../utils/ItemTypes\"));\n\nvar _getTrad = _interopRequireDefault(require(\"../../../utils/getTrad\"));\n\nvar _Inputs = _interopRequireDefault(require(\"../../Inputs\"));\n\nvar _FieldComponent = _interopRequireDefault(require(\"../../FieldComponent\"));\n\nvar _Preview = _interopRequireDefault(require(\"./Preview\"));\n\nvar _DraggingSibling = _interopRequireDefault(require(\"./DraggingSibling\"));\n\nvar _IconButtonCustoms = require(\"./IconButtonCustoms\");\n\nvar _utils = require(\"./utils\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/* eslint-disable import/no-cycle */\nvar DragButton = /*#__PURE__*/_styledComponents[\"default\"].span.withConfig({\n  displayName: \"DraggedItem__DragButton\",\n  componentId: \"sc-1nd44df-0\"\n})([\"display:flex;align-items:center;height:\", \";padding:0 \", \";cursor:all-scroll;svg{width:\", \"rem;height:\", \"rem;}\"], function (_ref) {\n  var theme = _ref.theme;\n  return theme.spaces[7];\n}, function (_ref2) {\n  var theme = _ref2.theme;\n  return theme.spaces[3];\n}, 12 / 16, 12 / 16);\n/* eslint-disable react/no-array-index-key */\n// Issues:\n// https://github.com/react-dnd/react-dnd/issues/1368\n// https://github.com/frontend-collective/react-sortable-tree/issues/490\n\n\nvar DraggedItem = function DraggedItem(_ref3) {\n  var componentFieldName = _ref3.componentFieldName,\n      hasErrorMessage = _ref3.hasErrorMessage,\n      hasErrors = _ref3.hasErrors,\n      isDraggingSibling = _ref3.isDraggingSibling,\n      isOpen = _ref3.isOpen,\n      isReadOnly = _ref3.isReadOnly,\n      onClickToggle = _ref3.onClickToggle,\n      schema = _ref3.schema,\n      toggleCollapses = _ref3.toggleCollapses,\n      moveComponentField = _ref3.moveComponentField,\n      removeRepeatableField = _ref3.removeRepeatableField,\n      setIsDraggingSibling = _ref3.setIsDraggingSibling,\n      triggerFormValidation = _ref3.triggerFormValidation,\n      displayedValue = _ref3.displayedValue;\n  var dragRef = (0, _react.useRef)(null);\n  var dropRef = (0, _react.useRef)(null);\n\n  var _useState = (0, _react.useState)(false),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      forceRerenderAfterDnd = _useState2[1];\n\n  var _useIntl = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl.formatMessage;\n\n  var fields = schema.layouts.edit;\n\n  var _useDrop = (0, _reactDnd.useDrop)({\n    accept: _ItemTypes[\"default\"].COMPONENT,\n    canDrop: function canDrop() {\n      return false;\n    },\n    hover: function hover(item, monitor) {\n      if (!dropRef.current) {\n        return;\n      }\n\n      var dragPath = item.originalPath;\n      var hoverPath = componentFieldName;\n      var fullPathToComponentArray = dragPath.split('.');\n      var dragIndexString = fullPathToComponentArray.slice().splice(-1).join('');\n      var hoverIndexString = hoverPath.split('.').splice(-1).join('');\n      var pathToComponentArray = fullPathToComponentArray.slice(0, fullPathToComponentArray.length - 1);\n      var dragIndex = parseInt(dragIndexString, 10);\n      var hoverIndex = parseInt(hoverIndexString, 10); // Don't replace items with themselves\n\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      } // Determine rectangle on screen\n\n\n      // Determine rectangle on screen\n      var hoverBoundingRect = dropRef.current.getBoundingClientRect(); // Get vertical middle\n\n      // Get vertical middle\n      var hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2; // Determine mouse position\n\n      // Determine mouse position\n      var clientOffset = monitor.getClientOffset(); // Get pixels to the top\n\n      // Get pixels to the top\n      var hoverClientY = clientOffset.y - hoverBoundingRect.top; // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      } // Dragging upwards\n\n\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      } // If They are not in the same level, should not move\n\n\n      // If They are not in the same level, should not move\n      if (dragPath.split('.').length !== hoverPath.split('.').length) {\n        return;\n      } // Time to actually perform the action in the data\n\n\n      // Time to actually perform the action in the data\n      moveComponentField(pathToComponentArray, dragIndex, hoverIndex);\n      item.originalPath = hoverPath;\n    }\n  }),\n      _useDrop2 = (0, _slicedToArray2[\"default\"])(_useDrop, 2),\n      drop = _useDrop2[1];\n\n  var _useDrag = (0, _reactDnd.useDrag)({\n    type: _ItemTypes[\"default\"].COMPONENT,\n    item: function item() {\n      // Close all collapses\n      toggleCollapses(-1);\n      return {\n        displayedValue: displayedValue,\n        originalPath: componentFieldName\n      };\n    },\n    end: function end() {\n      // Update the errors\n      triggerFormValidation();\n      setIsDraggingSibling(false);\n    },\n    collect: function collect(monitor) {\n      return {\n        isDragging: monitor.isDragging()\n      };\n    }\n  }),\n      _useDrag2 = (0, _slicedToArray2[\"default\"])(_useDrag, 3),\n      isDragging = _useDrag2[0].isDragging,\n      drag = _useDrag2[1],\n      preview = _useDrag2[2];\n\n  (0, _react.useEffect)(function () {\n    preview((0, _reactDndHtml5Backend.getEmptyImage)(), {\n      captureDraggingState: false\n    });\n  }, [preview]);\n  (0, _react.useEffect)(function () {\n    if (isDragging) {\n      setIsDraggingSibling(true);\n    }\n  }, [isDragging, setIsDraggingSibling]); // Effect in order to force a rerender after reordering the components\n  // Since we are removing the Accordion when doing the DnD  we are losing the dragRef, therefore the replaced element cannot be dragged\n  // anymore, this hack forces a rerender in order to apply the dragRef\n\n  (0, _react.useEffect)(function () {\n    if (!isDraggingSibling) {\n      forceRerenderAfterDnd(function (prev) {\n        return !prev;\n      });\n    }\n  }, [isDraggingSibling]); // Create the refs\n  // We need 1 for the drop target\n  // 1 for the drag target\n\n  var refs = {\n    dragRef: drag(dragRef),\n    dropRef: drop(dropRef)\n  };\n  var accordionTitle = (0, _toString[\"default\"])(displayedValue);\n  var accordionHasError = hasErrors ? 'error' : undefined;\n  return /*#__PURE__*/_react[\"default\"].createElement(_Box.Box, {\n    ref: refs ? refs.dropRef : null\n  }, isDragging && /*#__PURE__*/_react[\"default\"].createElement(_Preview[\"default\"], null), !isDragging && isDraggingSibling && /*#__PURE__*/_react[\"default\"].createElement(_DraggingSibling[\"default\"], {\n    displayedValue: accordionTitle,\n    componentFieldName: componentFieldName\n  }), !isDragging && !isDraggingSibling && /*#__PURE__*/_react[\"default\"].createElement(_Accordion.Accordion, {\n    error: accordionHasError,\n    hasErrorMessage: hasErrorMessage,\n    expanded: isOpen,\n    onToggle: onClickToggle,\n    id: componentFieldName,\n    size: \"S\"\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Accordion.AccordionToggle, {\n    action: isReadOnly ? null : /*#__PURE__*/_react[\"default\"].createElement(_Stack.Stack, {\n      horizontal: true,\n      spacing: 0\n    }, /*#__PURE__*/_react[\"default\"].createElement(_IconButtonCustoms.CustomIconButton, {\n      expanded: isOpen,\n      noBorder: true,\n      onClick: function onClick() {\n        removeRepeatableField(componentFieldName);\n        toggleCollapses();\n      },\n      label: formatMessage({\n        id: (0, _getTrad[\"default\"])('containers.Edit.delete'),\n        defaultMessage: 'Delete'\n      }),\n      icon: /*#__PURE__*/_react[\"default\"].createElement(_Trash[\"default\"], null)\n    }), /*#__PURE__*/_react[\"default\"].createElement(_Tooltip.Tooltip, {\n      description: formatMessage({\n        id: (0, _getTrad[\"default\"])('components.DragHandle-label'),\n        defaultMessage: 'Drag'\n      })\n    }, /*#__PURE__*/_react[\"default\"].createElement(DragButton, {\n      role: \"button\",\n      tabIndex: -1,\n      ref: refs.dragRef,\n      onClick: function onClick(e) {\n        return e.stopPropagation();\n      }\n    }, /*#__PURE__*/_react[\"default\"].createElement(_Drag[\"default\"], null)))),\n    title: accordionTitle,\n    togglePosition: \"left\"\n  }), /*#__PURE__*/_react[\"default\"].createElement(_Accordion.AccordionContent, null, /*#__PURE__*/_react[\"default\"].createElement(_Stack.Stack, {\n    background: \"neutral100\",\n    padding: 6,\n    spacing: 6\n  }, fields.map(function (fieldRow, key) {\n    return /*#__PURE__*/_react[\"default\"].createElement(_Grid.Grid, {\n      gap: 4,\n      key: key\n    }, fieldRow.map(function (_ref4) {\n      var name = _ref4.name,\n          fieldSchema = _ref4.fieldSchema,\n          metadatas = _ref4.metadatas,\n          queryInfos = _ref4.queryInfos,\n          size = _ref4.size;\n      var isComponent = fieldSchema.type === 'component';\n      var keys = \"\".concat(componentFieldName, \".\").concat(name);\n\n      if (isComponent) {\n        var componentUid = fieldSchema.component;\n        return /*#__PURE__*/_react[\"default\"].createElement(_Grid.GridItem, {\n          col: size,\n          s: 12,\n          xs: 12,\n          key: name\n        }, /*#__PURE__*/_react[\"default\"].createElement(_FieldComponent[\"default\"], {\n          componentUid: componentUid,\n          intlLabel: {\n            id: metadatas.label,\n            defaultMessage: metadatas.label\n          },\n          isRepeatable: fieldSchema.repeatable,\n          isNested: true,\n          name: keys,\n          max: fieldSchema.max,\n          min: fieldSchema.min,\n          required: fieldSchema.required\n        }));\n      }\n\n      return /*#__PURE__*/_react[\"default\"].createElement(_Grid.GridItem, {\n        key: keys,\n        col: size,\n        s: 12,\n        xs: 12\n      }, /*#__PURE__*/_react[\"default\"].createElement(_Inputs[\"default\"], {\n        fieldSchema: fieldSchema,\n        keys: keys,\n        metadatas: metadatas // onBlur={hasErrors ? checkFormErrors : null}\n        ,\n        queryInfos: queryInfos\n      }));\n    }));\n  })))));\n};\n\nexports.DraggedItem = DraggedItem;\nDraggedItem.defaultProps = {\n  isDraggingSibling: false,\n  isOpen: false,\n  setIsDraggingSibling: function setIsDraggingSibling() {},\n  toggleCollapses: function toggleCollapses() {}\n};\nDraggedItem.propTypes = {\n  componentFieldName: _propTypes[\"default\"].string.isRequired,\n  hasErrorMessage: _propTypes[\"default\"].bool.isRequired,\n  hasErrors: _propTypes[\"default\"].bool.isRequired,\n  isDraggingSibling: _propTypes[\"default\"].bool,\n  isOpen: _propTypes[\"default\"].bool,\n  isReadOnly: _propTypes[\"default\"].bool.isRequired,\n  onClickToggle: _propTypes[\"default\"].func.isRequired,\n  schema: _propTypes[\"default\"].object.isRequired,\n  toggleCollapses: _propTypes[\"default\"].func,\n  moveComponentField: _propTypes[\"default\"].func.isRequired,\n  removeRepeatableField: _propTypes[\"default\"].func.isRequired,\n  setIsDraggingSibling: _propTypes[\"default\"].func,\n  triggerFormValidation: _propTypes[\"default\"].func.isRequired,\n  // checkFormErrors: PropTypes.func.isRequired,\n  displayedValue: _propTypes[\"default\"].string.isRequired\n};\nvar Memoized = /*#__PURE__*/(0, _react.memo)(DraggedItem);\n\nvar _default = (0, _utils.connect)(Memoized, _utils.select);\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}