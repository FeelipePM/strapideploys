{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useRemoveAsset = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _reactQuery = require(\"react-query\");\n\nvar _helperPlugin = require(\"@strapi/helper-plugin\");\n\nvar _removeAssetQuery = require(\"../utils/removeAssetQuery\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar useRemoveAsset = function useRemoveAsset(_onSuccess) {\n  var toggleNotification = (0, _helperPlugin.useNotification)();\n  var queryClient = (0, _reactQuery.useQueryClient)();\n  var mutation = (0, _reactQuery.useMutation)(function (assetId) {\n    return (0, _removeAssetQuery.removeAssetRequest)(assetId);\n  }, {\n    onSuccess: function onSuccess() {\n      // Coupled with the cache of useAssets\n      queryClient.refetchQueries(['assets'], {\n        active: true\n      });\n      queryClient.refetchQueries(['asset-count'], {\n        active: true\n      });\n      toggleNotification({\n        type: 'success',\n        message: {\n          id: 'modal.remove.success-label',\n          defaultMessage: 'The asset has been successfully removed.'\n        }\n      });\n\n      _onSuccess();\n    },\n    onError: function onError(error) {\n      toggleNotification({\n        type: 'warning',\n        message: error.message\n      });\n    }\n  });\n\n  var removeAsset = function removeAsset(assetId) {\n    return mutation.mutate(assetId);\n  };\n\n  return _objectSpread(_objectSpread({}, mutation), {}, {\n    removeAsset: removeAsset\n  });\n};\n\nexports.useRemoveAsset = useRemoveAsset;","map":null,"metadata":{},"sourceType":"script"}