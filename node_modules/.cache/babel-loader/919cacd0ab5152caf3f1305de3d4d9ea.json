{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = require(\"react\");\n\nvar _lodash = require(\"lodash\");\n\nvar _helperPlugin = require(\"@strapi/helper-plugin\");\n\nvar _utils = require(\"../../../utils\");\n\nvar _hooks = require(\"../../../hooks\");\n\nfunction useSelect(_ref) {\n  var isFromDynamicZone = _ref.isFromDynamicZone,\n      name = _ref.name;\n\n  var _useCMEditViewDataMan = (0, _helperPlugin.useCMEditViewDataManager)(),\n      addNonRepeatableComponentToField = _useCMEditViewDataMan.addNonRepeatableComponentToField,\n      createActionAllowedFields = _useCMEditViewDataMan.createActionAllowedFields,\n      isCreatingEntry = _useCMEditViewDataMan.isCreatingEntry,\n      modifiedData = _useCMEditViewDataMan.modifiedData,\n      removeComponentFromField = _useCMEditViewDataMan.removeComponentFromField,\n      readActionAllowedFields = _useCMEditViewDataMan.readActionAllowedFields,\n      updateActionAllowedFields = _useCMEditViewDataMan.updateActionAllowedFields,\n      formErrors = _useCMEditViewDataMan.formErrors;\n\n  var _useContentTypeLayout = (0, _hooks.useContentTypeLayout)(),\n      contentType = _useContentTypeLayout.contentType; // This is used for the readonly mode when updating an entry\n\n\n  var allDynamicZoneFields = (0, _react.useMemo)(function () {\n    var attributes = (0, _lodash.get)(contentType, ['attributes'], {});\n    var dynamicZoneFields = Object.keys(attributes).filter(function (attrName) {\n      return (0, _lodash.get)(attributes, [attrName, 'type'], '') === 'dynamiczone';\n    });\n    return dynamicZoneFields;\n  }, [contentType]);\n  var allowedFields = (0, _react.useMemo)(function () {\n    return isCreatingEntry ? createActionAllowedFields : updateActionAllowedFields;\n  }, [isCreatingEntry, createActionAllowedFields, updateActionAllowedFields]);\n  var componentValue = (0, _lodash.get)(modifiedData, name, null);\n  var compoName = (0, _react.useMemo)(function () {\n    return (0, _utils.getFieldName)(name);\n  }, [name]);\n  var hasChildrenAllowedFields = (0, _react.useMemo)(function () {\n    if (isFromDynamicZone && isCreatingEntry) {\n      return true;\n    }\n\n    var includedDynamicZoneFields = allowedFields.filter(function (name) {\n      return name === compoName[0];\n    });\n\n    if (includedDynamicZoneFields.length > 0) {\n      return true;\n    }\n\n    var relatedChildrenAllowedFields = allowedFields.map(function (fieldName) {\n      return fieldName.split('.');\n    }).filter(function (fieldName) {\n      if (fieldName.length < compoName.length) {\n        return false;\n      }\n\n      var joined = (0, _lodash.take)(fieldName, compoName.length).join('.');\n      return joined === compoName.join('.');\n    });\n    return relatedChildrenAllowedFields.length > 0;\n  }, [isFromDynamicZone, isCreatingEntry, allowedFields, compoName]); // This is used only when updating an entry\n\n  var hasChildrenReadableFields = (0, _react.useMemo)(function () {\n    if (isFromDynamicZone) {\n      return true;\n    }\n\n    if (allDynamicZoneFields.includes(compoName[0])) {\n      return true;\n    }\n\n    var allowedFields = isCreatingEntry ? [] : readActionAllowedFields;\n    var relatedChildrenAllowedFields = allowedFields.map(function (fieldName) {\n      return fieldName.split('.');\n    }).filter(function (fieldName) {\n      if (fieldName.length < compoName.length) {\n        return false;\n      }\n\n      var joined = (0, _lodash.take)(fieldName, compoName.length).join('.');\n      return joined === compoName.join('.');\n    });\n    return relatedChildrenAllowedFields.length > 0;\n  }, [isFromDynamicZone, allDynamicZoneFields, compoName, isCreatingEntry, readActionAllowedFields]);\n  var isReadOnly = (0, _react.useMemo)(function () {\n    if (isCreatingEntry) {\n      return false;\n    }\n\n    if (hasChildrenAllowedFields) {\n      return false;\n    }\n\n    return hasChildrenReadableFields;\n  }, [hasChildrenAllowedFields, hasChildrenReadableFields, isCreatingEntry]);\n  return {\n    addNonRepeatableComponentToField: addNonRepeatableComponentToField,\n    formErrors: formErrors,\n    hasChildrenAllowedFields: hasChildrenAllowedFields,\n    hasChildrenReadableFields: hasChildrenReadableFields,\n    isCreatingEntry: isCreatingEntry,\n    isReadOnly: isReadOnly,\n    removeComponentFromField: removeComponentFromField,\n    componentValue: componentValue\n  };\n}\n\nvar _default = useSelect;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}