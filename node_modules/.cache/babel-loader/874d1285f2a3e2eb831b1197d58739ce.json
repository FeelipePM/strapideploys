{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validators = exports.isNameAllowed = exports.isMinSuperiorThanMax = exports.getUsedContentTypeAttributeNames = exports.createTextShape = exports.alreadyUsedAttributeNames = exports.NAME_REGEX = void 0;\n\nvar yup = _interopRequireWildcard(require(\"yup\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _helperPlugin = require(\"@strapi/helper-plugin\");\n\nvar _getTrad = _interopRequireDefault(require(\"../../../../utils/getTrad\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar NAME_REGEX = new RegExp('^[A-Za-z][_0-9A-Za-z]*$');\nexports.NAME_REGEX = NAME_REGEX;\n\nvar alreadyUsedAttributeNames = function alreadyUsedAttributeNames(usedNames) {\n  return {\n    name: 'attributeNameAlreadyUsed',\n    message: _helperPlugin.translatedErrors.unique,\n    test: function test(value) {\n      if (!value) {\n        return false;\n      }\n\n      return !usedNames.includes(value);\n    }\n  };\n};\n\nexports.alreadyUsedAttributeNames = alreadyUsedAttributeNames;\n\nvar getUsedContentTypeAttributeNames = function getUsedContentTypeAttributeNames(ctShema, isEdition, attributeNameToEdit) {\n  var attributes = (0, _lodash.get)(ctShema, ['schema', 'attributes'], {});\n  return Object.keys(attributes).filter(function (attr) {\n    if (isEdition) {\n      return attr !== attributeNameToEdit;\n    }\n\n    return true;\n  });\n};\n\nexports.getUsedContentTypeAttributeNames = getUsedContentTypeAttributeNames;\n\nvar isNameAllowed = function isNameAllowed(reservedNames) {\n  return {\n    name: 'forbiddenAttributeName',\n    message: (0, _getTrad[\"default\"])('error.attributeName.reserved-name'),\n    test: function test(value) {\n      if (!value) {\n        return false;\n      }\n\n      return !reservedNames.includes(value);\n    }\n  };\n};\n\nexports.isNameAllowed = isNameAllowed;\nvar validators = {\n  \"default\": function _default() {\n    return yup.string().nullable();\n  },\n  max: function max() {\n    return yup.number().integer().nullable();\n  },\n  min: function min() {\n    return yup.number().integer().when('max', function (max, schema) {\n      if (max) {\n        return schema.max(max, (0, _getTrad[\"default\"])('error.validation.minSupMax'));\n      }\n\n      return schema;\n    }).nullable();\n  },\n  maxLength: function maxLength() {\n    return yup.number().integer().positive((0, _getTrad[\"default\"])('error.validation.positive')).nullable();\n  },\n  minLength: function minLength() {\n    return yup.number().integer().min(0).when('maxLength', function (maxLength, schema) {\n      if (maxLength) {\n        return schema.max(maxLength, (0, _getTrad[\"default\"])('error.validation.minSupMax'));\n      }\n\n      return schema;\n    }).nullable();\n  },\n  name: function name(usedNames, reservedNames) {\n    return yup.string().test(alreadyUsedAttributeNames(usedNames)).test(isNameAllowed(reservedNames)).matches(NAME_REGEX, _helperPlugin.translatedErrors.regex).required(_helperPlugin.translatedErrors.required);\n  },\n  required: function required() {\n    return yup[\"boolean\"]();\n  },\n  type: function type() {\n    return yup.string().required(_helperPlugin.translatedErrors.required);\n  },\n  unique: function unique() {\n    return yup[\"boolean\"]().nullable();\n  }\n};\nexports.validators = validators;\n\nvar createTextShape = function createTextShape(usedAttributeNames, reservedNames) {\n  var shape = {\n    name: validators.name(usedAttributeNames, reservedNames),\n    type: validators.type(),\n    \"default\": validators[\"default\"](),\n    unique: validators.unique(),\n    required: validators.required(),\n    maxLength: validators.maxLength(),\n    minLength: validators.minLength(),\n    regex: yup.string().test({\n      name: 'isValidRegExpPattern',\n      message: (0, _getTrad[\"default\"])('error.validation.regex'),\n      test: function test(value) {\n        return new RegExp(value) !== null;\n      }\n    }).nullable()\n  };\n  return shape;\n};\n\nexports.createTextShape = createTextShape;\nvar isMinSuperiorThanMax = {\n  name: 'isMinSuperiorThanMax',\n  message: (0, _getTrad[\"default\"])('error.validation.minSupMax'),\n  test: function test(min) {\n    if (!min) {\n      return true;\n    }\n\n    var max = this.parent.max;\n\n    if (!max) {\n      return true;\n    }\n\n    if (Number.isNaN((0, _lodash.toNumber)(min))) {\n      return true;\n    }\n\n    return (0, _lodash.toNumber)(max) >= (0, _lodash.toNumber)(min);\n  }\n};\nexports.isMinSuperiorThanMax = isMinSuperiorThanMax;","map":null,"metadata":{},"sourceType":"script"}