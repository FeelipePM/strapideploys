{"ast":null,"code":"\"use strict\";\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar yup = _interopRequireWildcard(require(\"yup\"));\n\nvar _helperPlugin = require(\"@strapi/helper-plugin\");\n\nvar _utils = require(\"../../../utils\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar callbackLabel = {\n  id: (0, _utils.getTrad)('PopUpForm.Providers.redirectURL.front-end.label'),\n  defaultMessage: 'The redirect URL to your front-end app'\n};\nvar callbackPlaceholder = {\n  id: 'http://www.client-app.com',\n  defaultMessage: 'http://www.client-app.com'\n};\nvar enabledDescription = {\n  id: (0, _utils.getTrad)('PopUpForm.Providers.enabled.description'),\n  defaultMessage: \"If disabled, users won't be able to use this provider.\"\n};\nvar enabledLabel = {\n  id: (0, _utils.getTrad)('PopUpForm.Providers.enabled.label'),\n  defaultMessage: 'Enable'\n};\nvar keyLabel = {\n  id: (0, _utils.getTrad)('PopUpForm.Providers.key.label'),\n  defaultMessage: 'Client ID'\n};\nvar hintLabel = {\n  id: (0, _utils.getTrad)('PopUpForm.Providers.redirectURL.label'),\n  defaultMessage: 'The redirect URL to add in your {provider} application configurations'\n};\nvar textPlaceholder = {\n  id: (0, _utils.getTrad)('PopUpForm.Providers.key.placeholder'),\n  defaultMessage: 'TEXT'\n};\nvar secretLabel = {\n  id: (0, _utils.getTrad)('PopUpForm.Providers.secret.label'),\n  defaultMessage: 'Client Secret'\n};\nvar forms = {\n  email: {\n    form: [[{\n      intlLabel: enabledLabel,\n      name: 'enabled',\n      type: 'bool',\n      description: enabledDescription,\n      size: 6 // TODO check if still needed\n      // validations: {\n      //   required: true,\n      // },\n\n    }]],\n    schema: yup.object().shape({\n      enabled: yup.bool().required(_helperPlugin.translatedErrors.required)\n    })\n  },\n  providers: {\n    form: [[{\n      intlLabel: enabledLabel,\n      name: 'enabled',\n      type: 'bool',\n      description: enabledDescription,\n      size: 6,\n      validations: {\n        required: true\n      }\n    }], [{\n      intlLabel: keyLabel,\n      name: 'key',\n      type: 'text',\n      placeholder: textPlaceholder,\n      size: 12,\n      validations: {\n        required: true\n      }\n    }], [{\n      intlLabel: secretLabel,\n      name: 'secret',\n      type: 'text',\n      placeholder: textPlaceholder,\n      size: 12,\n      validations: {\n        required: true\n      }\n    }], [{\n      intlLabel: callbackLabel,\n      placeholder: callbackPlaceholder,\n      name: 'callback',\n      type: 'text',\n      size: 12,\n      validations: {\n        required: true\n      }\n    }], [{\n      intlLabel: hintLabel,\n      name: 'noName',\n      type: 'text',\n      validations: {},\n      size: 12,\n      disabled: true\n    }]],\n    schema: yup.object().shape({\n      enabled: yup.bool().required(_helperPlugin.translatedErrors.required),\n      key: yup.string().when('enabled', {\n        is: true,\n        then: yup.string().required(_helperPlugin.translatedErrors.required),\n        otherwise: yup.string()\n      }),\n      secret: yup.string().when('enabled', {\n        is: true,\n        then: yup.string().required(_helperPlugin.translatedErrors.required),\n        otherwise: yup.string()\n      }),\n      callback: yup.string().when('enabled', {\n        is: true,\n        then: yup.string().required(_helperPlugin.translatedErrors.required),\n        otherwise: yup.string()\n      })\n    })\n  },\n  providersWithSubdomain: {\n    form: [[{\n      intlLabel: enabledLabel,\n      name: 'enabled',\n      type: 'bool',\n      description: enabledDescription,\n      size: 6,\n      validations: {\n        required: true\n      }\n    }], [{\n      intlLabel: keyLabel,\n      name: 'key',\n      type: 'text',\n      placeholder: textPlaceholder,\n      size: 12,\n      validations: {\n        required: true\n      }\n    }], [{\n      intlLabel: secretLabel,\n      name: 'secret',\n      type: 'text',\n      placeholder: textPlaceholder,\n      size: 12,\n      validations: {\n        required: true\n      }\n    }], [{\n      intlLabel: {\n        id: (0, _utils.getTrad)('PopUpForm.Providers.subdomain.label'),\n        defaultMessage: 'Host URI (Subdomain)'\n      },\n      name: 'subdomain',\n      type: 'text',\n      placeholder: {\n        id: (0, _utils.getTrad)('PopUpForm.Providers.subdomain.placeholder'),\n        defaultMessage: 'my.subdomain.com'\n      },\n      size: 12,\n      validations: {\n        required: true\n      }\n    }], [{\n      intlLabel: callbackLabel,\n      placeholder: callbackPlaceholder,\n      name: 'callback',\n      type: 'text',\n      size: 12,\n      validations: {\n        required: true\n      }\n    }], [{\n      intlLabel: hintLabel,\n      name: 'noName',\n      type: 'text',\n      validations: {},\n      size: 12,\n      disabled: true\n    }]],\n    schema: yup.object().shape({\n      enabled: yup.bool().required(_helperPlugin.translatedErrors.required),\n      key: yup.string().when('enabled', {\n        is: true,\n        then: yup.string().required(_helperPlugin.translatedErrors.required),\n        otherwise: yup.string()\n      }),\n      secret: yup.string().when('enabled', {\n        is: true,\n        then: yup.string().required(_helperPlugin.translatedErrors.required),\n        otherwise: yup.string()\n      }),\n      subdomain: yup.string().when('enabled', {\n        is: true,\n        then: yup.string().required(_helperPlugin.translatedErrors.required),\n        otherwise: yup.string()\n      }),\n      callback: yup.string().when('enabled', {\n        is: true,\n        then: yup.string().required(_helperPlugin.translatedErrors.required),\n        otherwise: yup.string()\n      })\n    })\n  }\n};\nvar _default = forms;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}