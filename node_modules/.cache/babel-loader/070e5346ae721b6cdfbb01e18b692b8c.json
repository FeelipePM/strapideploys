{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _helperPlugin = require(\"@strapi/helper-plugin\");\n\nvar _ListView = _interopRequireDefault(require(\"../ListView\"));\n\nvar _utils = require(\"../../utils\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar Permissions = function Permissions(props) {\n  var viewPermissions = (0, _react.useMemo)(function () {\n    return (0, _utils.generatePermissionsObject)(props.slug);\n  }, [props.slug]);\n\n  var _useRBAC = (0, _helperPlugin.useRBAC)(viewPermissions, props.permissions),\n      isLoading = _useRBAC.isLoading,\n      allowedActions = _useRBAC.allowedActions;\n\n  if (isLoading) {\n    return /*#__PURE__*/_react[\"default\"].createElement(_helperPlugin.LoadingIndicatorPage, null);\n  }\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_ListView[\"default\"], (0, _extends2[\"default\"])({}, props, allowedActions));\n};\n\nPermissions.defaultProps = {\n  permissions: []\n};\nPermissions.propTypes = {\n  permissions: _propTypes[\"default\"].array,\n  slug: _propTypes[\"default\"].string.isRequired\n}; // This avoids the components to rerender on params change causing multiple requests to be fired\n\nvar _default = /*#__PURE__*/(0, _react.memo)(Permissions, function (prev, next) {\n  var differenceBetweenRerenders = (0, _helperPlugin.difference)(prev, next); // Here the submenu is using a navlink which doesn't support the state\n  // When we navigate from the EV to the LV using the menu the state is lost at some point\n  // and this causes the component to rerender twice and firing requests twice\n  // this hack prevents this\n  // TODO at some point we will need to refacto the LV and migrate to react-query\n\n  var propNamesThatHaveChanged = Object.keys(differenceBetweenRerenders).filter(function (propName) {\n    return propName !== 'state';\n  });\n  return propNamesThatHaveChanged.length > 0;\n});\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}