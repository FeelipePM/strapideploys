{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useAssets = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = require(\"react\");\n\nvar _reactQuery = require(\"react-query\");\n\nvar _LiveRegions = require(\"@strapi/design-system/LiveRegions\");\n\nvar _helperPlugin = require(\"@strapi/helper-plugin\");\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _utils = require(\"../utils\");\n\nvar useAssets = function useAssets(_ref) {\n  var skipWhen = _ref.skipWhen;\n\n  var _useIntl = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl.formatMessage;\n\n  var toggleNotification = (0, _helperPlugin.useNotification)();\n\n  var _useNotifyAT = (0, _LiveRegions.useNotifyAT)(),\n      notifyStatus = _useNotifyAT.notifyStatus;\n\n  var _useQueryParams = (0, _helperPlugin.useQueryParams)(),\n      _useQueryParams2 = (0, _slicedToArray2[\"default\"])(_useQueryParams, 1),\n      rawQuery = _useQueryParams2[0].rawQuery;\n\n  var dataRequestURL = (0, _utils.getRequestUrl)('files');\n\n  var getAssets = /*#__PURE__*/function () {\n    var _ref2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n      var _yield$axiosInstance$, data;\n\n      return _regenerator[\"default\"].wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _utils.axiosInstance.get(\"\".concat(dataRequestURL).concat(rawQuery));\n\n            case 2:\n              _yield$axiosInstance$ = _context.sent;\n              data = _yield$axiosInstance$.data;\n              return _context.abrupt(\"return\", data);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getAssets() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var _useQuery = (0, _reactQuery.useQuery)([\"assets\", rawQuery], getAssets, {\n    enabled: !skipWhen,\n    staleTime: 0,\n    cacheTime: 0\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      isLoading = _useQuery.isLoading;\n\n  (0, _react.useEffect)(function () {\n    if (data) {\n      notifyStatus(formatMessage({\n        id: 'list.asset.at.finished',\n        defaultMessage: 'The assets have finished loading.'\n      }));\n    }\n  }, [data, notifyStatus, formatMessage]);\n  (0, _react.useEffect)(function () {\n    if (error) {\n      toggleNotification({\n        type: 'warning',\n        message: {\n          id: 'notification.error'\n        }\n      });\n    }\n  }, [error, toggleNotification]);\n  return {\n    data: data,\n    error: error,\n    isLoading: isLoading\n  };\n};\n\nexports.useAssets = useAssets;","map":null,"metadata":{},"sourceType":"script"}