{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _helperPlugin = require(\"@strapi/helper-plugin\");\n\nvar _Button = require(\"@strapi/design-system/Button\");\n\nvar _Layer = _interopRequireDefault(require(\"@strapi/icons/Layer\"));\n\nvar _reactRouterDom = require(\"react-router-dom\");\n\nvar _reactIntl = require(\"react-intl\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar cmPermissions = {\n  collectionTypesConfigurations: [{\n    action: 'plugin::content-manager.collection-types.configure-view',\n    subject: null\n  }],\n  componentsConfigurations: [{\n    action: 'plugin::content-manager.components.configure-layout',\n    subject: null\n  }],\n  singleTypesConfigurations: [{\n    action: 'plugin::content-manager.single-types.configure-view',\n    subject: null\n  }]\n};\n\nvar LinkToCMSettingsView = function LinkToCMSettingsView(_ref) {\n  var disabled = _ref.disabled,\n      isTemporary = _ref.isTemporary,\n      isInContentTypeView = _ref.isInContentTypeView,\n      contentTypeKind = _ref.contentTypeKind,\n      targetUid = _ref.targetUid;\n\n  var _useIntl = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl.formatMessage;\n\n  var _useHistory = (0, _reactRouterDom.useHistory)(),\n      push = _useHistory.push;\n\n  var collectionTypesConfigurations = cmPermissions.collectionTypesConfigurations,\n      componentsConfigurations = cmPermissions.componentsConfigurations,\n      singleTypesConfigurations = cmPermissions.singleTypesConfigurations;\n  var label = formatMessage({\n    id: 'content-type-builder.form.button.configure-view'\n  });\n  var permissionsToApply = collectionTypesConfigurations;\n\n  var handleClick = function handleClick() {\n    if (isTemporary) {\n      return false;\n    }\n\n    if (isInContentTypeView) {\n      push(\"/content-manager/collectionType/\".concat(targetUid, \"/configurations/edit\"));\n    } else {\n      push(\"/content-manager/components/\".concat(targetUid, \"/configurations/edit\"));\n    }\n\n    return false;\n  };\n\n  if (isInContentTypeView && contentTypeKind === 'singleType') {\n    permissionsToApply = singleTypesConfigurations;\n  }\n\n  if (!isInContentTypeView) {\n    permissionsToApply = componentsConfigurations;\n  }\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_helperPlugin.CheckPermissions, {\n    permissions: permissionsToApply\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Button.Button, {\n    startIcon: /*#__PURE__*/_react[\"default\"].createElement(_Layer[\"default\"], null),\n    variant: \"tertiary\",\n    onClick: handleClick,\n    disabled: isTemporary || disabled\n  }, label));\n};\n\nLinkToCMSettingsView.defaultProps = {\n  contentTypeKind: 'collectionType',\n  isInContentTypeView: true,\n  isTemporary: false,\n  targetUid: ''\n};\nLinkToCMSettingsView.propTypes = {\n  disabled: _propTypes[\"default\"].bool.isRequired,\n  contentTypeKind: _propTypes[\"default\"].string,\n  isInContentTypeView: _propTypes[\"default\"].bool,\n  isTemporary: _propTypes[\"default\"].bool,\n  targetUid: _propTypes[\"default\"].string\n};\n\nvar _default = /*#__PURE__*/(0, _react.memo)(LinkToCMSettingsView);\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}