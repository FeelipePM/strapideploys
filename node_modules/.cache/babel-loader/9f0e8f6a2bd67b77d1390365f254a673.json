{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _helperPlugin = require(\"@strapi/helper-plugin\");\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _reactRouterDom = require(\"react-router-dom\");\n\nvar _get2 = _interopRequireDefault(require(\"lodash/get\"));\n\nvar _has = _interopRequireDefault(require(\"lodash/has\"));\n\nvar _set = _interopRequireDefault(require(\"lodash/set\"));\n\nvar _toLower = _interopRequireDefault(require(\"lodash/toLower\"));\n\nvar _upperFirst = _interopRequireDefault(require(\"lodash/upperFirst\"));\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _Box = require(\"@strapi/design-system/Box\");\n\nvar _Button = require(\"@strapi/design-system/Button\");\n\nvar _Divider = require(\"@strapi/design-system/Divider\");\n\nvar _ModalLayout = require(\"@strapi/design-system/ModalLayout\");\n\nvar _Typography = require(\"@strapi/design-system/Typography\");\n\nvar _Tabs = require(\"@strapi/design-system/Tabs\");\n\nvar _Flex = require(\"@strapi/design-system/Flex\");\n\nvar _Stack = require(\"@strapi/design-system/Stack\");\n\nvar _pluginId = _interopRequireDefault(require(\"../../pluginId\"));\n\nvar _useDataManager2 = _interopRequireDefault(require(\"../../hooks/useDataManager\"));\n\nvar _useFormModalNavigation = _interopRequireDefault(require(\"../../hooks/useFormModalNavigation\"));\n\nvar _AllowedTypesSelect = _interopRequireDefault(require(\"../AllowedTypesSelect\"));\n\nvar _AttributeOptions = _interopRequireDefault(require(\"../AttributeOptions\"));\n\nvar _DraftAndPublishToggle = _interopRequireDefault(require(\"../DraftAndPublishToggle\"));\n\nvar _FormModalHeader = _interopRequireDefault(require(\"../FormModalHeader\"));\n\nvar _FormModalEndActions = _interopRequireDefault(require(\"../FormModalEndActions\"));\n\nvar _BooleanDefaultValueSelect = _interopRequireDefault(require(\"../BooleanDefaultValueSelect\"));\n\nvar _BooleanRadioGroup = _interopRequireDefault(require(\"../BooleanRadioGroup\"));\n\nvar _CheckboxWithNumberField = _interopRequireDefault(require(\"../CheckboxWithNumberField\"));\n\nvar _CustomRadioGroup = _interopRequireDefault(require(\"../CustomRadioGroup\"));\n\nvar _ContentTypeRadioGroup = _interopRequireDefault(require(\"../ContentTypeRadioGroup\"));\n\nvar _ComponentIconPicker = _interopRequireDefault(require(\"../ComponentIconPicker\"));\n\nvar _Relation = _interopRequireDefault(require(\"../Relation\"));\n\nvar _PluralName = _interopRequireDefault(require(\"../PluralName\"));\n\nvar _SelectCategory = _interopRequireDefault(require(\"../SelectCategory\"));\n\nvar _SelectComponent = _interopRequireDefault(require(\"../SelectComponent\"));\n\nvar _SelectComponents = _interopRequireDefault(require(\"../SelectComponents\"));\n\nvar _SelectDateType = _interopRequireDefault(require(\"../SelectDateType\"));\n\nvar _SelectNumber = _interopRequireDefault(require(\"../SelectNumber\"));\n\nvar _SingularName = _interopRequireDefault(require(\"../SingularName\"));\n\nvar _TabForm = _interopRequireDefault(require(\"../TabForm\"));\n\nvar _TextareaEnum = _interopRequireDefault(require(\"../TextareaEnum\"));\n\nvar _findAttribute = _interopRequireDefault(require(\"../../utils/findAttribute\"));\n\nvar _utils = require(\"../../utils\");\n\nvar _utils2 = require(\"./utils\");\n\nvar _forms = _interopRequireDefault(require(\"./forms\"));\n\nvar _createUid = require(\"./utils/createUid\");\n\nvar _selectors = _interopRequireDefault(require(\"./selectors\"));\n\nvar _constants = require(\"./constants\");\n\nvar _excluded = [\"name\", \"value\", \"type\"],\n    _excluded2 = [\"category\"],\n    _excluded3 = [\"category\", \"type\"],\n    _excluded4 = [\"category\", \"type\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n/* eslint-disable indent */\n\n/* eslint-disable react/no-array-index-key */\nvar FormModal = function FormModal() {\n  var _useFormModalNavigati = (0, _useFormModalNavigation[\"default\"])(),\n      onCloseModal = _useFormModalNavigati.onCloseModal,\n      onNavigateToChooseAttributeModal = _useFormModalNavigati.onNavigateToChooseAttributeModal,\n      onNavigateToAddCompoToDZModal = _useFormModalNavigati.onNavigateToAddCompoToDZModal,\n      onNavigateToCreateComponentStep2 = _useFormModalNavigati.onNavigateToCreateComponentStep2,\n      actionType = _useFormModalNavigati.actionType,\n      attributeName = _useFormModalNavigati.attributeName,\n      attributeType = _useFormModalNavigati.attributeType,\n      categoryName = _useFormModalNavigati.categoryName,\n      dynamicZoneTarget = _useFormModalNavigati.dynamicZoneTarget,\n      forTarget = _useFormModalNavigati.forTarget,\n      modalType = _useFormModalNavigati.modalType,\n      isOpen = _useFormModalNavigati.isOpen,\n      kind = _useFormModalNavigati.kind,\n      step = _useFormModalNavigati.step,\n      targetUid = _useFormModalNavigati.targetUid;\n\n  var tabGroupRef = (0, _react.useRef)();\n  var formModalSelector = (0, _react.useMemo)(_selectors[\"default\"], []);\n  var dispatch = (0, _reactRedux.useDispatch)();\n  var toggleNotification = (0, _helperPlugin.useNotification)();\n  var reducerState = (0, _reactRedux.useSelector)(function (state) {\n    return formModalSelector(state);\n  }, _reactRedux.shallowEqual);\n\n  var _useHistory = (0, _reactRouterDom.useHistory)(),\n      push = _useHistory.push;\n\n  var _useTracking = (0, _helperPlugin.useTracking)(),\n      trackUsage = _useTracking.trackUsage;\n\n  var _useIntl = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl.formatMessage;\n\n  var _useStrapiApp = (0, _helperPlugin.useStrapiApp)(),\n      getPlugin = _useStrapiApp.getPlugin;\n\n  var ctbPlugin = getPlugin(_pluginId[\"default\"]);\n  var ctbFormsAPI = ctbPlugin.apis.forms;\n  var inputsFromPlugins = ctbFormsAPI.components.inputs;\n\n  var _useDataManager = (0, _useDataManager2[\"default\"])(),\n      addAttribute = _useDataManager.addAttribute,\n      addCreatedComponentToDynamicZone = _useDataManager.addCreatedComponentToDynamicZone,\n      allComponentsCategories = _useDataManager.allComponentsCategories,\n      changeDynamicZoneComponents = _useDataManager.changeDynamicZoneComponents,\n      contentTypes = _useDataManager.contentTypes,\n      components = _useDataManager.components,\n      createSchema = _useDataManager.createSchema,\n      deleteCategory = _useDataManager.deleteCategory,\n      deleteData = _useDataManager.deleteData,\n      editCategory = _useDataManager.editCategory,\n      submitData = _useDataManager.submitData,\n      allDataSchema = _useDataManager.modifiedData,\n      nestedComponents = _useDataManager.nestedComponents,\n      setModifiedData = _useDataManager.setModifiedData,\n      sortedContentTypesList = _useDataManager.sortedContentTypesList,\n      updateSchema = _useDataManager.updateSchema,\n      reservedNames = _useDataManager.reservedNames;\n\n  var componentToCreate = reducerState.componentToCreate,\n      formErrors = reducerState.formErrors,\n      initialData = reducerState.initialData,\n      isCreatingComponentWhileAddingAField = reducerState.isCreatingComponentWhileAddingAField,\n      modifiedData = reducerState.modifiedData;\n  var pathToSchema = forTarget === 'contentType' || forTarget === 'component' ? [forTarget] : [forTarget, targetUid];\n  (0, _react.useEffect)(function () {\n    if (isOpen) {\n      var collectionTypesForRelation = sortedContentTypesList.filter(_utils.isAllowedContentTypesForRelations); // Reset all the modification when opening the edit category modal\n\n      if (modalType === 'editCategory') {\n        setModifiedData();\n      }\n\n      if (actionType === 'edit' && modalType === 'attribute' && forTarget === 'contentType') {\n        trackUsage('willEditFieldOfContentType');\n      }\n\n      var pathToAttributes = [].concat(pathToSchema, ['schema', 'attributes']); // Case:\n      // the user opens the modal chooseAttributes\n      // selects dynamic zone => set the field name\n      // then goes to step 1 (the modal is addComponentToDynamicZone) and finally reloads the app.\n      // In this particular if the user tries to add components to the zone it will pop an error since the dz is unknown\n\n      var foundDynamicZoneTarget = (0, _findAttribute[\"default\"])((0, _get2[\"default\"])(allDataSchema, pathToAttributes, []), dynamicZoneTarget) || null; // Edit category\n\n      if (modalType === 'editCategory' && actionType === 'edit') {\n        dispatch({\n          type: _constants.SET_DATA_TO_EDIT,\n          modalType: modalType,\n          actionType: actionType,\n          data: {\n            name: categoryName\n          }\n        });\n      } // Create content type we need to add the default option draftAndPublish\n\n\n      if (modalType === 'contentType' && actionType === 'create') {\n        dispatch({\n          type: _constants.SET_DATA_TO_EDIT,\n          modalType: modalType,\n          actionType: actionType,\n          data: {\n            draftAndPublish: true\n          },\n          pluginOptions: {}\n        });\n      } // Edit content type\n\n\n      if (modalType === 'contentType' && actionType === 'edit') {\n        var _get = (0, _get2[\"default\"])(allDataSchema, [].concat(pathToSchema, ['schema']), {\n          displayName: null,\n          pluginOptions: {},\n          singularName: null,\n          pluralName: null\n        }),\n            displayName = _get.displayName,\n            draftAndPublish = _get.draftAndPublish,\n            _kind = _get.kind,\n            pluginOptions = _get.pluginOptions,\n            pluralName = _get.pluralName,\n            singularName = _get.singularName;\n\n        dispatch({\n          type: _constants.SET_DATA_TO_EDIT,\n          actionType: actionType,\n          modalType: modalType,\n          data: {\n            displayName: displayName,\n            draftAndPublish: draftAndPublish,\n            kind: _kind,\n            pluginOptions: pluginOptions,\n            pluralName: pluralName,\n            singularName: singularName\n          }\n        });\n      } // Edit component\n\n\n      if (modalType === 'component' && actionType === 'edit') {\n        var data = (0, _get2[\"default\"])(allDataSchema, pathToSchema, {});\n        dispatch({\n          type: _constants.SET_DATA_TO_EDIT,\n          actionType: actionType,\n          modalType: modalType,\n          data: {\n            displayName: data.schema.displayName,\n            category: data.category,\n            icon: data.schema.icon\n          }\n        });\n      } // Special case for the dynamic zone\n\n\n      if (modalType === 'addComponentToDynamicZone' && actionType === 'edit') {\n        var attributeToEdit = _objectSpread(_objectSpread({}, foundDynamicZoneTarget), {}, {\n          // We filter the available components\n          // Because this modal is only used for adding components\n          components: [],\n          name: dynamicZoneTarget,\n          createComponent: false,\n          componentToCreate: {\n            type: 'component'\n          }\n        });\n\n        dispatch({\n          type: _constants.SET_DYNAMIC_ZONE_DATA_SCHEMA,\n          attributeToEdit: attributeToEdit\n        });\n      } // Set the predefined data structure to create an attribute\n\n\n      if (attributeType) {\n        var attributeToEditNotFormatted = (0, _findAttribute[\"default\"])((0, _get2[\"default\"])(allDataSchema, pathToAttributes, []), attributeName);\n\n        var _attributeToEdit = _objectSpread(_objectSpread({}, attributeToEditNotFormatted), {}, {\n          name: attributeName\n        }); // We need to set the repeatable key to false when editing a component\n        // The API doesn't send this info\n\n\n        if (attributeType === 'component' && actionType === 'edit') {\n          if (!_attributeToEdit.repeatable) {\n            (0, _set[\"default\"])(_attributeToEdit, 'repeatable', false);\n          }\n        }\n\n        dispatch({\n          type: _constants.SET_ATTRIBUTE_DATA_SCHEMA,\n          attributeType: attributeType,\n          nameToSetForRelation: (0, _get2[\"default\"])(collectionTypesForRelation, ['0', 'title'], 'error'),\n          targetUid: (0, _get2[\"default\"])(collectionTypesForRelation, ['0', 'uid'], 'error'),\n          isEditing: actionType === 'edit',\n          modifiedDataToSetForEditing: _attributeToEdit,\n          step: step,\n          forTarget: forTarget\n        });\n      }\n    } else {\n      dispatch({\n        type: _constants.RESET_PROPS\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [actionType, attributeName, attributeType, categoryName, dynamicZoneTarget, forTarget, isOpen, modalType]); // FIXME rename this constant\n\n  var isCreatingContentType = modalType === 'contentType';\n  var isCreatingComponent = modalType === 'component';\n  var isCreatingAttribute = modalType === 'attribute';\n  var isComponentAttribute = attributeType === 'component' && isCreatingAttribute;\n  var isCreating = actionType === 'create';\n  var isCreatingComponentFromAView = (0, _get2[\"default\"])(modifiedData, 'createComponent', false) || isCreatingComponentWhileAddingAField;\n  var isInFirstComponentStep = step === '1';\n  var isEditingCategory = modalType === 'editCategory';\n  var isPickingAttribute = modalType === 'chooseAttribute';\n  var uid = (0, _createUid.createUid)(modifiedData.displayName || '');\n  var attributes = (0, _get2[\"default\"])(allDataSchema, [].concat(pathToSchema, ['schema', 'attributes']), null);\n\n  var checkFormValidity = /*#__PURE__*/function () {\n    var _ref = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n      var schema, dataToValidate, type, alreadyTakenTargetContentTypeAttributes, targetContentTypeUID, targetContentTypeAttributes;\n      return _regenerator[\"default\"].wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dataToValidate = isCreatingComponentFromAView && step === '1' ? (0, _get2[\"default\"])(modifiedData, 'componentToCreate', {}) : modifiedData; // Check form validity for content type\n\n              if (!isCreatingContentType) {\n                _context.next = 5;\n                break;\n              }\n\n              schema = _forms[\"default\"].contentType.schema(Object.keys(contentTypes), actionType === 'edit', // currentUID\n              (0, _get2[\"default\"])(allDataSchema, [].concat(pathToSchema, ['uid']), null), reservedNames, ctbFormsAPI, contentTypes); // Check form validity for component\n              // This is happening when the user click on the link from the left menu\n\n              _context.next = 29;\n              break;\n\n            case 5:\n              if (!isCreatingComponent) {\n                _context.next = 9;\n                break;\n              }\n\n              schema = _forms[\"default\"].component.schema(Object.keys(components), modifiedData.category || '', reservedNames, actionType === 'edit', (0, _get2[\"default\"])(allDataSchema, [].concat(pathToSchema, ['uid']), null), ctbFormsAPI); // Check for validity for creating a component\n              // This is happening when the user creates a component \"on the fly\"\n              // Since we temporarily store the component info in another object\n              // The data is set in the componentToCreate key\n\n              _context.next = 29;\n              break;\n\n            case 9:\n              if (!(isComponentAttribute && isCreatingComponentFromAView && isInFirstComponentStep)) {\n                _context.next = 13;\n                break;\n              }\n\n              schema = _forms[\"default\"].component.schema(Object.keys(components), (0, _get2[\"default\"])(modifiedData, 'componentToCreate.category', ''), reservedNames, ctbFormsAPI); // Check form validity for creating a 'common attribute'\n              // We need to make sure that it is independent from the step\n\n              _context.next = 29;\n              break;\n\n            case 13:\n              if (!(isCreatingAttribute && !isInFirstComponentStep)) {\n                _context.next = 20;\n                break;\n              }\n\n              type = attributeType === 'relation' ? 'relation' : modifiedData.type;\n              alreadyTakenTargetContentTypeAttributes = [];\n\n              if (type === 'relation') {\n                targetContentTypeUID = (0, _get2[\"default\"])(modifiedData, ['target'], null);\n                targetContentTypeAttributes = (0, _get2[\"default\"])(contentTypes, [targetContentTypeUID, 'schema', 'attributes'], []); // Create an array with all the targetContentType attributes name\n                // in order to prevent the user from creating a relation with a targetAttribute\n                // that may exist in the other content type\n\n                alreadyTakenTargetContentTypeAttributes = targetContentTypeAttributes.filter(function (_ref2) {\n                  var attrName = _ref2.name;\n\n                  // Keep all the target content type attributes when creating a relation\n                  if (actionType !== 'edit') {\n                    return true;\n                  } // Remove the already created one when editing\n\n\n                  return attrName !== initialData.targetAttribute;\n                });\n              }\n\n              schema = _forms[\"default\"].attribute.schema((0, _get2[\"default\"])(allDataSchema, pathToSchema, {}), type, reservedNames, alreadyTakenTargetContentTypeAttributes, {\n                modifiedData: modifiedData,\n                initialData: initialData\n              }, ctbFormsAPI);\n              _context.next = 29;\n              break;\n\n            case 20:\n              if (!isEditingCategory) {\n                _context.next = 24;\n                break;\n              }\n\n              schema = _forms[\"default\"].editCategory.schema(allComponentsCategories, initialData, ctbFormsAPI);\n              _context.next = 29;\n              break;\n\n            case 24:\n              if (!(isInFirstComponentStep && isCreatingComponentFromAView)) {\n                _context.next = 28;\n                break;\n              }\n\n              schema = _forms[\"default\"].component.schema(Object.keys(components), (0, _get2[\"default\"])(modifiedData, 'componentToCreate.category', ''), reservedNames, ctbFormsAPI);\n              _context.next = 29;\n              break;\n\n            case 28:\n              return _context.abrupt(\"return\");\n\n            case 29:\n              _context.next = 31;\n              return schema.validate(dataToValidate, {\n                abortEarly: false\n              });\n\n            case 31:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function checkFormValidity() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleChange = (0, _react.useCallback)(function (_ref3) {\n    var _ref3$target = _ref3.target,\n        name = _ref3$target.name,\n        value = _ref3$target.value,\n        type = _ref3$target.type,\n        rest = (0, _objectWithoutProperties2[\"default\"])(_ref3$target, _excluded);\n    var namesThatCanResetToNullValue = ['enumName', 'max', 'min', 'maxLength', 'minLength', 'regex', 'default'];\n    var val;\n\n    if (namesThatCanResetToNullValue.includes(name) && value === '') {\n      val = null;\n    } else {\n      val = value;\n    }\n\n    var clonedErrors = Object.assign({}, formErrors); // Reset min error when modifying the max\n\n    if (name === 'max') {\n      delete clonedErrors.min;\n    } // Same here\n\n\n    if (name === 'maxLength') {\n      delete clonedErrors.minLength;\n    } // Since the onBlur is deactivated we remove the errors directly when changing an input\n\n\n    delete clonedErrors[name];\n    dispatch({\n      type: _constants.SET_ERRORS,\n      errors: clonedErrors\n    });\n    dispatch(_objectSpread({\n      type: _constants.ON_CHANGE,\n      keys: name.split('.'),\n      value: val\n    }, rest));\n  }, [dispatch, formErrors]);\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref4 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2(e) {\n      var shouldContinue,\n          ctTargetUid,\n          componentUid,\n          category,\n          rest,\n          isDynamicZoneAttribute,\n          _category,\n          type,\n          _rest,\n          _componentUid,\n          _modifiedData$compone,\n          _category2,\n          _type,\n          _rest2,\n          _componentUid2,\n          errors,\n          _args2 = arguments;\n\n      return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              shouldContinue = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : isCreating;\n              e.preventDefault();\n              _context2.prev = 2;\n              _context2.next = 5;\n              return checkFormValidity();\n\n            case 5:\n              sendButtonAddMoreFieldEvent(shouldContinue);\n              ctTargetUid = forTarget === 'components' ? targetUid : uid;\n\n              if (!isCreatingContentType) {\n                _context2.next = 18;\n                break;\n              }\n\n              if (!isCreating) {\n                _context2.next = 14;\n                break;\n              }\n\n              createSchema(_objectSpread(_objectSpread({}, modifiedData), {}, {\n                kind: kind\n              }), modalType, uid); // Redirect the user to the created content type\n\n              push({\n                pathname: \"/plugins/\".concat(_pluginId[\"default\"], \"/content-types/\").concat(uid)\n              }); // Navigate to the choose attribute modal\n\n              onNavigateToChooseAttributeModal({\n                forTarget: forTarget,\n                targetUid: ctTargetUid\n              });\n              _context2.next = 16;\n              break;\n\n            case 14:\n              // We cannot switch from collection type to single when the modal is making relations other than oneWay or manyWay\n              if ((0, _utils2.canEditContentType)(allDataSchema, modifiedData)) {\n                onCloseModal();\n                submitData(modifiedData);\n              } else {\n                toggleNotification({\n                  type: 'warning',\n                  message: {\n                    id: 'notification.contentType.relations.conflict'\n                  }\n                });\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 16:\n              _context2.next = 75;\n              break;\n\n            case 18:\n              if (!(modalType === 'component')) {\n                _context2.next = 32;\n                break;\n              }\n\n              if (!isCreating) {\n                _context2.next = 27;\n                break;\n              }\n\n              // Create the component schema\n              componentUid = (0, _createUid.createComponentUid)(modifiedData.displayName, modifiedData.category);\n              category = modifiedData.category, rest = (0, _objectWithoutProperties2[\"default\"])(modifiedData, _excluded2);\n              createSchema(rest, 'component', componentUid, category); // Redirect the user to the created component\n\n              push({\n                pathname: \"/plugins/\".concat(_pluginId[\"default\"], \"/component-categories/\").concat(category, \"/\").concat(componentUid)\n              }); // Navigate to the choose attribute modal\n\n              onNavigateToChooseAttributeModal({\n                forTarget: forTarget,\n                targetUid: componentUid\n              });\n              _context2.next = 30;\n              break;\n\n            case 27:\n              updateSchema(modifiedData, modalType, targetUid); // Close the modal\n\n              onCloseModal();\n              return _context2.abrupt(\"return\");\n\n            case 30:\n              _context2.next = 75;\n              break;\n\n            case 32:\n              if (!isEditingCategory) {\n                _context2.next = 40;\n                break;\n              }\n\n              if (!((0, _toLower[\"default\"])(initialData.name) === (0, _toLower[\"default\"])(modifiedData.name))) {\n                _context2.next = 36;\n                break;\n              }\n\n              // Close the modal\n              onCloseModal();\n              return _context2.abrupt(\"return\");\n\n            case 36:\n              editCategory(initialData.name, modifiedData);\n              return _context2.abrupt(\"return\");\n\n            case 40:\n              if (!(isCreatingAttribute && !isCreatingComponentFromAView)) {\n                _context2.next = 58;\n                break;\n              }\n\n              isDynamicZoneAttribute = attributeType === 'dynamiczone'; // The user is creating a DZ (he had entered the name of the dz)\n\n              if (!isDynamicZoneAttribute) {\n                _context2.next = 46;\n                break;\n              }\n\n              addAttribute(modifiedData, forTarget, targetUid, actionType === 'edit', initialData); // Adding a component to a dynamiczone is not the same logic as creating a simple field\n              // so the search is different\n\n              if (isCreating) {\n                // Step 1 of adding a component to a DZ, the user has the option to create a component\n                dispatch({\n                  type: _constants.RESET_PROPS_AND_SET_THE_FORM_FOR_ADDING_A_COMPO_TO_A_DZ\n                });\n\n                tabGroupRef.current._handlers.setSelectedTabIndex(0);\n\n                onNavigateToAddCompoToDZModal({\n                  dynamicZoneTarget: modifiedData.name\n                });\n              } else {\n                onCloseModal();\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 46:\n              if (isComponentAttribute) {\n                _context2.next = 50;\n                break;\n              }\n\n              addAttribute(modifiedData, forTarget, targetUid, actionType === 'edit', initialData);\n\n              if (shouldContinue) {\n                onNavigateToChooseAttributeModal({\n                  forTarget: forTarget,\n                  targetUid: ctTargetUid\n                });\n              } else {\n                onCloseModal();\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 50:\n              if (!isInFirstComponentStep) {\n                _context2.next = 54;\n                break;\n              }\n\n              // Navigate the user to step 2\n              onNavigateToCreateComponentStep2(); // Clear the reducer and prepare the modified data\n              // This way we don't have to add some logic to re-run the useEffect\n              // The first step is either needed to create a component or just to navigate\n              // To the modal for adding a \"common field\"\n\n              dispatch({\n                type: _constants.RESET_PROPS_AND_SET_FORM_FOR_ADDING_AN_EXISTING_COMPO,\n                forTarget: forTarget\n              }); // We don't want all the props to be reset\n\n              return _context2.abrupt(\"return\");\n\n            case 54:\n              addAttribute(modifiedData, forTarget, targetUid, // This change the dispatched type\n              // either 'EDIT_ATTRIBUTE' or 'ADD_ATTRIBUTE' in the DataManagerProvider\n              actionType === 'edit', // This is for the edit part\n              initialData, // Passing true will add the component to the components object\n              // This way we can add fields to the added component (if it wasn't there already)\n              true);\n\n              if (shouldContinue) {\n                onNavigateToChooseAttributeModal({\n                  forTarget: forTarget,\n                  targetUid: targetUid\n                });\n              } else {\n                onCloseModal();\n              } // We don't need to end the loop here we want the reducer to be reinitialised\n              // Logic for creating a component without clicking on the link in\n              // the left menu\n              // We need to separate the logic otherwise the component would be created\n              // even though the user didn't set any field\n              // We need to prevent the component from being created if the user closes the modal at step 2 without any submission\n\n\n              _context2.next = 75;\n              break;\n\n            case 58:\n              if (!(isCreatingAttribute && isCreatingComponentFromAView)) {\n                _context2.next = 73;\n                break;\n              }\n\n              if (!isInFirstComponentStep) {\n                _context2.next = 64;\n                break;\n              }\n\n              // Here the search could be refactored since it is the same as the case from above\n              // Navigate the user to step 2\n              trackUsage('willCreateComponentFromAttributesModal'); // Here we clear the reducer state but we also keep the created component\n              // If we were to create the component before\n\n              dispatch({\n                type: _constants.RESET_PROPS_AND_SAVE_CURRENT_DATA,\n                forTarget: forTarget\n              });\n              onNavigateToCreateComponentStep2(); // Terminate because we don't want the reducer to be entirely reset\n\n              return _context2.abrupt(\"return\");\n\n            case 64:\n              // We are destructuring because the modifiedData object doesn't have the appropriate format to create a field\n              _category = componentToCreate.category, type = componentToCreate.type, _rest = (0, _objectWithoutProperties2[\"default\"])(componentToCreate, _excluded3); // Create a the component temp UID\n              // This could be refactored but I think it's more understandable to separate the logic\n\n              _componentUid = (0, _createUid.createComponentUid)(componentToCreate.displayName, _category); // Create the component first and add it to the components data\n\n              createSchema( // Component data\n              _rest, // Type will always be component\n              // It will dispatch the CREATE_COMPONENT_SCHEMA action\n              // So the component will be added in the main components object\n              // This might not be needed if we don't allow navigation between entries while editing\n              type, _componentUid, _category, // This will add the created component in the datamanager modifiedData components key\n              // Like explained above we will be able to modify the created component structure\n              isCreatingComponentFromAView); // Add the field to the schema\n\n              addAttribute(modifiedData, forTarget, targetUid, false);\n              dispatch({\n                type: _constants.RESET_PROPS\n              }); // Open modal attribute for adding attr to component\n\n              if (shouldContinue) {\n                onNavigateToChooseAttributeModal({\n                  forTarget: 'components',\n                  targetUid: _componentUid\n                });\n              } else {\n                onCloseModal();\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 73:\n              // The modal is addComponentToDynamicZone\n              if (isInFirstComponentStep) {\n                if (isCreatingComponentFromAView) {\n                  _modifiedData$compone = modifiedData.componentToCreate, _category2 = _modifiedData$compone.category, _type = _modifiedData$compone.type, _rest2 = (0, _objectWithoutProperties2[\"default\"])(_modifiedData$compone, _excluded4);\n                  _componentUid2 = (0, _createUid.createComponentUid)(modifiedData.componentToCreate.displayName, _category2); // Create the component first and add it to the components data\n\n                  createSchema( // Component data\n                  _rest2, // Type will always be component\n                  // It will dispatch the CREATE_COMPONENT_SCHEMA action\n                  // So the component will be added in the main components object\n                  // This might not be needed if we don't allow navigation between entries while editing\n                  _type, _componentUid2, _category2, // This will add the created component in the datamanager modifiedData components key\n                  // Like explained above we will be able to modify the created component structure\n                  isCreatingComponentFromAView); // Add the created component to the DZ\n                  // We don't want to remove the old ones\n\n                  addCreatedComponentToDynamicZone(dynamicZoneTarget, [_componentUid2]); // The Dynamic Zone and the component is created\n                  // Open the modal to add fields to the created component\n\n                  onNavigateToChooseAttributeModal({\n                    forTarget: 'components',\n                    targetUid: _componentUid2\n                  });\n                } else {\n                  // Add the components to the DZ\n                  changeDynamicZoneComponents(dynamicZoneTarget, modifiedData.components);\n                  onCloseModal();\n                }\n              } else {\n                console.error('This case is not handled');\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 75:\n              dispatch({\n                type: _constants.RESET_PROPS\n              });\n              _context2.next = 83;\n              break;\n\n            case 78:\n              _context2.prev = 78;\n              _context2.t0 = _context2[\"catch\"](2);\n              errors = (0, _helperPlugin.getYupInnerErrors)(_context2.t0);\n              console.log({\n                err: _context2.t0,\n                errors: errors\n              });\n              dispatch({\n                type: _constants.SET_ERRORS,\n                errors: errors\n              });\n\n            case 83:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[2, 78]]);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var handleClosed = function handleClosed() {\n    // Close the modal\n    onCloseModal(); // Reset the reducer\n\n    dispatch({\n      type: _constants.RESET_PROPS\n    });\n  };\n\n  var sendAdvancedTabEvent = function sendAdvancedTabEvent(tab) {\n    if (tab !== 'advanced') {\n      return;\n    }\n\n    if (isCreatingContentType) {\n      trackUsage('didSelectContentTypeSettings');\n      return;\n    }\n\n    if (forTarget === 'contentType') {\n      trackUsage('didSelectContentTypeFieldSettings');\n    }\n  };\n\n  var sendButtonAddMoreFieldEvent = function sendButtonAddMoreFieldEvent(shouldContinue) {\n    if (modalType === 'attribute' && forTarget === 'contentType' && attributeType !== 'dynamiczone' && shouldContinue) {\n      trackUsage('willAddMoreFieldToContentType');\n    }\n  };\n\n  var shouldDisableAdvancedTab = function shouldDisableAdvancedTab() {\n    if (modalType === 'editCategory') {\n      return true;\n    }\n\n    if (modalType === 'component') {\n      return true;\n    }\n\n    if ((0, _has[\"default\"])(modifiedData, 'createComponent')) {\n      return true;\n    }\n\n    return false;\n  }; // Display data for the attributes picker modal\n\n\n  var displayedAttributes = (0, _utils2.getAttributesToDisplay)(forTarget, targetUid, // We need the nested components so we know when to remove the component option\n  nestedComponents);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  if (!modalType) {\n    return null;\n  }\n\n  var formToDisplay = (0, _get2[\"default\"])(_forms[\"default\"], [modalType, 'form'], {\n    advanced: function advanced() {\n      return {\n        sections: []\n      };\n    },\n    base: function base() {\n      return {\n        sections: []\n      };\n    }\n  });\n  var isAddingAComponentToAnotherComponent = forTarget === 'components' || forTarget === 'component';\n  var genericInputProps = {\n    customInputs: _objectSpread({\n      'allowed-types-select': _AllowedTypesSelect[\"default\"],\n      'boolean-radio-group': _BooleanRadioGroup[\"default\"],\n      'checkbox-with-number-field': _CheckboxWithNumberField[\"default\"],\n      'component-icon-picker': _ComponentIconPicker[\"default\"],\n      'content-type-radio-group': _ContentTypeRadioGroup[\"default\"],\n      'radio-group': _CustomRadioGroup[\"default\"],\n      relation: _Relation[\"default\"],\n      'select-category': _SelectCategory[\"default\"],\n      'select-component': _SelectComponent[\"default\"],\n      'select-components': _SelectComponents[\"default\"],\n      'select-default-boolean': _BooleanDefaultValueSelect[\"default\"],\n      'select-number': _SelectNumber[\"default\"],\n      'select-date': _SelectDateType[\"default\"],\n      'toggle-draft-publish': _DraftAndPublishToggle[\"default\"],\n      'text-plural': _PluralName[\"default\"],\n      'text-singular': _SingularName[\"default\"],\n      'textarea-enum': _TextareaEnum[\"default\"]\n    }, inputsFromPlugins),\n    componentToCreate: componentToCreate,\n    dynamicZoneTarget: dynamicZoneTarget,\n    formErrors: formErrors,\n    isAddingAComponentToAnotherComponent: isAddingAComponentToAnotherComponent,\n    isCreatingComponentWhileAddingAField: isCreatingComponentWhileAddingAField,\n    mainBoxHeader: (0, _get2[\"default\"])(allDataSchema, [].concat(pathToSchema, ['schema', 'displayName']), ''),\n    modifiedData: modifiedData,\n    naturePickerType: forTarget,\n    isCreating: isCreating,\n    targetUid: targetUid,\n    forTarget: forTarget\n  };\n  var advancedForm = formToDisplay.advanced({\n    data: modifiedData,\n    type: attributeType,\n    step: step,\n    actionType: actionType,\n    attributes: attributes,\n    extensions: ctbFormsAPI,\n    forTarget: forTarget,\n    contentTypeSchema: allDataSchema.contentType || {}\n  }).sections;\n  var baseForm = formToDisplay.base({\n    data: modifiedData,\n    type: attributeType,\n    step: step,\n    actionType: actionType,\n    attributes: attributes,\n    extensions: ctbFormsAPI,\n    forTarget: forTarget,\n    contentTypeSchema: allDataSchema.contentType || {}\n  }).sections;\n  var baseFormInputNames = (0, _utils2.getFormInputNames)(baseForm);\n  var advancedFormInputNames = (0, _utils2.getFormInputNames)(advancedForm);\n  var doesBaseFormHasError = Object.keys(formErrors).some(function (key) {\n    return baseFormInputNames.includes(key);\n  });\n  var doesAdvancedFormHasError = Object.keys(formErrors).some(function (key) {\n    return advancedFormInputNames.includes(key);\n  });\n  var schemaKind = (0, _get2[\"default\"])(contentTypes, [targetUid, 'schema', 'kind']);\n  return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, /*#__PURE__*/_react[\"default\"].createElement(_ModalLayout.ModalLayout, {\n    onClose: handleClosed,\n    labelledBy: \"title\"\n  }, /*#__PURE__*/_react[\"default\"].createElement(_FormModalHeader[\"default\"], {\n    actionType: actionType,\n    attributeName: attributeName,\n    categoryName: categoryName,\n    contentTypeKind: kind,\n    dynamicZoneTarget: dynamicZoneTarget,\n    modalType: modalType,\n    forTarget: forTarget,\n    targetUid: targetUid,\n    attributeType: attributeType\n  }), isPickingAttribute && /*#__PURE__*/_react[\"default\"].createElement(_AttributeOptions[\"default\"], {\n    attributes: displayedAttributes,\n    forTarget: forTarget,\n    kind: schemaKind || 'collectionType'\n  }), !isPickingAttribute && /*#__PURE__*/_react[\"default\"].createElement(\"form\", {\n    onSubmit: handleSubmit\n  }, /*#__PURE__*/_react[\"default\"].createElement(_ModalLayout.ModalBody, null, /*#__PURE__*/_react[\"default\"].createElement(_Tabs.TabGroup, {\n    label: \"todo\",\n    id: \"tabs\",\n    variant: \"simple\",\n    ref: tabGroupRef,\n    onTabChange: function onTabChange(selectedTab) {\n      if (selectedTab === 1) {\n        sendAdvancedTabEvent('advanced');\n      }\n    }\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Flex.Flex, {\n    justifyContent: \"space-between\"\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Typography.Typography, {\n    as: \"h2\",\n    variant: \"beta\"\n  }, formatMessage({\n    id: (0, _utils2.getModalTitleSubHeader)({\n      actionType: actionType,\n      forTarget: forTarget,\n      kind: kind,\n      step: step,\n      modalType: modalType\n    }),\n    defaultMessage: 'Add new field'\n  }, {\n    type: (0, _upperFirst[\"default\"])(formatMessage({\n      id: (0, _utils.getTrad)(\"attribute.\".concat(attributeType))\n    })),\n    name: (0, _upperFirst[\"default\"])(attributeName),\n    step: step\n  })), /*#__PURE__*/_react[\"default\"].createElement(_Tabs.Tabs, null, /*#__PURE__*/_react[\"default\"].createElement(_Tabs.Tab, {\n    hasError: doesBaseFormHasError\n  }, formatMessage({\n    id: (0, _utils.getTrad)('popUpForm.navContainer.base'),\n    defaultMessage: 'Base settings'\n  })), /*#__PURE__*/_react[\"default\"].createElement(_Tabs.Tab, {\n    hasError: doesAdvancedFormHasError // TODO put aria-disabled\n    ,\n    disabled: shouldDisableAdvancedTab()\n  }, formatMessage({\n    id: (0, _utils.getTrad)('popUpForm.navContainer.advanced'),\n    defaultMessage: 'Advanced settings'\n  })))), /*#__PURE__*/_react[\"default\"].createElement(_Divider.Divider, null), /*#__PURE__*/_react[\"default\"].createElement(_Box.Box, {\n    paddingTop: 6\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Tabs.TabPanels, null, /*#__PURE__*/_react[\"default\"].createElement(_Tabs.TabPanel, null, /*#__PURE__*/_react[\"default\"].createElement(_Stack.Stack, {\n    spacing: 6\n  }, /*#__PURE__*/_react[\"default\"].createElement(_TabForm[\"default\"], {\n    form: baseForm,\n    formErrors: formErrors,\n    genericInputProps: genericInputProps,\n    modifiedData: modifiedData,\n    onChange: handleChange\n  }))), /*#__PURE__*/_react[\"default\"].createElement(_Tabs.TabPanel, null, /*#__PURE__*/_react[\"default\"].createElement(_Stack.Stack, {\n    spacing: 6\n  }, /*#__PURE__*/_react[\"default\"].createElement(_TabForm[\"default\"], {\n    form: advancedForm,\n    formErrors: formErrors,\n    genericInputProps: genericInputProps,\n    modifiedData: modifiedData,\n    onChange: handleChange\n  }))))))), /*#__PURE__*/_react[\"default\"].createElement(_ModalLayout.ModalFooter, {\n    endActions: /*#__PURE__*/_react[\"default\"].createElement(_FormModalEndActions[\"default\"], {\n      deleteCategory: deleteCategory,\n      deleteContentType: deleteData,\n      deleteComponent: deleteData,\n      categoryName: initialData.name,\n      isAttributeModal: modalType === 'attribute',\n      isComponentToDzModal: modalType === 'addComponentToDynamicZone',\n      isComponentAttribute: attributeType === 'component',\n      isComponentModal: modalType === 'component',\n      isContentTypeModal: modalType === 'contentType',\n      isCreatingComponent: actionType === 'create',\n      isCreatingDz: actionType === 'create',\n      isCreatingComponentAttribute: modifiedData.createComponent || false,\n      isCreatingComponentInDz: modifiedData.createComponent || false,\n      isCreatingComponentWhileAddingAField: isCreatingComponentWhileAddingAField,\n      isCreatingContentType: actionType === 'create',\n      isEditingAttribute: actionType === 'edit',\n      isDzAttribute: attributeType === 'dynamiczone',\n      isEditingCategory: modalType === 'editCategory',\n      isInFirstComponentStep: step === '1',\n      onSubmitAddComponentAttribute: handleSubmit,\n      onSubmitAddComponentToDz: handleSubmit,\n      onSubmitCreateComponent: handleSubmit,\n      onSubmitCreateContentType: handleSubmit,\n      onSubmitCreateDz: handleSubmit,\n      onSubmitEditAttribute: handleSubmit,\n      onSubmitEditCategory: handleSubmit,\n      onSubmitEditComponent: handleSubmit,\n      onSubmitEditContentType: handleSubmit,\n      onSubmitEditDz: handleSubmit\n    }),\n    startActions: /*#__PURE__*/_react[\"default\"].createElement(_Button.Button, {\n      variant: \"tertiary\",\n      onClick: handleClosed\n    }, formatMessage({\n      id: 'app.components.Button.cancel',\n      defaultMessage: 'Cancel'\n    }))\n  }))));\n};\n\nvar _default = FormModal;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}