{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar Plugin = /*#__PURE__*/function () {\n  function Plugin(pluginConf) {\n    (0, _classCallCheck2[\"default\"])(this, Plugin);\n    this.apis = pluginConf.apis || {};\n    this.initializer = pluginConf.initializer || null;\n    this.injectionZones = pluginConf.injectionZones || {};\n    this.isReady = pluginConf.isReady !== undefined ? pluginConf.isReady : true;\n    this.name = pluginConf.name;\n    this.pluginId = pluginConf.id;\n  }\n\n  (0, _createClass2[\"default\"])(Plugin, [{\n    key: \"getInjectedComponents\",\n    value: function getInjectedComponents(containerName, blockName) {\n      try {\n        return this.injectionZones[containerName][blockName] || {};\n      } catch (err) {\n        console.error('Cannot get injected component', err);\n        return err;\n      }\n    }\n  }, {\n    key: \"injectComponent\",\n    value: function injectComponent(containerName, blockName, compo) {\n      try {\n        this.injectionZones[containerName][blockName].push(compo);\n      } catch (err) {\n        console.error('Cannot inject component', err);\n      }\n    }\n  }]);\n  return Plugin;\n}();\n\nvar _default = function _default(pluginConf) {\n  return new Plugin(pluginConf);\n};\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}