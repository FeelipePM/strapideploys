{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _FilterTag = _interopRequireDefault(require(\"./FilterTag\"));\n\n/**\n *\n * FilterList\n *\n */\nvar FilterList = function FilterList(_ref) {\n  var appliedFilters = _ref.appliedFilters,\n      filtersSchema = _ref.filtersSchema,\n      onRemoveFilter = _ref.onRemoveFilter;\n\n  var handleClick = function handleClick(filter) {\n    var nextFilters = appliedFilters.filter(function (prevFilter) {\n      var _prevFilter$name;\n\n      var name = Object.keys(filter)[0];\n      var filterType = Object.keys(filter[name])[0];\n      var value = filter[name][filterType];\n      return ((_prevFilter$name = prevFilter[name]) === null || _prevFilter$name === void 0 ? void 0 : _prevFilter$name[filterType]) !== value;\n    });\n    onRemoveFilter(nextFilters);\n  };\n\n  return appliedFilters.map(function (filter, i) {\n    var attributeName = Object.keys(filter)[0];\n    var attribute = filtersSchema.find(function (_ref2) {\n      var name = _ref2.name;\n      return name === attributeName;\n    });\n    var filterObj = filter[attributeName];\n    var operator = Object.keys(filterObj)[0];\n    var value = filterObj[operator];\n    var displayedOperator = operator;\n\n    if (attribute.name === 'mime') {\n      displayedOperator = operator === '$contains' ? '$eq' : '$ne'; // Type is file\n      // The filter for the file is the following: { mime: {$not: {$contains: ['image', 'video']}}}\n\n      if (operator === '$not') {\n        value = 'file';\n        displayedOperator = '$eq';\n      } // Here the type is file and the filter is not file\n      // { mime: {$contains: ['image', 'video'] }}\n\n\n      if (['image', 'video'].includes(value[0]) && ['image', 'video'].includes(value[1])) {\n        value = 'file';\n        displayedOperator = '$ne';\n      }\n    }\n\n    return /*#__PURE__*/_react[\"default\"].createElement(_FilterTag[\"default\"] // eslint-disable-next-line react/no-array-index-key\n    , {\n      key: \"\".concat(attributeName, \"-\").concat(i),\n      attribute: attribute,\n      filter: filter,\n      onClick: handleClick,\n      operator: displayedOperator,\n      value: value\n    });\n  });\n};\n\nFilterList.defaultProps = {\n  filtersSchema: []\n};\nFilterList.propTypes = {\n  appliedFilters: _propTypes[\"default\"].array.isRequired,\n  filtersSchema: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].shape({\n    name: _propTypes[\"default\"].string.isRequired,\n    metadatas: _propTypes[\"default\"].shape({\n      label: _propTypes[\"default\"].string\n    }),\n    fieldSchema: _propTypes[\"default\"].shape({\n      type: _propTypes[\"default\"].string,\n      mainField: _propTypes[\"default\"].shape({\n        name: _propTypes[\"default\"].string,\n        type: _propTypes[\"default\"].string\n      })\n    })\n  })),\n  onRemoveFilter: _propTypes[\"default\"].func.isRequired\n};\nvar _default = FilterList;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}