{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _helperPlugin = require(\"@strapi/helper-plugin\");\n\nvar _Layout = require(\"@strapi/design-system/Layout\");\n\nvar _Button = require(\"@strapi/design-system/Button\");\n\nvar _Main = require(\"@strapi/design-system/Main\");\n\nvar _LiveRegions = require(\"@strapi/design-system/LiveRegions\");\n\nvar _Envelop = _interopRequireDefault(require(\"@strapi/icons/Envelop\"));\n\nvar _reactRouterDom = require(\"react-router-dom\");\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _reactQuery = require(\"react-query\");\n\nvar _permissions = _interopRequireDefault(require(\"../../../../../permissions\"));\n\nvar _TableRows = _interopRequireDefault(require(\"./DynamicTable/TableRows\"));\n\nvar _Filters = _interopRequireDefault(require(\"./Filters\"));\n\nvar _ModalForm = _interopRequireDefault(require(\"./ModalForm\"));\n\nvar _PaginationFooter = _interopRequireDefault(require(\"./PaginationFooter\"));\n\nvar _api = require(\"./utils/api\");\n\nvar _displayedFilters = _interopRequireDefault(require(\"./utils/displayedFilters\"));\n\nvar _tableHeaders = _interopRequireDefault(require(\"./utils/tableHeaders\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar ListPage = function ListPage() {\n  var _useState = (0, _react.useState)(false),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      isModalOpened = _useState2[0],\n      setIsModalOpen = _useState2[1];\n\n  var _useRBAC = (0, _helperPlugin.useRBAC)(_permissions[\"default\"].settings.users),\n      _useRBAC$allowedActio = _useRBAC.allowedActions,\n      canCreate = _useRBAC$allowedActio.canCreate,\n      canDelete = _useRBAC$allowedActio.canDelete,\n      canRead = _useRBAC$allowedActio.canRead;\n\n  var queryClient = (0, _reactQuery.useQueryClient)();\n  var toggleNotification = (0, _helperPlugin.useNotification)();\n\n  var _useIntl = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl.formatMessage;\n\n  var _useLocation = (0, _reactRouterDom.useLocation)(),\n      search = _useLocation.search;\n\n  (0, _helperPlugin.useFocusWhenNavigate)();\n\n  var _useNotifyAT = (0, _LiveRegions.useNotifyAT)(),\n      notifyStatus = _useNotifyAT.notifyStatus;\n\n  var queryName = ['users', search];\n  var title = formatMessage({\n    id: 'Settings.permissions.users.listview.header.title',\n    defaultMessage: 'Users'\n  });\n\n  var notifyLoad = function notifyLoad() {\n    notifyStatus(formatMessage({\n      id: 'app.utils.notify.data-loaded',\n      defaultMessage: 'The {target} has loaded'\n    }, {\n      target: title\n    }));\n  };\n\n  var _useQuery = (0, _reactQuery.useQuery)(queryName, function () {\n    return (0, _api.fetchData)(search, notifyLoad);\n  }, {\n    enabled: canRead,\n    keepPreviousData: true,\n    retry: false,\n    staleTime: 1000 * 20,\n    onError: function onError() {\n      toggleNotification({\n        type: 'warning',\n        message: {\n          id: 'notification.error',\n          defaultMessage: 'An error occured'\n        }\n      });\n    }\n  }),\n      status = _useQuery.status,\n      data = _useQuery.data,\n      isFetching = _useQuery.isFetching;\n\n  var handleToggle = function handleToggle() {\n    setIsModalOpen(function (prev) {\n      return !prev;\n    });\n  };\n\n  var deleteAllMutation = (0, _reactQuery.useMutation)(function (ids) {\n    return (0, _api.deleteData)(ids);\n  }, {\n    onSuccess: function () {\n      var _onSuccess = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return queryClient.invalidateQueries(queryName);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function onSuccess() {\n        return _onSuccess.apply(this, arguments);\n      }\n\n      return onSuccess;\n    }(),\n    onError: function onError(err) {\n      var _err$response, _err$response$data;\n\n      if (err !== null && err !== void 0 && (_err$response = err.response) !== null && _err$response !== void 0 && (_err$response$data = _err$response.data) !== null && _err$response$data !== void 0 && _err$response$data.data) {\n        toggleNotification({\n          type: 'warning',\n          message: err.response.data.data\n        });\n      } else {\n        toggleNotification({\n          type: 'warning',\n          message: {\n            id: 'notification.error',\n            defaultMessage: 'An error occured'\n          }\n        });\n      }\n    }\n  }); // This can be improved but we need to show an something to the user\n\n  var isLoading = status !== 'success' && status !== 'error' || status === 'success' && isFetching;\n  var createAction = canCreate ? /*#__PURE__*/_react[\"default\"].createElement(_Button.Button, {\n    \"data-testid\": \"create-user-button\",\n    onClick: handleToggle,\n    startIcon: /*#__PURE__*/_react[\"default\"].createElement(_Envelop[\"default\"], null),\n    size: \"L\"\n  }, formatMessage({\n    id: 'Settings.permissions.users.create',\n    defaultMessage: 'Invite new user'\n  })) : undefined;\n  return /*#__PURE__*/_react[\"default\"].createElement(_Main.Main, {\n    \"aria-busy\": isLoading\n  }, /*#__PURE__*/_react[\"default\"].createElement(_helperPlugin.SettingsPageTitle, {\n    name: \"Users\"\n  }), /*#__PURE__*/_react[\"default\"].createElement(_Layout.HeaderLayout, {\n    primaryAction: createAction,\n    title: title,\n    subtitle: formatMessage({\n      id: 'Settings.permissions.users.listview.header.subtitle',\n      defaultMessage: 'All the users who have access to the Strapi admin panel'\n    })\n  }), canRead && /*#__PURE__*/_react[\"default\"].createElement(_Layout.ActionLayout, {\n    startActions: /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, /*#__PURE__*/_react[\"default\"].createElement(_helperPlugin.SearchURLQuery, {\n      label: formatMessage({\n        id: 'app.component.search.label',\n        defaultMessage: 'Search for {target}'\n      }, {\n        target: title\n      })\n    }), /*#__PURE__*/_react[\"default\"].createElement(_Filters[\"default\"], {\n      displayedFilters: _displayedFilters[\"default\"]\n    }))\n  }), /*#__PURE__*/_react[\"default\"].createElement(_Layout.ContentLayout, {\n    canRead: canRead\n  }, !canRead && /*#__PURE__*/_react[\"default\"].createElement(_helperPlugin.NoPermissions, null), status === 'error' && /*#__PURE__*/_react[\"default\"].createElement(\"div\", null, \"TODO: An error occurred\"), canRead && /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, /*#__PURE__*/_react[\"default\"].createElement(_helperPlugin.DynamicTable, {\n    contentType: \"Users\",\n    isLoading: isLoading,\n    onConfirmDeleteAll: deleteAllMutation.mutateAsync,\n    onConfirmDelete: function onConfirmDelete(id) {\n      return deleteAllMutation.mutateAsync([id]);\n    },\n    headers: _tableHeaders[\"default\"],\n    rows: data === null || data === void 0 ? void 0 : data.results,\n    withBulkActions: true,\n    withMainAction: canDelete\n  }, /*#__PURE__*/_react[\"default\"].createElement(_TableRows[\"default\"], {\n    canDelete: canDelete,\n    headers: _tableHeaders[\"default\"],\n    rows: (data === null || data === void 0 ? void 0 : data.results) || [],\n    withBulkActions: true,\n    withMainAction: canDelete\n  })), /*#__PURE__*/_react[\"default\"].createElement(_PaginationFooter[\"default\"], {\n    pagination: data === null || data === void 0 ? void 0 : data.pagination\n  }))), isModalOpened && /*#__PURE__*/_react[\"default\"].createElement(_ModalForm[\"default\"], {\n    onToggle: handleToggle,\n    queryName: queryName\n  }));\n};\n\nvar _default = ListPage;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}