{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PendingAssetStep = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _ModalLayout = require(\"@strapi/design-system/ModalLayout\");\n\nvar _Typography = require(\"@strapi/design-system/Typography\");\n\nvar _Button = require(\"@strapi/design-system/Button\");\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _Flex = require(\"@strapi/design-system/Flex\");\n\nvar _Stack = require(\"@strapi/design-system/Stack\");\n\nvar _Grid = require(\"@strapi/design-system/Grid\");\n\nvar _KeyboardNavigable = require(\"@strapi/design-system/KeyboardNavigable\");\n\nvar _AssetCard = require(\"../../AssetCard/AssetCard\");\n\nvar _UploadingAssetCard = require(\"../../AssetCard/UploadingAssetCard\");\n\nvar _getTrad = _interopRequireDefault(require(\"../../../utils/getTrad\"));\n\nvar _constants = require(\"../../../constants\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar Status = {\n  Idle: 'IDLE',\n  Uploading: 'UPLOADING',\n  Intermediate: 'INTERMEDIATE'\n};\n\nvar PendingAssetStep = function PendingAssetStep(_ref) {\n  var addUploadedFiles = _ref.addUploadedFiles,\n      onClose = _ref.onClose,\n      onEditAsset = _ref.onEditAsset,\n      onRemoveAsset = _ref.onRemoveAsset,\n      assets = _ref.assets,\n      onClickAddAsset = _ref.onClickAddAsset,\n      onCancelUpload = _ref.onCancelUpload,\n      onUploadSucceed = _ref.onUploadSucceed;\n  var assetCountRef = (0, _react.useRef)(0);\n\n  var _useIntl = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl.formatMessage;\n\n  var _useState = (0, _react.useState)(Status.Idle),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      uploadStatus = _useState2[0],\n      setUploadStatus = _useState2[1];\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(e) {\n      return _regenerator[\"default\"].wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              e.stopPropagation();\n              setUploadStatus(Status.Uploading);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleStatusChange = function handleStatusChange(status, file) {\n    if (status === 'success' || status === 'error') {\n      assetCountRef.current++; // There's no \"terminated\" status. When all the files have called their\n      // onUploadSucceed callback, the parent component filters the asset list\n      // and closes the modal when the asset list is empty\n\n      if (assetCountRef.current === assets.length) {\n        assetCountRef.current = 0;\n        setUploadStatus(Status.Intermediate);\n      }\n    }\n\n    if (status === 'success') {\n      onUploadSucceed(file);\n    }\n  };\n\n  return /*#__PURE__*/_react[\"default\"].createElement(\"form\", {\n    onSubmit: handleSubmit\n  }, /*#__PURE__*/_react[\"default\"].createElement(_ModalLayout.ModalHeader, null, /*#__PURE__*/_react[\"default\"].createElement(_Typography.Typography, {\n    fontWeight: \"bold\",\n    textColor: \"neutral800\",\n    as: \"h2\",\n    id: \"title\"\n  }, formatMessage({\n    id: (0, _getTrad[\"default\"])('header.actions.add-assets'),\n    defaultMessage: 'Add new assets'\n  }))), /*#__PURE__*/_react[\"default\"].createElement(_ModalLayout.ModalBody, null, /*#__PURE__*/_react[\"default\"].createElement(_Stack.Stack, {\n    spacing: 7\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Flex.Flex, {\n    justifyContent: \"space-between\"\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Stack.Stack, {\n    spacing: 0\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Typography.Typography, {\n    variant: \"pi\",\n    fontWeight: \"bold\",\n    textColor: \"neutral800\"\n  }, formatMessage({\n    id: (0, _getTrad[\"default\"])('list.assets.selected'),\n    defaultMessage: '{number, plural, =0 {No asset} one {1 asset} other {# assets}} ready to upload'\n  }, {\n    number: assets.length\n  })), /*#__PURE__*/_react[\"default\"].createElement(_Typography.Typography, {\n    variant: \"pi\",\n    textColor: \"neutral600\"\n  }, formatMessage({\n    id: (0, _getTrad[\"default\"])('modal.upload-list.sub-header-subtitle'),\n    defaultMessage: 'Manage the assets before adding them to the Media Library'\n  }))), /*#__PURE__*/_react[\"default\"].createElement(_Button.Button, {\n    size: \"S\",\n    onClick: onClickAddAsset\n  }, formatMessage({\n    id: (0, _getTrad[\"default\"])('header.actions.add-assets'),\n    defaultMessage: 'Add new assets'\n  }))), /*#__PURE__*/_react[\"default\"].createElement(_KeyboardNavigable.KeyboardNavigable, {\n    tagName: \"article\"\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Grid.Grid, {\n    gap: 4\n  }, assets.map(function (asset) {\n    var assetKey = asset.url;\n\n    if (uploadStatus === Status.Uploading || uploadStatus === Status.Intermediate) {\n      return /*#__PURE__*/_react[\"default\"].createElement(_Grid.GridItem, {\n        col: 4,\n        key: assetKey\n      }, /*#__PURE__*/_react[\"default\"].createElement(_UploadingAssetCard.UploadingAssetCard // Props used to store the newly uploaded files\n      , {\n        addUploadedFiles: addUploadedFiles,\n        asset: asset,\n        id: assetKey,\n        onCancel: onCancelUpload,\n        onStatusChange: function onStatusChange(status) {\n          return handleStatusChange(status, asset.rawFile);\n        },\n        size: \"S\"\n      }));\n    }\n\n    return /*#__PURE__*/_react[\"default\"].createElement(_Grid.GridItem, {\n      col: 4,\n      key: assetKey\n    }, /*#__PURE__*/_react[\"default\"].createElement(_AssetCard.AssetCard, {\n      asset: asset,\n      size: \"S\",\n      key: assetKey,\n      local: true,\n      alt: asset.name,\n      onEdit: onEditAsset,\n      onRemove: onRemoveAsset\n    }));\n  }))))), /*#__PURE__*/_react[\"default\"].createElement(_ModalLayout.ModalFooter, {\n    startActions: /*#__PURE__*/_react[\"default\"].createElement(_Button.Button, {\n      onClick: onClose,\n      variant: \"tertiary\"\n    }, formatMessage({\n      id: 'app.components.Button.cancel',\n      defaultMessage: 'cancel'\n    })),\n    endActions: /*#__PURE__*/_react[\"default\"].createElement(_Button.Button, {\n      type: \"submit\",\n      loading: uploadStatus === Status.Uploading\n    }, formatMessage({\n      id: (0, _getTrad[\"default\"])('modal.upload-list.footer.button'),\n      defaultMessage: 'Upload {number, plural, one {# asset} other {# assets}} to the library'\n    }, {\n      number: assets.length\n    }))\n  }));\n};\n\nexports.PendingAssetStep = PendingAssetStep;\nPendingAssetStep.defaultProps = {\n  addUploadedFiles: undefined\n};\nPendingAssetStep.propTypes = {\n  addUploadedFiles: _propTypes[\"default\"].func,\n  assets: _propTypes[\"default\"].arrayOf(_constants.AssetDefinition).isRequired,\n  onClose: _propTypes[\"default\"].func.isRequired,\n  onEditAsset: _propTypes[\"default\"].func.isRequired,\n  onRemoveAsset: _propTypes[\"default\"].func.isRequired,\n  onClickAddAsset: _propTypes[\"default\"].func.isRequired,\n  onUploadSucceed: _propTypes[\"default\"].func.isRequired,\n  onCancelUpload: _propTypes[\"default\"].func.isRequired\n};","map":null,"metadata":{},"sourceType":"script"}