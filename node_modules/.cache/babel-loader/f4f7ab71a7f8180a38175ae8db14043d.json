{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UploadAssetDialog = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _ModalLayout = require(\"@strapi/design-system/ModalLayout\");\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _AddAssetStep = require(\"./AddAssetStep/AddAssetStep\");\n\nvar _PendingAssetStep = require(\"./PendingAssetStep/PendingAssetStep\");\n\nvar _EditAssetDialog = require(\"../EditAssetDialog\");\n\nvar _constants = require(\"../../constants\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar Steps = {\n  AddAsset: 'AddAsset',\n  PendingAsset: 'PendingAsset'\n};\n\nvar UploadAssetDialog = function UploadAssetDialog(_ref) {\n  var initialAssetsToAdd = _ref.initialAssetsToAdd,\n      onClose = _ref.onClose,\n      addUploadedFiles = _ref.addUploadedFiles,\n      trackedLocation = _ref.trackedLocation;\n\n  var _useIntl = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl.formatMessage;\n\n  var _useState = (0, _react.useState)(initialAssetsToAdd ? Steps.PendingAsset : Steps.AddAsset),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      step = _useState2[0],\n      setStep = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(initialAssetsToAdd || []),\n      _useState4 = (0, _slicedToArray2[\"default\"])(_useState3, 2),\n      assets = _useState4[0],\n      setAssets = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(undefined),\n      _useState6 = (0, _slicedToArray2[\"default\"])(_useState5, 2),\n      assetToEdit = _useState6[0],\n      setAssetToEdit = _useState6[1];\n\n  var handleAddToPendingAssets = function handleAddToPendingAssets(nextAssets) {\n    setAssets(function (prevAssets) {\n      return prevAssets.concat(nextAssets);\n    });\n    setStep(Steps.PendingAsset);\n  };\n\n  var moveToAddAsset = function moveToAddAsset() {\n    setStep(Steps.AddAsset);\n  };\n\n  var handleCancelUpload = function handleCancelUpload(file) {\n    var nextAssets = assets.filter(function (asset) {\n      return asset.rawFile !== file;\n    });\n    setAssets(nextAssets); // When there's no asset, transition to the AddAsset step\n\n    if (nextAssets.length === 0) {\n      moveToAddAsset();\n    }\n  };\n\n  var handleUploadSuccess = function handleUploadSuccess(file) {\n    var nextAssets = assets.filter(function (asset) {\n      return asset.rawFile !== file;\n    });\n    setAssets(nextAssets);\n\n    if (nextAssets.length === 0) {\n      onClose();\n    }\n  };\n\n  var handleAssetEditValidation = function handleAssetEditValidation(nextAsset) {\n    if (nextAsset) {\n      var nextAssets = assets.map(function (asset) {\n        return asset === assetToEdit ? nextAsset : asset;\n      });\n      setAssets(nextAssets);\n    }\n\n    setAssetToEdit(undefined);\n  };\n\n  var handleClose = function handleClose() {\n    if (step === Steps.PendingAsset && assets.length > 0) {\n      // eslint-disable-next-line no-alert\n      var confirm = window.confirm(formatMessage({\n        id: 'window.confirm.close-modal.files',\n        defaultMessage: 'Are you sure? You have some files that have not been uploaded yet.'\n      }));\n\n      if (confirm) {\n        onClose();\n      }\n    } else {\n      onClose();\n    }\n  };\n\n  var handleRemoveAsset = function handleRemoveAsset(assetToRemove) {\n    var nextAssets = assets.filter(function (asset) {\n      return asset !== assetToRemove;\n    });\n    setAssets(nextAssets);\n  };\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_ModalLayout.ModalLayout, {\n    onClose: handleClose,\n    labelledBy: \"title\"\n  }, step === Steps.AddAsset && /*#__PURE__*/_react[\"default\"].createElement(_AddAssetStep.AddAssetStep, {\n    onClose: onClose,\n    onAddAsset: handleAddToPendingAssets,\n    trackedLocation: trackedLocation\n  }), step === Steps.PendingAsset && /*#__PURE__*/_react[\"default\"].createElement(_PendingAssetStep.PendingAssetStep, {\n    onClose: handleClose,\n    assets: assets,\n    onEditAsset: setAssetToEdit,\n    onRemoveAsset: handleRemoveAsset,\n    onClickAddAsset: moveToAddAsset,\n    onCancelUpload: handleCancelUpload,\n    onUploadSucceed: handleUploadSuccess,\n    initialAssetsToAdd: initialAssetsToAdd,\n    addUploadedFiles: addUploadedFiles\n  }), assetToEdit && /*#__PURE__*/_react[\"default\"].createElement(_EditAssetDialog.EditAssetDialog, {\n    onClose: handleAssetEditValidation,\n    asset: assetToEdit,\n    canUpdate: true,\n    canCopyLink: false,\n    canDownload: false,\n    trackedLocation: trackedLocation\n  }));\n};\n\nexports.UploadAssetDialog = UploadAssetDialog;\nUploadAssetDialog.defaultProps = {\n  addUploadedFiles: undefined,\n  initialAssetsToAdd: undefined,\n  trackedLocation: undefined\n};\nUploadAssetDialog.propTypes = {\n  addUploadedFiles: _propTypes[\"default\"].func,\n  initialAssetsToAdd: _propTypes[\"default\"].arrayOf(_constants.AssetDefinition),\n  onClose: _propTypes[\"default\"].func.isRequired,\n  trackedLocation: _propTypes[\"default\"].string\n};","map":null,"metadata":{},"sourceType":"script"}