{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _Grid = require(\"@strapi/design-system/Grid\");\n\nvar _TextInput = require(\"@strapi/design-system/TextInput\");\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _formik = require(\"formik\");\n\nvar _utils = require(\"../../utils\");\n\nvar _LocaleSelect = _interopRequireDefault(require(\"../LocaleSelect\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar BaseForm = function BaseForm() {\n  var _useIntl = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl.formatMessage;\n\n  var _useFormikContext = (0, _formik.useFormikContext)(),\n      values = _useFormikContext.values,\n      handleChange = _useFormikContext.handleChange,\n      setFieldValue = _useFormikContext.setFieldValue,\n      errors = _useFormikContext.errors;\n  /**\n   * This is needed because the LocaleSelect component is a memoized component\n   * since it renders ~500 locales and that formik would trigger a re-render on it without\n   * it\n   */\n\n\n  var handleLocaleChange = (0, _react.useCallback)(function (nextLocale) {\n    setFieldValue('displayName', nextLocale.displayName);\n    setFieldValue('code', nextLocale.code);\n  }, [setFieldValue]);\n  /**\n   * This is needed because the LocaleSelect component is a memoized component\n   * since it renders ~500 locales and that formik would trigger a re-render on it without\n   * it\n   */\n\n  var handleClear = (0, _react.useCallback)(function () {\n    setFieldValue('displayName', '');\n    setFieldValue('code', '');\n  }, [setFieldValue]);\n  return /*#__PURE__*/_react[\"default\"].createElement(_Grid.Grid, {\n    gap: 4\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Grid.GridItem, {\n    col: 6\n  }, /*#__PURE__*/_react[\"default\"].createElement(_LocaleSelect[\"default\"], {\n    error: errors.code,\n    value: values.code,\n    onLocaleChange: handleLocaleChange,\n    onClear: handleClear\n  })), /*#__PURE__*/_react[\"default\"].createElement(_Grid.GridItem, {\n    col: 6\n  }, /*#__PURE__*/_react[\"default\"].createElement(_TextInput.TextInput, {\n    name: \"displayName\",\n    label: formatMessage({\n      id: (0, _utils.getTrad)('Settings.locales.modal.locales.displayName'),\n      defaultMessage: 'Locale display name'\n    }),\n    hint: formatMessage({\n      id: (0, _utils.getTrad)('Settings.locales.modal.locales.displayName.description'),\n      defaultMessage: 'Locale will be displayed under that name in the administration panel'\n    }),\n    error: errors.displayName ? formatMessage({\n      id: (0, _utils.getTrad)('Settings.locales.modal.locales.displayName.error'),\n      defaultMessage: 'The locale display name can only be less than 50 characters.'\n    }) : undefined,\n    value: values.displayName,\n    onChange: handleChange\n  })));\n};\n\nvar _default = BaseForm;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}