{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _cloneDeep = _interopRequireDefault(require(\"lodash/cloneDeep\"));\n\nvar _get = _interopRequireDefault(require(\"lodash/get\"));\n\nvar yup = _interopRequireWildcard(require(\"yup\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar formsAPI = {\n  components: {\n    inputs: {},\n    add: function add(_ref) {\n      var id = _ref.id,\n          component = _ref.component;\n\n      if (!this.inputs[id]) {\n        this.inputs[id] = component;\n      }\n    }\n  },\n  types: {\n    attribute: {// test: {\n      //   validators: [],\n      //   form: {\n      //     advanced: [\n      //       /* cb */\n      //     ],\n      //     base: [\n      //       /* cb */\n      //     ],\n      //   },\n      // },\n    },\n    contentType: {\n      validators: [],\n      form: {\n        advanced: [],\n        base: []\n      }\n    },\n    component: {\n      validators: [],\n      form: {\n        advanced: [],\n        base: []\n      }\n    }\n  },\n  contentTypeSchemaMutations: [],\n  addContentTypeSchemaMutation: function addContentTypeSchemaMutation(cb) {\n    this.contentTypeSchemaMutations.push(cb);\n  },\n  extendContentType: function extendContentType(_ref2) {\n    var validator = _ref2.validator,\n        _ref2$form = _ref2.form,\n        advanced = _ref2$form.advanced,\n        base = _ref2$form.base;\n    var contentType = this.types.contentType;\n    contentType.validators.push(validator);\n    contentType.form.advanced.push(advanced);\n    contentType.form.base.push(base);\n  },\n  extendFields: function extendFields(fields, _ref3) {\n    var validator = _ref3.validator,\n        _ref3$form = _ref3.form,\n        advanced = _ref3$form.advanced,\n        base = _ref3$form.base;\n    var formType = this.types.attribute;\n    fields.forEach(function (field) {\n      if (!formType[field]) {\n        formType[field] = {\n          validators: [],\n          form: {\n            advanced: [\n              /* cb */\n            ],\n            base: [\n              /* cb */\n            ]\n          }\n        };\n        formType[field].validators.push(validator);\n        formType[field].form.advanced.push(advanced);\n        formType[field].form.base.push(base);\n      }\n    });\n  },\n  getAdvancedForm: function getAdvancedForm(target) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var sectionsToAdd = (0, _get[\"default\"])(this.types, [].concat((0, _toConsumableArray2[\"default\"])(target), ['form', 'advanced']), []).reduce(function (acc, current) {\n      var sections = current(props);\n      return [].concat((0, _toConsumableArray2[\"default\"])(acc), (0, _toConsumableArray2[\"default\"])(sections));\n    }, []);\n    return sectionsToAdd;\n  },\n  makeValidator: function makeValidator(target, initShape) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    var validators = (0, _get[\"default\"])(this.types, [].concat((0, _toConsumableArray2[\"default\"])(target), ['validators']), []);\n    var pluginOptionsShape = validators.reduce(function (acc, current) {\n      var pluginOptionShape = current(args);\n      return _objectSpread(_objectSpread({}, acc), pluginOptionShape);\n    }, {});\n    return initShape.shape({\n      pluginOptions: yup.object().shape(pluginOptionsShape)\n    });\n  },\n  mutateContentTypeSchema: function mutateContentTypeSchema(data, initialData) {\n    var enhancedData = (0, _cloneDeep[\"default\"])(data);\n    var refData = (0, _cloneDeep[\"default\"])(initialData);\n    this.contentTypeSchemaMutations.forEach(function (cb) {\n      enhancedData = cb(enhancedData, refData);\n    });\n    return enhancedData;\n  }\n};\nvar _default = formsAPI;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}