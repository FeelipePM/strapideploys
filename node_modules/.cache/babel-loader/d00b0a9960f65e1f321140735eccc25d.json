{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _styledComponents = _interopRequireDefault(require(\"styled-components\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactDnd = require(\"react-dnd\");\n\nvar _reactDndHtml5Backend = require(\"react-dnd-html5-backend\");\n\nvar _Flex = require(\"@strapi/design-system/Flex\");\n\nvar _Box = require(\"@strapi/design-system/Box\");\n\nvar _Grid = require(\"@strapi/design-system/Grid\");\n\nvar _Drag = _interopRequireDefault(require(\"@strapi/icons/Drag\"));\n\nvar _utils = require(\"../../../utils\");\n\nvar _FieldButtonContent = _interopRequireDefault(require(\"./FieldButtonContent\"));\n\nvar _hooks = require(\"../../../hooks\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar Wrapper = /*#__PURE__*/(0, _styledComponents[\"default\"])(_Flex.Flex).withConfig({\n  displayName: \"DisplayedFieldButton__Wrapper\",\n  componentId: \"sc-19kzwqt-0\"\n})([\"position:relative;\", \" \", \";\"], function (_ref) {\n  var isFirst = _ref.isFirst,\n      isLast = _ref.isLast,\n      hasHorizontalPadding = _ref.hasHorizontalPadding;\n\n  if (isFirst) {\n    return \"\\n        padding-right: 4px;\\n      \";\n  }\n\n  if (isLast) {\n    return \"\\n        padding-left: 4px;\\n      \";\n  }\n\n  if (hasHorizontalPadding) {\n    return \"\\n        padding: 0 4px;\\n      \";\n  }\n\n  return '';\n}, function (_ref2) {\n  var showRightCarret = _ref2.showRightCarret,\n      showLeftCarret = _ref2.showLeftCarret,\n      theme = _ref2.theme;\n\n  if (showRightCarret) {\n    return \"\\n        &:after {\\n          content: '';\\n          position: absolute;\\n          right: -1px;\\n          background-color: \".concat(theme.colors.primary600, \";\\n          width: 2px;\\n          height: 100%;\\n          align-self: stretch;\\n          z-index: 1;\\n        }\\n      \");\n  }\n\n  if (showLeftCarret) {\n    return \"\\n        &:before {\\n          content: '';\\n          position: absolute;\\n          left: -1px;\\n          background-color: \".concat(theme.colors.primary600, \";\\n          width: 2px;\\n          height: 100%;\\n          align-self: stretch;\\n          z-index: 1;\\n        }\\n      \");\n  }\n\n  return '';\n});\nvar CustomDragIcon = /*#__PURE__*/(0, _styledComponents[\"default\"])(_Drag[\"default\"]).withConfig({\n  displayName: \"DisplayedFieldButton__CustomDragIcon\",\n  componentId: \"sc-19kzwqt-1\"\n})([\"height:\", \"rem;width:\", \"rem;path{fill:\", \";}\"], 12 / 16, 12 / 16, function (_ref3) {\n  var theme = _ref3.theme;\n  return theme.colors.neutral600;\n});\nvar CustomFlex = /*#__PURE__*/(0, _styledComponents[\"default\"])(_Flex.Flex).withConfig({\n  displayName: \"DisplayedFieldButton__CustomFlex\",\n  componentId: \"sc-19kzwqt-2\"\n})([\"display:\", \";opacity:\", \";\"], function (_ref4) {\n  var dragStart = _ref4.dragStart;\n  return dragStart ? 'none' : 'flex';\n}, function (_ref5) {\n  var isDragging = _ref5.isDragging,\n      isFullSize = _ref5.isFullSize,\n      isHidden = _ref5.isHidden;\n\n  if (isDragging && !isFullSize) {\n    return 0.2;\n  }\n\n  if (isDragging && isFullSize || isHidden) {\n    return 0;\n  }\n\n  return 1;\n});\nvar DragButton = /*#__PURE__*/(0, _styledComponents[\"default\"])(_Flex.Flex).withConfig({\n  displayName: \"DisplayedFieldButton__DragButton\",\n  componentId: \"sc-19kzwqt-3\"\n})([\"cursor:all-scroll;border-right:1px solid \", \";\"], function (_ref6) {\n  var theme = _ref6.theme;\n  return theme.colors.neutral200;\n});\n\nvar DisplayedFieldButton = function DisplayedFieldButton(_ref7) {\n  var attribute = _ref7.attribute,\n      children = _ref7.children,\n      index = _ref7.index,\n      lastIndex = _ref7.lastIndex,\n      moveItem = _ref7.moveItem,\n      moveRow = _ref7.moveRow,\n      name = _ref7.name,\n      onDeleteField = _ref7.onDeleteField,\n      onEditField = _ref7.onEditField,\n      rowIndex = _ref7.rowIndex,\n      size = _ref7.size;\n\n  var _useState = (0, _react.useState)(false),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      dragStart = _useState2[0],\n      setDragStart = _useState2[1];\n\n  var isHidden = name === '_TEMP_';\n\n  var _useLayoutDnd = (0, _hooks.useLayoutDnd)(),\n      setIsDraggingSibling = _useLayoutDnd.setIsDraggingSibling;\n\n  var isFullSize = size === 12;\n  var dragRef = (0, _react.useRef)(null);\n  var dropRef = (0, _react.useRef)(null);\n\n  var _useDrop = (0, _reactDnd.useDrop)({\n    accept: _utils.ItemTypes.EDIT_FIELD,\n    hover: function hover(item, monitor) {\n      if (!dropRef.current) {\n        return;\n      } // We use the hover only to reorder full size items\n\n\n      // We use the hover only to reorder full size items\n      if (item.size !== 12) {\n        return;\n      }\n\n      var dragIndex = monitor.getItem().index;\n      var hoverIndex = index;\n      var dragRow = monitor.getItem().rowIndex;\n      var targetRow = rowIndex; // Don't replace item with themselves\n\n      // Don't replace item with themselves\n      if (dragIndex === hoverIndex && dragRow === targetRow) {\n        return;\n      } // Determine rectangle on screen\n\n\n      // Determine rectangle on screen\n      var hoverBoundingRect = dropRef.current.getBoundingClientRect(); // Get vertical middle\n\n      // Get vertical middle\n      var hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2; // Determine mouse position\n\n      // Determine mouse position\n      var clientOffset = monitor.getClientOffset(); // Get pixels to the top\n\n      // Get pixels to the top\n      var hoverClientY = clientOffset.y - hoverBoundingRect.top; // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragRow < targetRow && hoverClientY < hoverMiddleY) {\n        return;\n      } // Dragging upwards\n\n\n      // Dragging upwards\n      if (dragRow > targetRow && hoverClientY > hoverMiddleY) {\n        return;\n      }\n\n      moveRow(dragRow, targetRow);\n      item.rowIndex = targetRow;\n      item.itemIndex = hoverIndex;\n    },\n    drop: function drop(item, monitor) {\n      if (!dropRef.current) {\n        return;\n      }\n\n      var dragIndex = monitor.getItem().index;\n      var hoverIndex = index;\n      var dragRow = monitor.getItem().rowIndex;\n      var targetRow = rowIndex; // Don't reorder on drop for full size elements since it is already done in the hover\n\n      // Don't reorder on drop for full size elements since it is already done in the hover\n      if (item.size === 12) {\n        return;\n      } // Don't replace item with themselves\n\n\n      // Don't replace item with themselves\n      if (dragIndex === hoverIndex && dragRow === targetRow) {\n        return;\n      } // Determine rectangle on screen\n\n\n      // Determine rectangle on screen\n      var hoverBoundingRect = dropRef.current.getBoundingClientRect(); // Scroll window if mouse near vertical edge(100px)\n      // Horizontal Check --\n\n      // Scroll window if mouse near vertical edge(100px)\n      // Horizontal Check --\n      if (Math.abs(monitor.getClientOffset().x - hoverBoundingRect.left) > hoverBoundingRect.width / 1.8) {\n        moveItem(dragIndex, hoverIndex + 1, dragRow, targetRow);\n        item.itemIndex = hoverIndex + 1;\n        item.rowIndex = targetRow;\n        return;\n      } // Vertical Check |\n      // Time to actually perform the action\n\n\n      // Vertical Check |\n      // Time to actually perform the action\n      moveItem(dragIndex, hoverIndex, dragRow, targetRow); // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.itemIndex = hoverIndex;\n      item.rowIndex = targetRow;\n    },\n    collect: function collect(monitor) {\n      return {\n        canDrop: monitor.canDrop(),\n        clientOffset: monitor.getClientOffset(),\n        isOver: monitor.isOver(),\n        isOverCurrent: monitor.isOver({\n          shallow: true\n        }),\n        itemType: monitor.getItemType()\n      };\n    }\n  }),\n      _useDrop2 = (0, _slicedToArray2[\"default\"])(_useDrop, 2),\n      _useDrop2$ = _useDrop2[0],\n      clientOffset = _useDrop2$.clientOffset,\n      isOver = _useDrop2$.isOver,\n      drop = _useDrop2[1];\n\n  var _useDrag = (0, _reactDnd.useDrag)({\n    type: _utils.ItemTypes.EDIT_FIELD,\n    item: function item() {\n      setIsDraggingSibling(true);\n      return {\n        index: index,\n        labelField: children,\n        rowIndex: rowIndex,\n        name: name,\n        size: size\n      };\n    },\n    canDrag: function canDrag() {\n      // Each row of the layout has a max size of 12 (based on bootstrap grid system)\n      // So in order to offer a better drop zone we add the _TEMP_ div to complete the remaining substract (12 - existing)\n      // Those divs cannot be dragged\n      // If we wanted to offer the ability to create new lines in the layout (which will come later)\n      // We will need to add a 12 size _TEMP_ div to offer a drop target between each existing row.\n      return name !== '_TEMP_';\n    },\n    collect: function collect(monitor) {\n      return {\n        isDragging: monitor.isDragging(),\n        getItem: monitor.getItem()\n      };\n    },\n    end: function end() {\n      setIsDraggingSibling(false);\n    }\n  }),\n      _useDrag2 = (0, _slicedToArray2[\"default\"])(_useDrag, 3),\n      _useDrag2$ = _useDrag2[0],\n      isDragging = _useDrag2$.isDragging,\n      getItem = _useDrag2$.getItem,\n      drag = _useDrag2[1],\n      dragPreview = _useDrag2[2]; // Remove the default preview when the item is being dragged\n  // The preview is handled by the DragLayer\n\n\n  (0, _react.useEffect)(function () {\n    dragPreview((0, _reactDndHtml5Backend.getEmptyImage)(), {\n      captureDraggingState: true\n    });\n  }, [dragPreview]); // Create the refs\n  // We need 1 for the drop target\n  // 1 for the drag target\n\n  var refs = {\n    dragRef: drag(dragRef),\n    dropRef: drop(dropRef)\n  };\n  var showLeftCarret = false;\n  var showRightCarret = false;\n\n  if (dropRef.current && clientOffset) {\n    var hoverBoundingRect = dropRef.current.getBoundingClientRect();\n    showLeftCarret = isOver && getItem.size !== 12 && Math.abs(clientOffset.x - hoverBoundingRect.left) < hoverBoundingRect.width / 2;\n    showRightCarret = isOver && getItem.size !== 12 && Math.abs(clientOffset.x - hoverBoundingRect.left) > hoverBoundingRect.width / 2;\n\n    if (name === '_TEMP_') {\n      showLeftCarret = isOver && getItem.size !== 12;\n      showRightCarret = false;\n    }\n  }\n\n  var getHeight = function getHeight() {\n    if (attribute && isFullSize) {\n      return \"\".concat(74 / 16, \"rem\");\n    }\n\n    return \"\".concat(32 / 16, \"rem\");\n  };\n\n  var isFirst = index === 0 && !isFullSize;\n  var isLast = index === lastIndex && !isFullSize;\n  var hasHorizontalPadding = index !== 0 && !isFullSize;\n  return /*#__PURE__*/_react[\"default\"].createElement(_Grid.GridItem, {\n    col: size\n  }, /*#__PURE__*/_react[\"default\"].createElement(Wrapper, {\n    ref: refs.dropRef,\n    showLeftCarret: showLeftCarret,\n    showRightCarret: showRightCarret,\n    isFirst: isFirst,\n    isLast: isLast,\n    hasHorizontalPadding: hasHorizontalPadding,\n    onDrag: function onDrag() {\n      if (isFullSize && !dragStart) {\n        setDragStart(true);\n      }\n    },\n    onDragEnd: function onDragEnd() {\n      if (isFullSize) {\n        setDragStart(false);\n      }\n    }\n  }, dragStart && isFullSize && /*#__PURE__*/_react[\"default\"].createElement(_Box.Box // style={{ display: isDragging ? 'block' : 'none' }}\n  , {\n    width: \"100%\",\n    height: \"2px\",\n    background: \"primary600\"\n  }), /*#__PURE__*/_react[\"default\"].createElement(CustomFlex, {\n    width: isFullSize && dragStart ? 0 : '100%',\n    borderColor: \"neutral150\",\n    hasRadius: true,\n    background: \"neutral100\",\n    minHeight: getHeight(),\n    alignItems: \"stretch\",\n    isDragging: isDragging,\n    dragStart: dragStart,\n    isFullSize: isFullSize,\n    isHidden: isHidden\n  }, /*#__PURE__*/_react[\"default\"].createElement(DragButton, {\n    as: \"span\",\n    type: \"button\",\n    ref: refs.dragRef,\n    onClick: function onClick(e) {\n      return e.stopPropagation();\n    },\n    alignItems: \"center\",\n    paddingLeft: 3,\n    paddingRight: 3 // Disable the keyboard navigation since the drag n drop isn't accessible with the keyboard for the moment\n    ,\n    tabIndex: -1\n  }, /*#__PURE__*/_react[\"default\"].createElement(CustomDragIcon, null)), !isHidden && /*#__PURE__*/_react[\"default\"].createElement(_FieldButtonContent[\"default\"], {\n    attribute: attribute,\n    onEditField: onEditField,\n    onDeleteField: onDeleteField\n  }, children))));\n};\n\nDisplayedFieldButton.defaultProps = {\n  attribute: undefined\n};\nDisplayedFieldButton.propTypes = {\n  attribute: _propTypes[\"default\"].shape({\n    components: _propTypes[\"default\"].array,\n    component: _propTypes[\"default\"].string,\n    type: _propTypes[\"default\"].string\n  }),\n  children: _propTypes[\"default\"].string.isRequired,\n  index: _propTypes[\"default\"].number.isRequired,\n  moveItem: _propTypes[\"default\"].func.isRequired,\n  moveRow: _propTypes[\"default\"].func.isRequired,\n  name: _propTypes[\"default\"].string.isRequired,\n  onDeleteField: _propTypes[\"default\"].func.isRequired,\n  onEditField: _propTypes[\"default\"].func.isRequired,\n  rowIndex: _propTypes[\"default\"].number.isRequired,\n  lastIndex: _propTypes[\"default\"].number.isRequired,\n  size: _propTypes[\"default\"].number.isRequired\n};\nvar _default = DisplayedFieldButton;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}