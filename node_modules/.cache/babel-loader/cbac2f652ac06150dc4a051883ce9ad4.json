{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.titleHandler = exports.replaceText = exports.quoteAndCodeHandler = exports.markdownHandler = exports.listHandler = exports.insertText = exports.insertListOrTitle = exports.insertFile = void 0;\n\nvar replaceText = function replaceText(markdownName, textToChange) {\n  var editedText;\n\n  switch (markdownName) {\n    case 'Strikethrough':\n      editedText = \"~~\".concat(textToChange, \"~~\");\n      break;\n\n    case 'Bold':\n      editedText = \"**\".concat(textToChange, \"**\");\n      break;\n\n    case 'Italic':\n      editedText = \"_\".concat(textToChange, \"_\");\n      break;\n\n    case 'Underline':\n      editedText = \"<u>\".concat(textToChange, \"</u>\");\n      break;\n\n    case 'Code':\n      editedText = \"```\\n\".concat(textToChange, \"\\n```\");\n      break;\n\n    case 'Link':\n      editedText = \"[\".concat(textToChange, \"](link)\");\n      break;\n\n    case 'Quote':\n      editedText = \">\".concat(textToChange);\n      break;\n\n    default:\n      editedText = textToChange;\n  }\n\n  return editedText;\n};\n\nexports.replaceText = replaceText;\n\nvar insertText = function insertText(markdownName) {\n  var editedText; // object to calculate text that will be selected after insert of markdown\n\n  var selection = {\n    start: markdownName.length,\n    end: 0\n  };\n\n  switch (markdownName) {\n    case 'Strikethrough':\n      editedText = \"~~\".concat(markdownName, \"~~\");\n      selection.end = 2;\n      break;\n\n    case 'Bold':\n      editedText = \"**\".concat(markdownName, \"**\");\n      selection.end = 2;\n      break;\n\n    case 'Italic':\n      editedText = \"_\".concat(markdownName, \"_\");\n      selection.end = 1;\n      break;\n\n    case 'alt':\n      editedText = \"[\".concat(markdownName, \"]()\");\n      selection.end = 3;\n      break;\n\n    case 'Underline':\n      editedText = \"<u>\".concat(markdownName, \"</u>\");\n      selection.end = 4;\n      break;\n\n    case 'Code':\n      editedText = \"```\\n\".concat(markdownName, \"\\n```\");\n      selection.end = 3;\n      break;\n\n    case 'Link':\n      editedText = \"[\".concat(markdownName, \"](link)\");\n      selection.end = 7;\n      break;\n\n    case 'Quote':\n      editedText = \">\".concat(markdownName);\n      selection.end = 0;\n      break;\n\n    default:\n      editedText = '';\n  }\n\n  return {\n    editedText: editedText,\n    selection: selection\n  };\n};\n\nexports.insertText = insertText;\n\nvar insertListOrTitle = function insertListOrTitle(markdown) {\n  var textToInsert;\n\n  switch (markdown) {\n    case 'BulletList':\n      textToInsert = '- ';\n      break;\n\n    case 'NumberList':\n      textToInsert = '1. ';\n      break;\n\n    case 'h1':\n      textToInsert = '# ';\n      break;\n\n    case 'h2':\n      textToInsert = '## ';\n      break;\n\n    case 'h3':\n      textToInsert = '### ';\n      break;\n\n    case 'h4':\n      textToInsert = '#### ';\n      break;\n\n    case 'h5':\n      textToInsert = '##### ';\n      break;\n\n    case 'h6':\n      textToInsert = '###### ';\n      break;\n\n    default:\n      return '';\n  }\n\n  return textToInsert;\n}; // EDITOR ACTIONS FUNCTIONS\n\n\nexports.insertListOrTitle = insertListOrTitle;\n\nvar markdownHandler = function markdownHandler(editor, markdownType) {\n  var textToEdit = editor.current.getSelection();\n  var textToInsert;\n\n  if (textToEdit) {\n    var editedText = replaceText(markdownType, textToEdit);\n    editor.current.replaceSelection(editedText);\n    editor.current.focus();\n  } else {\n    textToInsert = insertText(markdownType);\n    editor.current.replaceSelection(textToInsert.editedText);\n    editor.current.focus(); // set selection-focus to text to replace with content\n\n    var _editor$current$getCu = editor.current.getCursor(),\n        line = _editor$current$getCu.line,\n        ch = _editor$current$getCu.ch;\n\n    var endSelection = ch - textToInsert.selection.end;\n    var startSelection = ch - textToInsert.selection.end - textToInsert.selection.start;\n    editor.current.setSelection({\n      line: line,\n      ch: startSelection\n    }, {\n      line: line,\n      ch: endSelection\n    });\n  }\n};\n\nexports.markdownHandler = markdownHandler;\n\nvar listHandler = function listHandler(editor, listType) {\n  var doc = editor.current.getDoc();\n  var insertion = listType === 'BulletList' ? '- ' : '1. ';\n\n  if (doc.somethingSelected()) {\n    var selections = doc.listSelections();\n    var remove = null;\n    editor.current.operation(function () {\n      selections.forEach(function (selection) {\n        var pos = [selection.head.line, selection.anchor.line].sort(); // Remove if the first text starts with it\n\n        if (remove == null) {\n          remove = doc.getLine(pos[0]).startsWith(insertion);\n        }\n\n        for (var i = pos[0]; i <= pos[1]; i++) {\n          if (remove) {\n            // Don't remove if we don't start with it\n            if (doc.getLine(i).startsWith(insertion)) {\n              doc.replaceRange('', {\n                line: i,\n                ch: 0\n              }, {\n                line: i,\n                ch: insertion.length\n              });\n            }\n          } else {\n            var lineInsertion = listType === 'BulletList' ? '- ' : \"\".concat(i + 1, \". \");\n            doc.replaceRange(lineInsertion, {\n              line: i,\n              ch: 0\n            });\n          }\n        }\n      });\n    });\n  } else {\n    var _doc$getCursor = doc.getCursor(),\n        currentLine = _doc$getCursor.line;\n\n    var listToInsert = insertListOrTitle(listType);\n    var lineContent = editor.current.getLine(currentLine);\n    var textToInsert = listToInsert + lineContent;\n    editor.current.setSelection({\n      line: currentLine,\n      ch: 0\n    }, {\n      line: currentLine,\n      ch: lineContent.length\n    });\n    editor.current.replaceSelection(textToInsert);\n  }\n\n  editor.current.focus();\n};\n\nexports.listHandler = listHandler;\n\nvar titleHandler = function titleHandler(editor, titleType) {\n  var _editor$current$getCu2 = editor.current.getCursor(),\n      currentLine = _editor$current$getCu2.line;\n\n  var titleToInsert = insertListOrTitle(titleType);\n  var lineContent = editor.current.getLine(currentLine); // replace hashtags followed by a space in case user want to change the type of title\n\n  var lineWithNoTitle = lineContent.replace(/#{1,6}\\s/g, '').trim();\n  var textToInsert = titleToInsert + lineWithNoTitle;\n  editor.current.setSelection({\n    line: currentLine,\n    ch: 0\n  }, {\n    line: currentLine,\n    ch: lineContent.length\n  });\n  editor.current.replaceSelection(textToInsert);\n  setTimeout(function () {\n    var newLastLineLength = editor.current.getLine(currentLine).length;\n    editor.current.focus();\n    editor.current.setCursor({\n      line: currentLine,\n      ch: newLastLineLength\n    });\n  }, 0);\n};\n\nexports.titleHandler = titleHandler;\n\nvar insertFile = function insertFile(editor, files) {\n  var _editor$current$getCu3 = editor.current.getCursor(),\n      line = _editor$current$getCu3.line,\n      ch = _editor$current$getCu3.ch;\n\n  files.forEach(function (file, i) {\n    var contentLength = editor.current.getLine(line).length;\n    editor.current.setCursor({\n      line: line,\n      ch: contentLength\n    }); // create a new line after first image markdown inserted\n    // or if there is content in current line\n\n    if (i > 0 || i === 0 && ch !== 0) {\n      contentLength = editor.current.getLine(line).length;\n      editor.current.setCursor({\n        line: line,\n        ch: contentLength\n      });\n      line++;\n      editor.current.replaceSelection('\\n');\n    }\n\n    if (file.mime.includes('image')) {\n      editor.current.replaceSelection(\"![\".concat(file.alt, \"](\").concat(file.url, \")\"));\n    } else {\n      editor.current.replaceSelection(\"[\".concat(file.alt, \"](\").concat(file.url, \")\"));\n    }\n  });\n  setTimeout(function () {\n    return editor.current.focus();\n  }, 0);\n}; // NEXT FUNCTIONS FOR QUOTE OR CODE MARKDOWN\n\n\nexports.insertFile = insertFile;\n\nvar insertWithTextToEdit = function insertWithTextToEdit(editor, markdownType, line, contentLength, textToEdit) {\n  var textToInsert = replaceText(markdownType, textToEdit); // remove content after current line\n\n  var contentToMove = editor.current.getRange({\n    line: line + 1,\n    ch: 0\n  }, {\n    line: Infinity,\n    ch: Infinity\n  });\n  editor.current.replaceRange('', {\n    line: line + 1,\n    ch: 0\n  }, {\n    line: Infinity,\n    ch: Infinity\n  }); // remove word that was selected\n  // set cursor end of line + move to next line\n  // add text to insert\n\n  editor.current.replaceSelection('');\n  editor.current.setCursor({\n    line: line,\n    ch: contentLength\n  });\n  editor.current.replaceSelection('\\n');\n  editor.current.replaceSelection(textToInsert);\n\n  if (markdownType === 'Code') {\n    var _editor$current$getCu4 = editor.current.getCursor(),\n        newLine = _editor$current$getCu4.line;\n\n    editor.current.setCursor({\n      line: newLine - 1,\n      ch: textToEdit.length\n    });\n  } // add content we had to remove earlier\n\n\n  editor.current.replaceRange(contentToMove, {\n    line: line + 4,\n    ch: 0\n  }, {\n    line: Infinity,\n    ch: Infinity\n  });\n  editor.current.focus();\n};\n\nvar insertWithoutTextToEdit = function insertWithoutTextToEdit(editor, markdownType, line, contentLength) {\n  var textToInsert = insertText(markdownType); // remove content after current line\n\n  var contentToMove = editor.current.getRange({\n    line: line + 1,\n    ch: 0\n  }, {\n    line: Infinity,\n    ch: Infinity\n  });\n  editor.current.replaceRange('', {\n    line: line + 1,\n    ch: 0\n  }, {\n    line: Infinity,\n    ch: Infinity\n  }); // replace cursor to next line\n\n  editor.current.setCursor({\n    line: line,\n    ch: contentLength\n  });\n  editor.current.replaceSelection('\\n');\n  editor.current.replaceSelection(textToInsert.editedText); // set selection on \"Code\" or \"Quote\" word\n\n  if (markdownType === 'Code') {\n    line += 2;\n    editor.current.setSelection({\n      line: line,\n      ch: 0\n    }, {\n      line: line,\n      ch: 4\n    });\n  } else {\n    line += 1;\n\n    var _editor$current$getCu5 = editor.current.getCursor(),\n        ch = _editor$current$getCu5.ch;\n\n    var endSelection = ch - textToInsert.selection.end;\n    var startSelection = ch - textToInsert.selection.end - textToInsert.selection.start;\n    editor.current.setSelection({\n      line: line,\n      ch: startSelection\n    }, {\n      line: line,\n      ch: endSelection\n    });\n  } // add content we had to remove earlier\n\n\n  editor.current.replaceRange(contentToMove, {\n    line: line + 2,\n    ch: 0\n  }, {\n    line: Infinity,\n    ch: Infinity\n  });\n  editor.current.focus();\n};\n\nvar quoteAndCodeHandler = function quoteAndCodeHandler(editor, markdownType) {\n  var textToEdit = editor.current.getSelection();\n\n  var _editor$current$getCu6 = editor.current.getCursor(),\n      line = _editor$current$getCu6.line;\n\n  var contentLength = editor.current.getLine(line).length;\n\n  if (textToEdit) {\n    insertWithTextToEdit(editor, markdownType, line, contentLength, textToEdit);\n  } else {\n    insertWithoutTextToEdit(editor, markdownType, line, contentLength);\n  }\n};\n\nexports.quoteAndCodeHandler = quoteAndCodeHandler;","map":null,"metadata":{},"sourceType":"script"}