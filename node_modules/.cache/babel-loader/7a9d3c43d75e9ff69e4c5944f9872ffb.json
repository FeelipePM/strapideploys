{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDisplayedModels = exports.generateRelationQueryInfosForComponents = exports.generateRelationQueryInfos = exports.formatListLayoutWithMetas = exports.formatLayoutWithMetas = exports.formatEditRelationsLayoutWithMetas = exports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _utils = require(\"../../../utils\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar getRelationModel = function getRelationModel(targetModel, models) {\n  return models.find(function (model) {\n    return model.uid === targetModel;\n  });\n}; // editRelations is an array of strings...\n\n\nvar formatEditRelationsLayoutWithMetas = function formatEditRelationsLayoutWithMetas(contentTypeConfiguration, models) {\n  var formatted = contentTypeConfiguration.layouts.editRelations.reduce(function (acc, current) {\n    var fieldSchema = (0, _lodash.get)(contentTypeConfiguration, ['attributes', current], {});\n    var targetModelUID = (0, _lodash.get)(contentTypeConfiguration, ['attributes', current, 'targetModel'], null);\n    var targetModelSchema = getRelationModel(targetModelUID, models);\n    var targetModelPluginOptions = targetModelSchema.pluginOptions || {};\n    var metadatas = (0, _lodash.get)(contentTypeConfiguration, ['metadatas', current, 'edit'], {});\n    var size = 6;\n    var queryInfos = generateRelationQueryInfos(contentTypeConfiguration, current, models);\n    acc.push({\n      name: current,\n      size: size,\n      fieldSchema: fieldSchema,\n      metadatas: metadatas,\n      queryInfos: queryInfos,\n      targetModelPluginOptions: targetModelPluginOptions\n    });\n    return acc;\n  }, []);\n  return formatted;\n};\n\nexports.formatEditRelationsLayoutWithMetas = formatEditRelationsLayoutWithMetas;\n\nvar formatLayouts = function formatLayouts(initialData, models) {\n  var data = createMetasSchema(initialData, models);\n  var formattedCTEditLayout = formatLayoutWithMetas(data.contentType, null, models);\n  var ctUid = data.contentType.uid;\n  var formattedEditRelationsLayout = formatEditRelationsLayoutWithMetas(data.contentType, models);\n  var formattedListLayout = formatListLayoutWithMetas(data.contentType, models);\n  (0, _lodash.set)(data, ['contentType', 'layouts', 'edit'], formattedCTEditLayout);\n  (0, _lodash.set)(data, ['contentType', 'layouts', 'editRelations'], formattedEditRelationsLayout);\n  (0, _lodash.set)(data, ['contentType', 'layouts', 'list'], formattedListLayout);\n  Object.keys(data.components).forEach(function (compoUID) {\n    var formattedCompoEditLayout = formatLayoutWithMetas(data.components[compoUID], ctUid, models);\n    (0, _lodash.set)(data, ['components', compoUID, 'layouts', 'edit'], formattedCompoEditLayout);\n  });\n  return data;\n};\n\nvar createMetasSchema = function createMetasSchema(initialData, models) {\n  var data = (0, _utils.mergeMetasWithSchema)((0, _lodash.cloneDeep)(initialData), models, 'contentType');\n  var components = data.components,\n      contentType = data.contentType;\n\n  var formatMetadatas = function formatMetadatas(targetSchema) {\n    return Object.keys(targetSchema.metadatas).reduce(function (acc, current) {\n      var schema = (0, _lodash.get)(targetSchema, ['attributes', current], {});\n      var metadatas = targetSchema.metadatas[current];\n\n      if (schema.type === 'relation') {\n        var relationModel = getRelationModel(schema.targetModel, models);\n        var mainFieldName = metadatas.edit.mainField;\n        var mainField = {\n          name: mainFieldName,\n          schema: (0, _lodash.get)(relationModel, ['attributes', mainFieldName])\n        };\n        metadatas = {\n          list: _objectSpread(_objectSpread({}, metadatas.list), {}, {\n            mainField: mainField\n          }),\n          edit: _objectSpread(_objectSpread({}, metadatas.edit), {}, {\n            mainField: mainField\n          })\n        };\n      }\n\n      acc[current] = metadatas;\n      return acc;\n    }, {});\n  };\n\n  (0, _lodash.set)(data, ['contentType', 'metadatas'], formatMetadatas(contentType));\n  Object.keys(components).forEach(function (compoUID) {\n    var currentCompo = components[compoUID];\n    var updatedMetas = formatMetadatas(currentCompo);\n    (0, _lodash.set)(data, ['components', compoUID, 'metadatas'], updatedMetas);\n  });\n  return data;\n};\n\nvar formatLayoutWithMetas = function formatLayoutWithMetas(contentTypeConfiguration, ctUid, models) {\n  var formatted = contentTypeConfiguration.layouts.edit.reduce(function (acc, current) {\n    var row = current.map(function (attribute) {\n      var fieldSchema = (0, _lodash.get)(contentTypeConfiguration, ['attributes', attribute.name], {});\n\n      var data = _objectSpread(_objectSpread({}, attribute), {}, {\n        fieldSchema: fieldSchema,\n        metadatas: (0, _lodash.get)(contentTypeConfiguration, ['metadatas', attribute.name, 'edit'], {})\n      });\n\n      if (fieldSchema.type === 'relation') {\n        var targetModelUID = fieldSchema.targetModel;\n        var targetModelSchema = getRelationModel(targetModelUID, models);\n        var targetModelPluginOptions = targetModelSchema.pluginOptions || {};\n        var queryInfos = ctUid ? generateRelationQueryInfosForComponents(contentTypeConfiguration, attribute.name, ctUid, models) : generateRelationQueryInfos(contentTypeConfiguration, attribute.name, models);\n        (0, _lodash.set)(data, 'targetModelPluginOptions', targetModelPluginOptions);\n        (0, _lodash.set)(data, 'queryInfos', queryInfos);\n      }\n\n      return data;\n    });\n    acc.push(row);\n    return acc;\n  }, []);\n  return formatted;\n};\n\nexports.formatLayoutWithMetas = formatLayoutWithMetas;\n\nvar formatListLayoutWithMetas = function formatListLayoutWithMetas(contentTypeConfiguration) {\n  var formatted = contentTypeConfiguration.layouts.list.reduce(function (acc, current) {\n    var fieldSchema = (0, _lodash.get)(contentTypeConfiguration, ['attributes', current], {});\n    var metadatas = (0, _lodash.get)(contentTypeConfiguration, ['metadatas', current, 'list'], {});\n    var type = fieldSchema.type;\n\n    if (type === 'relation') {\n      var queryInfos = {\n        endPoint: \"collection-types/\".concat(contentTypeConfiguration.uid),\n        defaultParams: {}\n      };\n      acc.push({\n        key: \"__\".concat(current, \"_key__\"),\n        name: current,\n        fieldSchema: fieldSchema,\n        metadatas: metadatas,\n        queryInfos: queryInfos\n      });\n      return acc;\n    }\n\n    acc.push({\n      key: \"__\".concat(current, \"_key__\"),\n      name: current,\n      fieldSchema: fieldSchema,\n      metadatas: metadatas\n    });\n    return acc;\n  }, []);\n  return formatted;\n};\n\nexports.formatListLayoutWithMetas = formatListLayoutWithMetas;\n\nvar generateRelationQueryInfos = function generateRelationQueryInfos(contentTypeConfiguration, fieldName, models) {\n  var uid = contentTypeConfiguration.uid;\n  var endPoint = (0, _utils.getRequestUrl)(\"relations/\".concat(uid, \"/\").concat(fieldName));\n  var mainField = (0, _lodash.get)(contentTypeConfiguration, ['metadatas', fieldName, 'edit', 'mainField', 'name'], '');\n  var targetModel = (0, _lodash.get)(contentTypeConfiguration, ['attributes', fieldName, 'targetModel'], '');\n  var shouldDisplayRelationLink = getDisplayedModels(models).indexOf(targetModel) !== -1;\n  var queryInfos = {\n    endPoint: endPoint,\n    containsKey: \"\".concat(mainField),\n    defaultParams: {},\n    shouldDisplayRelationLink: shouldDisplayRelationLink\n  };\n  return queryInfos;\n};\n\nexports.generateRelationQueryInfos = generateRelationQueryInfos;\n\nvar generateRelationQueryInfosForComponents = function generateRelationQueryInfosForComponents(contentTypeConfiguration, fieldName, ctUid, models) {\n  var endPoint = (0, _utils.getRequestUrl)(\"relations/\".concat(ctUid, \"/\").concat(fieldName));\n  var mainField = (0, _lodash.get)(contentTypeConfiguration, ['metadatas', fieldName, 'edit', 'mainField', 'name'], '');\n  var targetModel = (0, _lodash.get)(contentTypeConfiguration, ['attributes', fieldName, 'targetModel'], '');\n  var shouldDisplayRelationLink = getDisplayedModels(models).indexOf(targetModel) !== -1;\n  var queryInfos = {\n    endPoint: endPoint,\n    containsKey: \"\".concat(mainField),\n    defaultParams: {\n      _component: contentTypeConfiguration.uid\n    },\n    shouldDisplayRelationLink: shouldDisplayRelationLink\n  };\n  return queryInfos;\n};\n\nexports.generateRelationQueryInfosForComponents = generateRelationQueryInfosForComponents;\n\nvar getDisplayedModels = function getDisplayedModels(models) {\n  return models.filter(function (model) {\n    return model.isDisplayed;\n  }).map(function (_ref) {\n    var uid = _ref.uid;\n    return uid;\n  });\n};\n\nexports.getDisplayedModels = getDisplayedModels;\nvar _default = formatLayouts;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}