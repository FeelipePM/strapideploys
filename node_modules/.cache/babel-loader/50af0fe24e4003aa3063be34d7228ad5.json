{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _get = _interopRequireDefault(require(\"lodash/get\"));\n\nvar yup = _interopRequireWildcard(require(\"yup\"));\n\nvar _helperPlugin = require(\"@strapi/helper-plugin\");\n\nvar _package = _interopRequireDefault(require(\"../../package.json\"));\n\nvar _CheckboxConfirmation = _interopRequireDefault(require(\"./components/CheckboxConfirmation\"));\n\nvar _CMEditViewInjectedComponents = _interopRequireDefault(require(\"./components/CMEditViewInjectedComponents\"));\n\nvar _Initializer = _interopRequireDefault(require(\"./components/Initializer\"));\n\nvar _LocalePicker = _interopRequireDefault(require(\"./components/LocalePicker\"));\n\nvar _middlewares = _interopRequireDefault(require(\"./middlewares\"));\n\nvar _permissions = _interopRequireDefault(require(\"./permissions\"));\n\nvar _pluginId = _interopRequireDefault(require(\"./pluginId\"));\n\nvar _utils = require(\"./utils\");\n\nvar _mutateCTBContentTypeSchema = _interopRequireDefault(require(\"./utils/mutateCTBContentTypeSchema\"));\n\nvar _localizedFields = _interopRequireDefault(require(\"./utils/localizedFields\"));\n\nvar _reducers = _interopRequireDefault(require(\"./hooks/reducers\"));\n\nvar _DeleteModalAdditionalInfos = _interopRequireDefault(require(\"./components/CMListViewInjectedComponents/DeleteModalAdditionalInfos\"));\n\nvar _addLocaleToCollectionTypesLinks = _interopRequireDefault(require(\"./contentManagerHooks/addLocaleToCollectionTypesLinks\"));\n\nvar _addLocaleToSingleTypesLinks = _interopRequireDefault(require(\"./contentManagerHooks/addLocaleToSingleTypesLinks\"));\n\nvar _addColumnToTable = _interopRequireDefault(require(\"./contentManagerHooks/addColumnToTable\"));\n\nvar _mutateEditViewLayout = _interopRequireDefault(require(\"./contentManagerHooks/mutateEditViewLayout\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar name = _package[\"default\"].strapi.name;\nvar _default = {\n  register: function register(app) {\n    app.addMiddlewares(_middlewares[\"default\"]);\n    app.addReducers(_reducers[\"default\"]);\n    app.registerPlugin({\n      id: _pluginId[\"default\"],\n      initializer: _Initializer[\"default\"],\n      isReady: false,\n      name: name\n    });\n  },\n  bootstrap: function bootstrap(app) {\n    // Hooks that mutate the collection types links in order to add the locale filter\n    app.registerHook('Admin/CM/pages/App/mutate-collection-types-links', _addLocaleToCollectionTypesLinks[\"default\"]);\n    app.registerHook('Admin/CM/pages/App/mutate-single-types-links', _addLocaleToSingleTypesLinks[\"default\"]); // Hook that adds a column into the CM's LV table\n\n    app.registerHook('Admin/CM/pages/ListView/inject-column-in-table', _addColumnToTable[\"default\"]); // Hooks that mutates the edit view layout\n\n    app.registerHook('Admin/CM/pages/EditView/mutate-edit-view-layout', _mutateEditViewLayout[\"default\"]); // Add the settings link\n\n    app.addSettingsLink('global', {\n      intlLabel: {\n        id: (0, _utils.getTrad)('plugin.name'),\n        defaultMessage: 'Internationalization'\n      },\n      id: 'internationalization',\n      to: '/settings/internationalization',\n      Component: function () {\n        var _Component = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n          var component;\n          return _regenerator[\"default\"].wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return import(\n                  /* webpackChunkName: \"i18n-settings-page\" */\n                  './pages/SettingsPage');\n\n                case 2:\n                  component = _context.sent;\n                  return _context.abrupt(\"return\", component);\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function Component() {\n          return _Component.apply(this, arguments);\n        }\n\n        return Component;\n      }(),\n      permissions: _permissions[\"default\"].accessMain\n    });\n    app.injectContentManagerComponent('editView', 'informations', {\n      name: 'i18n-locale-filter-edit-view',\n      Component: _CMEditViewInjectedComponents[\"default\"]\n    });\n    app.injectContentManagerComponent('listView', 'actions', {\n      name: 'i18n-locale-filter',\n      Component: _LocalePicker[\"default\"]\n    });\n    app.injectContentManagerComponent('listView', 'deleteModalAdditionalInfos', {\n      name: 'i18n-delete-bullets-in-modal',\n      Component: _DeleteModalAdditionalInfos[\"default\"]\n    });\n    var ctbPlugin = app.getPlugin('content-type-builder');\n\n    if (ctbPlugin) {\n      var ctbFormsAPI = ctbPlugin.apis.forms;\n      ctbFormsAPI.addContentTypeSchemaMutation(_mutateCTBContentTypeSchema[\"default\"]);\n      ctbFormsAPI.components.add({\n        id: 'checkboxConfirmation',\n        component: _CheckboxConfirmation[\"default\"]\n      });\n      ctbFormsAPI.extendContentType({\n        validator: function validator() {\n          return {\n            i18n: yup.object().shape({\n              localized: yup.bool()\n            })\n          };\n        },\n        form: {\n          advanced: function advanced() {\n            return [{\n              name: 'pluginOptions.i18n.localized',\n              description: {\n                id: (0, _utils.getTrad)('plugin.schema.i18n.localized.description-content-type'),\n                defaultMessage: 'Allow you to have content in different locales'\n              },\n              type: 'checkboxConfirmation',\n              intlLabel: {\n                id: (0, _utils.getTrad)('plugin.schema.i18n.localized.label-content-type'),\n                defaultMessage: 'Enable localization for this Content-Type'\n              }\n            }];\n          }\n        }\n      });\n      ctbFormsAPI.extendFields(_localizedFields[\"default\"], {\n        validator: function validator(args) {\n          return {\n            i18n: yup.object().shape({\n              localized: yup.bool().test({\n                name: 'ensure-unique-localization',\n                message: (0, _utils.getTrad)('plugin.schema.i18n.ensure-unique-localization'),\n                test: function test(value) {\n                  if (value === undefined || value) {\n                    return true;\n                  }\n\n                  var unique = (0, _get[\"default\"])(args, ['3', 'modifiedData', 'unique'], null); // Unique fields must be localized\n\n                  if (unique && !value) {\n                    return false;\n                  }\n\n                  return true;\n                }\n              })\n            })\n          };\n        },\n        form: {\n          advanced: function advanced(_ref) {\n            var contentTypeSchema = _ref.contentTypeSchema,\n                forTarget = _ref.forTarget,\n                type = _ref.type,\n                step = _ref.step;\n\n            if (forTarget !== 'contentType') {\n              return [];\n            }\n\n            var hasI18nEnabled = (0, _get[\"default\"])(contentTypeSchema, ['schema', 'pluginOptions', 'i18n', 'localized'], false);\n\n            if (!hasI18nEnabled) {\n              return [];\n            }\n\n            if (type === 'component' && step === '1') {\n              return [];\n            }\n\n            return [{\n              name: 'pluginOptions.i18n.localized',\n              description: {\n                id: (0, _utils.getTrad)('plugin.schema.i18n.localized.description-field'),\n                defaultMessage: 'The field can have different values in each locale'\n              },\n              type: 'checkbox',\n              intlLabel: {\n                id: (0, _utils.getTrad)('plugin.schema.i18n.localized.label-field'),\n                defaultMessage: 'Enable localization for this field'\n              }\n            }];\n          }\n        }\n      });\n    }\n  },\n  registerTrads: function registerTrads(_ref2) {\n    return (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n      var locales, importedTrads;\n      return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              locales = _ref2.locales;\n              _context2.next = 3;\n              return Promise.all(locales.map(function (locale) {\n                return import(\n                /* webpackChunkName: \"i18n-translation-[request]\" */\n                \"./translations/\".concat(locale, \".json\")).then(function (_ref3) {\n                  var data = _ref3[\"default\"];\n                  return {\n                    data: (0, _helperPlugin.prefixPluginTranslations)(data, _pluginId[\"default\"]),\n                    locale: locale\n                  };\n                })[\"catch\"](function () {\n                  return {\n                    data: {},\n                    locale: locale\n                  };\n                });\n              }));\n\n            case 3:\n              importedTrads = _context2.sent;\n              return _context2.abrupt(\"return\", Promise.resolve(importedTrads));\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n};\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}