{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _helperPlugin = require(\"@strapi/helper-plugin\");\n\nvar _Layout = require(\"@strapi/design-system/Layout\");\n\nvar _Main = require(\"@strapi/design-system/Main\");\n\nvar _Button = require(\"@strapi/design-system/Button\");\n\nvar _Check = _interopRequireDefault(require(\"@strapi/icons/Check\"));\n\nvar _ArrowLeft = _interopRequireDefault(require(\"@strapi/icons/ArrowLeft\"));\n\nvar _Link = require(\"@strapi/design-system/Link\");\n\nvar _formik = require(\"formik\");\n\nvar _Stack = require(\"@strapi/design-system/Stack\");\n\nvar _Box = require(\"@strapi/design-system/Box\");\n\nvar _Typography = require(\"@strapi/design-system/Typography\");\n\nvar _Grid = require(\"@strapi/design-system/Grid\");\n\nvar _TextInput = require(\"@strapi/design-system/TextInput\");\n\nvar _Textarea = require(\"@strapi/design-system/Textarea\");\n\nvar _Select = require(\"@strapi/design-system/Select\");\n\nvar _get = _interopRequireDefault(require(\"lodash/get\"));\n\nvar _reactRouterDom = require(\"react-router-dom\");\n\nvar _reactQuery = require(\"react-query\");\n\nvar _utils = require(\"../../../../../utils\");\n\nvar _utils2 = require(\"../../../../../core/utils\");\n\nvar _schema = _interopRequireDefault(require(\"./utils/schema\"));\n\nvar _LoadingView = _interopRequireDefault(require(\"./components/LoadingView\"));\n\nvar _ContentBox = _interopRequireDefault(require(\"./components/ContentBox\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar ApiTokenCreateView = function ApiTokenCreateView() {\n  var _history$location$sta, _apiToken2, _apiToken3, _apiToken4;\n\n  var apiToken;\n  (0, _helperPlugin.useFocusWhenNavigate)();\n\n  var _useIntl = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl.formatMessage;\n\n  var _useOverlayBlocker = (0, _helperPlugin.useOverlayBlocker)(),\n      lockApp = _useOverlayBlocker.lockApp,\n      unlockApp = _useOverlayBlocker.unlockApp;\n\n  var toggleNotification = (0, _helperPlugin.useNotification)();\n  var history = (0, _reactRouterDom.useHistory)();\n\n  var _useTracking = (0, _helperPlugin.useTracking)(),\n      trackUsage = _useTracking.trackUsage;\n\n  var trackUsageRef = (0, _react.useRef)(trackUsage);\n\n  var _useGuidedTour = (0, _helperPlugin.useGuidedTour)(),\n      setCurrentStep = _useGuidedTour.setCurrentStep;\n\n  var _useRouteMatch = (0, _reactRouterDom.useRouteMatch)('/settings/api-tokens/:id'),\n      id = _useRouteMatch.params.id;\n\n  var isCreating = id === 'create';\n  (0, _react.useEffect)(function () {\n    trackUsageRef.current(isCreating ? 'didAddTokenFromList' : 'didEditTokenFromList');\n  }, [isCreating]);\n\n  if ((_history$location$sta = history.location.state) !== null && _history$location$sta !== void 0 && _history$location$sta.apiToken.accessKey) {\n    apiToken = history.location.state.apiToken;\n  }\n\n  var _useQuery = (0, _reactQuery.useQuery)(['api-token', id], /*#__PURE__*/(0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n    var _yield$axiosInstance$, data;\n\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _utils2.axiosInstance.get(\"/admin/api-tokens/\".concat(id));\n\n          case 2:\n            _yield$axiosInstance$ = _context.sent;\n            data = _yield$axiosInstance$.data.data;\n            return _context.abrupt(\"return\", data);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), {\n    enabled: !isCreating && !apiToken,\n    onError: function onError() {\n      toggleNotification({\n        type: 'warning',\n        message: {\n          id: 'notification.error',\n          defaultMessage: 'An error occured'\n        }\n      });\n    }\n  }),\n      status = _useQuery.status,\n      data = _useQuery.data;\n\n  if (data) {\n    apiToken = data;\n  }\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2(body, actions) {\n      var _ref3, response, errors;\n\n      return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              trackUsageRef.current(isCreating ? 'willCreateToken' : 'willEditToken');\n              lockApp();\n              _context2.prev = 2;\n\n              if (!isCreating) {\n                _context2.next = 9;\n                break;\n              }\n\n              _context2.next = 6;\n              return _utils2.axiosInstance.post(\"/admin/api-tokens\", body);\n\n            case 6:\n              _context2.t0 = _context2.sent;\n              _context2.next = 12;\n              break;\n\n            case 9:\n              _context2.next = 11;\n              return _utils2.axiosInstance.put(\"/admin/api-tokens/\".concat(id), body);\n\n            case 11:\n              _context2.t0 = _context2.sent;\n\n            case 12:\n              _ref3 = _context2.t0;\n              response = _ref3.data.data;\n              apiToken = response;\n              toggleNotification({\n                type: 'success',\n                message: formatMessage({\n                  id: 'notification.success.saved',\n                  defaultMessage: 'Saved'\n                })\n              });\n              trackUsageRef.current(isCreating ? 'didCreateToken' : 'didEditToken', {\n                type: apiToken.type\n              });\n\n              if (isCreating) {\n                history.replace(\"/settings/api-tokens/\".concat(response.id), {\n                  apiToken: response\n                });\n                setCurrentStep('apiTokens.success');\n              }\n\n              _context2.next = 25;\n              break;\n\n            case 20:\n              _context2.prev = 20;\n              _context2.t1 = _context2[\"catch\"](2);\n              errors = (0, _utils.formatAPIErrors)(_context2.t1.response.data);\n              actions.setErrors(errors);\n              toggleNotification({\n                type: 'warning',\n                message: (0, _get[\"default\"])(_context2.t1, 'response.data.message', 'notification.error')\n              });\n\n            case 25:\n              unlockApp();\n\n            case 26:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[2, 20]]);\n    }));\n\n    return function handleSubmit(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var isLoading = !isCreating && !apiToken && status !== 'success';\n\n  if (isLoading) {\n    var _apiToken;\n\n    return /*#__PURE__*/_react[\"default\"].createElement(_LoadingView[\"default\"], {\n      apiTokenName: (_apiToken = apiToken) === null || _apiToken === void 0 ? void 0 : _apiToken.name\n    });\n  }\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_Main.Main, null, /*#__PURE__*/_react[\"default\"].createElement(_helperPlugin.SettingsPageTitle, {\n    name: \"API Tokens\"\n  }), /*#__PURE__*/_react[\"default\"].createElement(_formik.Formik, {\n    validationSchema: _schema[\"default\"],\n    validateOnChange: false,\n    initialValues: {\n      name: ((_apiToken2 = apiToken) === null || _apiToken2 === void 0 ? void 0 : _apiToken2.name) || '',\n      description: ((_apiToken3 = apiToken) === null || _apiToken3 === void 0 ? void 0 : _apiToken3.description) || '',\n      type: ((_apiToken4 = apiToken) === null || _apiToken4 === void 0 ? void 0 : _apiToken4.type) || 'read-only'\n    },\n    onSubmit: handleSubmit\n  }, function (_ref4) {\n    var _apiToken5, _apiToken6, _errors$name, _errors$description, _errors$type;\n\n    var errors = _ref4.errors,\n        handleChange = _ref4.handleChange,\n        isSubmitting = _ref4.isSubmitting,\n        values = _ref4.values;\n    return /*#__PURE__*/_react[\"default\"].createElement(_helperPlugin.Form, null, /*#__PURE__*/_react[\"default\"].createElement(_Layout.HeaderLayout, {\n      title: ((_apiToken5 = apiToken) === null || _apiToken5 === void 0 ? void 0 : _apiToken5.name) || formatMessage({\n        id: 'Settings.apiTokens.createPage.title',\n        defaultMessage: 'Create API Token'\n      }),\n      primaryAction: /*#__PURE__*/_react[\"default\"].createElement(_Button.Button, {\n        disabled: isSubmitting,\n        loading: isSubmitting,\n        startIcon: /*#__PURE__*/_react[\"default\"].createElement(_Check[\"default\"], null),\n        type: \"submit\",\n        size: \"L\"\n      }, formatMessage({\n        id: 'app.components.Button.save',\n        defaultMessage: 'Save'\n      })),\n      navigationAction: /*#__PURE__*/_react[\"default\"].createElement(_Link.Link, {\n        startIcon: /*#__PURE__*/_react[\"default\"].createElement(_ArrowLeft[\"default\"], null),\n        to: \"/settings/api-tokens\"\n      }, formatMessage({\n        id: 'app.components.go-back',\n        defaultMessage: 'Back'\n      }))\n    }), /*#__PURE__*/_react[\"default\"].createElement(_Layout.ContentLayout, null, /*#__PURE__*/_react[\"default\"].createElement(_Stack.Stack, {\n      spacing: 6\n    }, Boolean((_apiToken6 = apiToken) === null || _apiToken6 === void 0 ? void 0 : _apiToken6.name) && /*#__PURE__*/_react[\"default\"].createElement(_ContentBox[\"default\"], {\n      apiToken: apiToken.accessKey\n    }), /*#__PURE__*/_react[\"default\"].createElement(_Box.Box, {\n      background: \"neutral0\",\n      hasRadius: true,\n      shadow: \"filterShadow\",\n      paddingTop: 6,\n      paddingBottom: 6,\n      paddingLeft: 7,\n      paddingRight: 7\n    }, /*#__PURE__*/_react[\"default\"].createElement(_Stack.Stack, {\n      spacing: 4\n    }, /*#__PURE__*/_react[\"default\"].createElement(_Typography.Typography, {\n      variant: \"delta\",\n      as: \"h2\"\n    }, formatMessage({\n      id: 'Settings.apiTokens.details',\n      defaultMessage: 'Details'\n    })), /*#__PURE__*/_react[\"default\"].createElement(_Grid.Grid, {\n      gap: 5\n    }, /*#__PURE__*/_react[\"default\"].createElement(_Grid.GridItem, {\n      key: \"name\",\n      col: 6,\n      xs: 12\n    }, /*#__PURE__*/_react[\"default\"].createElement(_TextInput.TextInput, {\n      name: \"name\",\n      error: errors.name ? formatMessage((_errors$name = errors.name) !== null && _errors$name !== void 0 && _errors$name.id ? errors.name : {\n        id: errors.name,\n        defaultMessage: errors.name\n      }) : null,\n      label: formatMessage({\n        id: 'Settings.apiTokens.form.name',\n        defaultMessage: 'Name'\n      }),\n      onChange: handleChange,\n      value: values.name,\n      required: true\n    })), /*#__PURE__*/_react[\"default\"].createElement(_Grid.GridItem, {\n      key: \"description\",\n      col: 6,\n      xs: 12\n    }, /*#__PURE__*/_react[\"default\"].createElement(_Textarea.Textarea, {\n      label: formatMessage({\n        id: 'Settings.apiTokens.form.description',\n        defaultMessage: 'Description'\n      }),\n      name: \"description\",\n      error: errors.description ? formatMessage((_errors$description = errors.description) !== null && _errors$description !== void 0 && _errors$description.id ? errors.description : {\n        id: errors.description,\n        defaultMessage: errors.description\n      }) : null,\n      onChange: handleChange\n    }, values.description)), /*#__PURE__*/_react[\"default\"].createElement(_Grid.GridItem, {\n      key: \"type\",\n      col: 6,\n      xs: 12\n    }, /*#__PURE__*/_react[\"default\"].createElement(_Select.Select, {\n      name: \"type\",\n      label: formatMessage({\n        id: 'Settings.apiTokens.form.type',\n        defaultMessage: 'Token type'\n      }),\n      value: values.type,\n      error: errors.type ? formatMessage((_errors$type = errors.type) !== null && _errors$type !== void 0 && _errors$type.id ? errors.type : {\n        id: errors.type,\n        defaultMessage: errors.type\n      }) : null,\n      onChange: function onChange(value) {\n        handleChange({\n          target: {\n            name: 'type',\n            value: value\n          }\n        });\n      }\n    }, /*#__PURE__*/_react[\"default\"].createElement(_Select.Option, {\n      value: \"read-only\"\n    }, formatMessage({\n      id: 'Settings.apiTokens.types.read-only',\n      defaultMessage: 'Read-only'\n    })), /*#__PURE__*/_react[\"default\"].createElement(_Select.Option, {\n      value: \"full-access\"\n    }, formatMessage({\n      id: 'Settings.apiTokens.types.full-access',\n      defaultMessage: 'Full access'\n    }))))))))));\n  }));\n};\n\nvar _default = ApiTokenCreateView;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}