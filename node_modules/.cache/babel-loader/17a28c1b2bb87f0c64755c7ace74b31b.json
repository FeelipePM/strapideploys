{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar removeKeyInObject = function removeKeyInObject(obj, keyToRemove) {\n  if (!obj) {\n    return obj;\n  }\n\n  return Object.keys(obj).reduce(function (acc, current) {\n    var value = acc[current];\n\n    if (value === null) {\n      return acc;\n    }\n\n    if (Array.isArray(value)) {\n      if (Array.isArray(acc)) {\n        acc[current] = removeKeyInObject(value, keyToRemove);\n        return acc;\n      }\n\n      return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2[\"default\"])({}, current, value.map(function (obj) {\n        return removeKeyInObject(obj, keyToRemove);\n      })));\n    }\n\n    if ((0, _typeof2[\"default\"])(value) === 'object') {\n      if (value._isAMomentObject === true) {\n        return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2[\"default\"])({}, current, value));\n      }\n\n      if (Array.isArray(acc)) {\n        acc[current] = removeKeyInObject(value, keyToRemove);\n        return acc;\n      }\n\n      return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2[\"default\"])({}, current, removeKeyInObject(value, keyToRemove)));\n    }\n\n    if (current === keyToRemove) {\n      delete acc[current];\n    }\n\n    return acc;\n  }, obj);\n};\n\nvar _default = removeKeyInObject;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}