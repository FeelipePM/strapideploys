{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _styledComponents = _interopRequireDefault(require(\"styled-components\"));\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _Dialog = require(\"@strapi/design-system/Dialog\");\n\nvar _Select = require(\"@strapi/design-system/Select\");\n\nvar _Button = require(\"@strapi/design-system/Button\");\n\nvar _Box = require(\"@strapi/design-system/Box\");\n\nvar _Typography = require(\"@strapi/design-system/Typography\");\n\nvar _Flex = require(\"@strapi/design-system/Flex\");\n\nvar _Stack = require(\"@strapi/design-system/Stack\");\n\nvar _ExclamationMarkCircle = _interopRequireDefault(require(\"@strapi/icons/ExclamationMarkCircle\"));\n\nvar _Duplicate = _interopRequireDefault(require(\"@strapi/icons/Duplicate\"));\n\nvar _helperPlugin = require(\"@strapi/helper-plugin\");\n\nvar _utils = require(\"../../../utils\");\n\nvar _utils2 = require(\"./utils\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar StyledTypography = /*#__PURE__*/(0, _styledComponents[\"default\"])(_Typography.Typography).withConfig({\n  displayName: \"CMEditViewCopyLocale__StyledTypography\",\n  componentId: \"sc-kkml6y-0\"\n})([\"svg{margin-right:\", \";fill:none;> g,path{fill:\", \";}}\"], function (_ref) {\n  var theme = _ref.theme;\n  return theme.spaces[2];\n}, function (_ref2) {\n  var theme = _ref2.theme;\n  return theme.colors.primary600;\n});\nvar CenteredTypography = /*#__PURE__*/(0, _styledComponents[\"default\"])(_Typography.Typography).withConfig({\n  displayName: \"CMEditViewCopyLocale__CenteredTypography\",\n  componentId: \"sc-kkml6y-1\"\n})([\"text-align:center;\"]);\n\nvar CMEditViewCopyLocale = function CMEditViewCopyLocale(props) {\n  if (!props.localizations.length) {\n    return null;\n  }\n\n  return /*#__PURE__*/_react[\"default\"].createElement(Content, props);\n};\n\nvar Content = function Content(_ref3) {\n  var _options$;\n\n  var appLocales = _ref3.appLocales,\n      currentLocale = _ref3.currentLocale,\n      localizations = _ref3.localizations,\n      readPermissions = _ref3.readPermissions;\n  var options = (0, _utils2.generateOptions)(appLocales, currentLocale, localizations, readPermissions);\n  var toggleNotification = (0, _helperPlugin.useNotification)();\n\n  var _useIntl = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl.formatMessage;\n\n  var dispatch = (0, _reactRedux.useDispatch)();\n\n  var _useCMEditViewDataMan = (0, _helperPlugin.useCMEditViewDataManager)(),\n      allLayoutData = _useCMEditViewDataMan.allLayoutData,\n      initialData = _useCMEditViewDataMan.initialData,\n      slug = _useCMEditViewDataMan.slug;\n\n  var _useState = (0, _react.useState)(false),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(false),\n      _useState4 = (0, _slicedToArray2[\"default\"])(_useState3, 2),\n      isOpen = _useState4[0],\n      setIsOpen = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(((_options$ = options[0]) === null || _options$ === void 0 ? void 0 : _options$.value) || ''),\n      _useState6 = (0, _slicedToArray2[\"default\"])(_useState5, 2),\n      value = _useState6[0],\n      setValue = _useState6[1];\n\n  var handleConfirmCopyLocale = /*#__PURE__*/function () {\n    var _ref4 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n      var requestURL, _yield$axiosInstance$, response, cleanedData;\n\n      return _regenerator[\"default\"].wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (value) {\n                _context.next = 3;\n                break;\n              }\n\n              handleToggle();\n              return _context.abrupt(\"return\");\n\n            case 3:\n              requestURL = \"/content-manager/collection-types/\".concat(slug, \"/\").concat(value);\n              setIsLoading(true);\n              _context.prev = 5;\n              _context.next = 8;\n              return _utils.axiosInstance.get(requestURL);\n\n            case 8:\n              _yield$axiosInstance$ = _context.sent;\n              response = _yield$axiosInstance$.data;\n              cleanedData = (0, _utils2.cleanData)(response, allLayoutData, localizations);\n              ['createdBy', 'updatedBy', 'publishedAt', 'id', 'createdAt'].forEach(function (key) {\n                if (!initialData[key]) return;\n                cleanedData[key] = initialData[key];\n              });\n              dispatch({\n                type: 'ContentManager/CrudReducer/GET_DATA_SUCCEEDED',\n                data: cleanedData\n              });\n              toggleNotification({\n                type: 'success',\n                message: {\n                  id: (0, _utils.getTrad)('CMEditViewCopyLocale.copy-success'),\n                  defaultMessage: 'Locale copied!'\n                }\n              });\n              _context.next = 20;\n              break;\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](5);\n              console.error(_context.t0);\n              toggleNotification({\n                type: 'warning',\n                message: {\n                  id: (0, _utils.getTrad)('CMEditViewCopyLocale.copy-failure'),\n                  defaultMessage: 'Failed to copy locale'\n                }\n              });\n\n            case 20:\n              _context.prev = 20;\n              setIsLoading(false);\n              handleToggle();\n              return _context.finish(20);\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[5, 16, 20, 24]]);\n    }));\n\n    return function handleConfirmCopyLocale() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var handleChange = function handleChange(value) {\n    setValue(value);\n  };\n\n  var handleToggle = function handleToggle() {\n    setIsOpen(function (prev) {\n      return !prev;\n    });\n  };\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, /*#__PURE__*/_react[\"default\"].createElement(StyledTypography, {\n    fontSize: 2,\n    textColor: \"primary600\",\n    as: \"button\",\n    type: \"button\",\n    onClick: handleToggle\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Flex.Flex, null, /*#__PURE__*/_react[\"default\"].createElement(_Duplicate[\"default\"], {\n    width: \"12px\",\n    height: \"12px\"\n  }), formatMessage({\n    id: (0, _utils.getTrad)('CMEditViewCopyLocale.copy-text'),\n    defaultMessage: 'Fill in from another locale'\n  }))), isOpen && /*#__PURE__*/_react[\"default\"].createElement(_Dialog.Dialog, {\n    onClose: handleToggle,\n    title: \"Confirmation\",\n    isOpen: isOpen\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Dialog.DialogBody, {\n    icon: /*#__PURE__*/_react[\"default\"].createElement(_ExclamationMarkCircle[\"default\"], null)\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Stack.Stack, {\n    spacing: 2\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Flex.Flex, {\n    justifyContent: \"center\"\n  }, /*#__PURE__*/_react[\"default\"].createElement(CenteredTypography, {\n    id: \"confirm-description\"\n  }, formatMessage({\n    id: (0, _utils.getTrad)('CMEditViewCopyLocale.ModalConfirm.content'),\n    defaultMessage: 'Your current content will be erased and filled by the content of the selected locale:'\n  }))), /*#__PURE__*/_react[\"default\"].createElement(_Box.Box, null, /*#__PURE__*/_react[\"default\"].createElement(_Select.Select, {\n    label: formatMessage({\n      id: (0, _utils.getTrad)('Settings.locales.modal.locales.label')\n    }),\n    onChange: handleChange,\n    value: value\n  }, options.map(function (_ref5) {\n    var label = _ref5.label,\n        value = _ref5.value;\n    return /*#__PURE__*/_react[\"default\"].createElement(_Select.Option, {\n      key: value,\n      value: value\n    }, label);\n  }))))), /*#__PURE__*/_react[\"default\"].createElement(_Dialog.DialogFooter, {\n    startAction: /*#__PURE__*/_react[\"default\"].createElement(_Button.Button, {\n      onClick: handleToggle,\n      variant: \"tertiary\"\n    }, formatMessage({\n      id: 'popUpWarning.button.cancel',\n      defaultMessage: 'No, cancel'\n    })),\n    endAction: /*#__PURE__*/_react[\"default\"].createElement(_Button.Button, {\n      variant: \"success\",\n      onClick: handleConfirmCopyLocale,\n      loading: isLoading\n    }, formatMessage({\n      id: (0, _utils.getTrad)('CMEditViewCopyLocale.submit-text'),\n      defaultMessage: 'Yes, fill in'\n    }))\n  })));\n};\n\nCMEditViewCopyLocale.propTypes = {\n  localizations: _propTypes[\"default\"].array.isRequired\n};\nContent.propTypes = {\n  appLocales: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].shape({\n    code: _propTypes[\"default\"].string.isRequired,\n    name: _propTypes[\"default\"].string\n  })).isRequired,\n  currentLocale: _propTypes[\"default\"].string.isRequired,\n  localizations: _propTypes[\"default\"].array.isRequired,\n  readPermissions: _propTypes[\"default\"].array.isRequired\n};\nvar _default = CMEditViewCopyLocale;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}