{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useUpload = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _react = require(\"react\");\n\nvar _reactQuery = require(\"react-query\");\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _utils = require(\"../utils\");\n\nvar _pluginId = _interopRequireDefault(require(\"../pluginId\"));\n\nvar endpoint = \"/\".concat(_pluginId[\"default\"]);\n\nvar uploadAsset = function uploadAsset(asset, cancelToken, onProgress) {\n  var rawFile = asset.rawFile,\n      caption = asset.caption,\n      name = asset.name,\n      alternativeText = asset.alternativeText;\n  var formData = new FormData();\n  formData.append('files', rawFile);\n  formData.append('fileInfo', JSON.stringify({\n    name: name,\n    caption: caption || name,\n    alternativeText: alternativeText || name\n  }));\n  return (0, _utils.axiosInstance)({\n    method: 'post',\n    url: endpoint,\n    headers: {},\n    data: formData,\n    cancelToken: cancelToken.token,\n    onUploadProgress: function onUploadProgress(_ref) {\n      var total = _ref.total,\n          loaded = _ref.loaded;\n      onProgress(loaded / total * 100);\n    }\n  }).then(function (res) {\n    return res.data;\n  });\n};\n\nvar useUpload = function useUpload() {\n  var _useState = (0, _react.useState)(0),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      progress = _useState2[0],\n      setProgress = _useState2[1];\n\n  var _useIntl = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl.formatMessage;\n\n  var queryClient = (0, _reactQuery.useQueryClient)();\n  var tokenRef = (0, _react.useRef)(_axios[\"default\"].CancelToken.source());\n  var mutation = (0, _reactQuery.useMutation)(function (asset) {\n    return uploadAsset(asset, tokenRef.current, setProgress);\n  }, {\n    onSuccess: function onSuccess() {\n      queryClient.refetchQueries(['assets'], {\n        active: true\n      });\n      queryClient.refetchQueries(['asset-count'], {\n        active: true\n      });\n    }\n  });\n\n  var upload = function upload(asset) {\n    return mutation.mutateAsync(asset);\n  };\n\n  var cancel = function cancel() {\n    return tokenRef.current.cancel(formatMessage({\n      id: (0, _utils.getTrad)('modal.upload.cancelled'),\n      defaultMessage: ''\n    }));\n  };\n\n  return {\n    upload: upload,\n    cancel: cancel,\n    error: mutation.error,\n    progress: progress,\n    status: mutation.status\n  };\n};\n\nexports.useUpload = useUpload;","map":null,"metadata":{},"sourceType":"script"}