{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.helperCleanData = exports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _get = _interopRequireDefault(require(\"lodash/get\"));\n\nvar _isArray = _interopRequireDefault(require(\"lodash/isArray\"));\n\nvar _isObject = _interopRequireDefault(require(\"lodash/isObject\"));\n\n/* eslint-disable indent */\nvar cleanData = function cleanData(retrievedData, currentSchema, componentsSchema) {\n  var getType = function getType(schema, attrName) {\n    return (0, _get[\"default\"])(schema, ['attributes', attrName, 'type'], '');\n  };\n\n  var getOtherInfos = function getOtherInfos(schema, arr) {\n    return (0, _get[\"default\"])(schema, ['attributes'].concat((0, _toConsumableArray2[\"default\"])(arr)), '');\n  };\n\n  var recursiveCleanData = function recursiveCleanData(data, schema) {\n    return Object.keys(data).reduce(function (acc, current) {\n      var attrType = getType(schema, current);\n      var value = (0, _get[\"default\"])(data, current);\n      var component = getOtherInfos(schema, [current, 'component']);\n      var isRepeatable = getOtherInfos(schema, [current, 'repeatable']);\n      var cleanedData;\n\n      switch (attrType) {\n        case 'json':\n          cleanedData = JSON.parse(value);\n          break;\n        // TODO\n        // case 'date':\n        //   cleanedData =\n        //     value && value._isAMomentObject === true ? value.format('YYYY-MM-DD') : value;\n        //   break;\n        // case 'datetime':\n        //   cleanedData = value && value._isAMomentObject === true ? value.toISOString() : value;\n        //   break;\n\n        case 'time':\n          {\n            cleanedData = value; // FIXME\n\n            if (value && value.split(':').length < 3) {\n              cleanedData = \"\".concat(value, \":00\");\n            }\n\n            break;\n          }\n\n        case 'media':\n          if (getOtherInfos(schema, [current, 'multiple']) === true) {\n            cleanedData = value ? value.filter(function (file) {\n              return !(file instanceof File);\n            }) : null;\n          } else {\n            cleanedData = (0, _get[\"default\"])(value, 0) instanceof File ? null : (0, _get[\"default\"])(value, 'id', null);\n          }\n\n          break;\n\n        case 'component':\n          if (isRepeatable) {\n            cleanedData = value ? value.map(function (data) {\n              var subCleanedData = recursiveCleanData(data, componentsSchema[component]);\n              return subCleanedData;\n            }) : value;\n          } else {\n            cleanedData = value ? recursiveCleanData(value, componentsSchema[component]) : value;\n          }\n\n          break;\n\n        case 'dynamiczone':\n          cleanedData = value.map(function (componentData) {\n            var subCleanedData = recursiveCleanData(componentData, componentsSchema[componentData.__component]);\n            return subCleanedData;\n          });\n          break;\n\n        default:\n          // The helper is mainly used for the relations in order to just send the id\n          cleanedData = helperCleanData(value, 'id');\n      }\n\n      acc[current] = cleanedData;\n      return acc;\n    }, {});\n  };\n\n  return recursiveCleanData(retrievedData, currentSchema);\n};\n\nvar helperCleanData = function helperCleanData(value, key) {\n  if ((0, _isArray[\"default\"])(value)) {\n    return value.map(function (obj) {\n      return obj[key] ? obj[key] : obj;\n    });\n  }\n\n  if ((0, _isObject[\"default\"])(value)) {\n    return value[key];\n  }\n\n  return value;\n};\n\nexports.helperCleanData = helperCleanData;\nvar _default = cleanData;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}