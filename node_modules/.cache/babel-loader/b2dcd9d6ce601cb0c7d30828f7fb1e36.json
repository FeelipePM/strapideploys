{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _lodash = require(\"lodash\");\n\nvar _helperPlugin = require(\"@strapi/helper-plugin\");\n\nvar removePasswordAndRelationsFieldFromData = function removePasswordAndRelationsFieldFromData(data, contentTypeSchema, componentSchema) {\n  var recursiveCleanData = function recursiveCleanData(data, schema) {\n    return Object.keys(data).reduce(function (acc, current) {\n      var attrType = (0, _helperPlugin.getType)(schema, current);\n      var value = (0, _lodash.get)(data, current);\n      var component = (0, _helperPlugin.getOtherInfos)(schema, [current, 'component']);\n      var isRepeatable = (0, _helperPlugin.getOtherInfos)(schema, [current, 'repeatable']);\n\n      if (attrType === 'dynamiczone') {\n        acc[current] = value.map(function (componentValue) {\n          var subCleanedData = recursiveCleanData(componentValue, componentSchema[componentValue.__component]);\n          return subCleanedData;\n        });\n        return acc;\n      }\n\n      if (attrType === 'component') {\n        if (isRepeatable) {\n          /* eslint-disable indent */\n          acc[current] = value ? value.map(function (compoData) {\n            var subCleanedData = recursiveCleanData(compoData, componentSchema[component]);\n            return subCleanedData;\n          }) : value;\n          /* eslint-enable indent */\n        } else {\n          acc[current] = value ? recursiveCleanData(value, componentSchema[component]) : value;\n        }\n\n        return acc;\n      }\n\n      if (attrType !== 'password' && attrType !== 'relation') {\n        acc[current] = value;\n      }\n\n      return acc;\n    }, {});\n  };\n\n  return recursiveCleanData(data, contentTypeSchema);\n};\n\nvar _default = removePasswordAndRelationsFieldFromData;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}