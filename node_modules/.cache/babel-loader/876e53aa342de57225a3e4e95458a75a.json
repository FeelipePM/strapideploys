{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toAttributesArray = exports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n/**\n * Format the attributes to array instead of an object\n * @params {Object} schemas The content types schema\n * @returns {Object} The formatted content types\n */\nvar formatSchemas = function formatSchemas(schemas) {\n  return Object.keys(schemas).reduce(function (acc, current) {\n    var schema = schemas[current].schema;\n    acc[current] = _objectSpread(_objectSpread({}, schemas[current]), {}, {\n      schema: _objectSpread(_objectSpread({}, schema), {}, {\n        attributes: toAttributesArray(schema.attributes)\n      })\n    });\n    return acc;\n  }, {});\n};\n/**\n *\n * @params {Object} Object of attributes\n * @returns {Object[]} An array of attributes\n */\n\n\nvar toAttributesArray = function toAttributesArray(attributes) {\n  return Object.keys(attributes).reduce(function (acc, current) {\n    acc.push(_objectSpread(_objectSpread({}, attributes[current]), {}, {\n      name: current\n    }));\n    return acc;\n  }, []);\n};\n\nexports.toAttributesArray = toAttributesArray;\nvar _default = formatSchemas;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}