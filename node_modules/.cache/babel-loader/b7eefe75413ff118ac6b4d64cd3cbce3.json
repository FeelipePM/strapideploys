{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _react = require(\"react\");\n\nvar _helperPlugin = require(\"@strapi/helper-plugin\");\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _constants = require(\"../constants\");\n\nvar fetchLocalesList = /*#__PURE__*/function () {\n  var _ref = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(toggleNotification) {\n    var data;\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return (0, _helperPlugin.request)('/i18n/locales', {\n              method: 'GET'\n            });\n\n          case 3:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            toggleNotification({\n              type: 'warning',\n              message: {\n                id: 'notification.error'\n              }\n            });\n            return _context.abrupt(\"return\", _context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 7]]);\n  }));\n\n  return function fetchLocalesList(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar useLocales = function useLocales() {\n  var dispatch = (0, _reactRedux.useDispatch)();\n  var toggleNotification = (0, _helperPlugin.useNotification)();\n  var locales = (0, _reactRedux.useSelector)(function (state) {\n    return state.i18n_locales.locales;\n  });\n  var isLoading = (0, _reactRedux.useSelector)(function (state) {\n    return state.i18n_locales.isLoading;\n  });\n  (0, _react.useEffect)(function () {\n    fetchLocalesList(toggleNotification).then(function (locales) {\n      return dispatch({\n        type: _constants.RESOLVE_LOCALES,\n        locales: locales\n      });\n    });\n  }, [dispatch, toggleNotification]);\n  return {\n    locales: locales,\n    isLoading: isLoading\n  };\n};\n\nvar _default = useLocales;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}