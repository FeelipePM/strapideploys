{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _react = require(\"react\");\n\nvar _helperPlugin = require(\"@strapi/helper-plugin\");\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _get = _interopRequireDefault(require(\"lodash/get\"));\n\nvar _utils = require(\"../../utils\");\n\nvar _constants = require(\"../constants\");\n\nvar addLocale = /*#__PURE__*/function () {\n  var _ref2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(_ref, toggleNotification) {\n    var code, name, isDefault, data;\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            code = _ref.code, name = _ref.name, isDefault = _ref.isDefault;\n            _context.next = 3;\n            return (0, _helperPlugin.request)(\"/i18n/locales\", {\n              method: 'POST',\n              body: {\n                name: name,\n                code: code,\n                isDefault: isDefault\n              }\n            });\n\n          case 3:\n            data = _context.sent;\n            toggleNotification({\n              type: 'success',\n              message: {\n                id: (0, _utils.getTrad)('Settings.locales.modal.create.success')\n              }\n            });\n            return _context.abrupt(\"return\", data);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function addLocale(_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar useAddLocale = function useAddLocale() {\n  var _useState = (0, _react.useState)(false),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var dispatch = (0, _reactRedux.useDispatch)();\n  var toggleNotification = (0, _helperPlugin.useNotification)();\n\n  var persistLocale = /*#__PURE__*/function () {\n    var _ref3 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2(locale) {\n      var newLocale, message;\n      return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setLoading(true);\n              _context2.prev = 1;\n              _context2.next = 4;\n              return addLocale(locale, toggleNotification);\n\n            case 4:\n              newLocale = _context2.sent;\n              dispatch({\n                type: _constants.ADD_LOCALE,\n                newLocale: newLocale\n              });\n              _context2.next = 13;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](1);\n              message = (0, _get[\"default\"])(_context2.t0, 'response.payload.message', null);\n\n              if (message && message.includes('already exists')) {\n                toggleNotification({\n                  type: 'warning',\n                  message: {\n                    id: (0, _utils.getTrad)('Settings.locales.modal.create.alreadyExist')\n                  }\n                });\n              } else {\n                toggleNotification({\n                  type: 'warning',\n                  message: {\n                    id: 'notification.error'\n                  }\n                });\n              }\n\n              throw _context2.t0;\n\n            case 13:\n              _context2.prev = 13;\n              setLoading(false);\n              return _context2.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 8, 13, 16]]);\n    }));\n\n    return function persistLocale(_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return {\n    isAdding: isLoading,\n    addLocale: persistLocale\n  };\n};\n\nvar _default = useAddLocale;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}