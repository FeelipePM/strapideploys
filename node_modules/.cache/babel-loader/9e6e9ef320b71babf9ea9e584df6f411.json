{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _Combobox = require(\"@strapi/design-system/Combobox\");\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _useLocales2 = _interopRequireDefault(require(\"../../hooks/useLocales\"));\n\nvar _useDefaultLocales2 = _interopRequireDefault(require(\"../../hooks/useDefaultLocales\"));\n\nvar _utils = require(\"../../utils\");\n\n/* eslint-disable react/jsx-indent */\n\n/**\n * The component is memoized and needs a useCallback over the onLocaleChange and\n * onClear props to prevent the Select from re-rendering N times when typing on a specific\n * key in a formik form\n */\nvar LocaleSelect = /*#__PURE__*/_react[\"default\"].memo(function (_ref) {\n  var value = _ref.value,\n      onClear = _ref.onClear,\n      onLocaleChange = _ref.onLocaleChange,\n      error = _ref.error;\n\n  var _useIntl = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl.formatMessage;\n\n  var _useDefaultLocales = (0, _useDefaultLocales2[\"default\"])(),\n      defaultLocales = _useDefaultLocales.defaultLocales,\n      isLoading = _useDefaultLocales.isLoading;\n\n  var _useLocales = (0, _useLocales2[\"default\"])(),\n      locales = _useLocales.locales;\n\n  var options = (defaultLocales || []).map(function (locale) {\n    return {\n      label: locale.name,\n      value: locale.code\n    };\n  }).filter(function (_ref2) {\n    var v = _ref2.value;\n    var foundLocale = locales.find(function (_ref3) {\n      var code = _ref3.code;\n      return code === v;\n    });\n    return !foundLocale || foundLocale.code === value;\n  });\n  var computedValue = value || '';\n  return /*#__PURE__*/_react[\"default\"].createElement(_Combobox.Combobox, {\n    \"aria-busy\": isLoading,\n    error: error,\n    label: formatMessage({\n      id: (0, _utils.getTrad)('Settings.locales.modal.locales.label'),\n      defaultMessage: 'Locales'\n    }),\n    value: computedValue,\n    onClear: value ? onClear : undefined,\n    onChange: function onChange(selectedLocaleKey) {\n      var selectedLocale = options.find(function (locale) {\n        return locale.value === selectedLocaleKey;\n      });\n\n      if (selectedLocale) {\n        onLocaleChange({\n          code: selectedLocale.value,\n          displayName: selectedLocale.label\n        });\n      }\n    },\n    placeholder: formatMessage({\n      id: 'components.placeholder.select',\n      defaultMessage: 'Select'\n    })\n  }, options.map(function (option) {\n    return /*#__PURE__*/_react[\"default\"].createElement(_Combobox.ComboboxOption, {\n      value: option.value,\n      key: option.value\n    }, option.label);\n  }));\n});\n\nLocaleSelect.defaultProps = {\n  error: undefined,\n  value: undefined,\n  onClear: function onClear() {},\n  onLocaleChange: function onLocaleChange() {\n    return undefined;\n  }\n};\nLocaleSelect.propTypes = {\n  error: _propTypes[\"default\"].string,\n  onClear: _propTypes[\"default\"].func,\n  onLocaleChange: _propTypes[\"default\"].func,\n  value: _propTypes[\"default\"].string\n};\nvar _default = LocaleSelect;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}