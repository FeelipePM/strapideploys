{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initialState = exports[\"default\"] = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _immer = _interopRequireDefault(require(\"immer\"));\n\nvar _unset = _interopRequireDefault(require(\"lodash/unset\"));\n\nvar _get = _interopRequireDefault(require(\"lodash/get\"));\n\nvar _set2 = _interopRequireDefault(require(\"lodash/set\"));\n\nvar _take = _interopRequireDefault(require(\"lodash/take\"));\n\nvar _utils = require(\"./utils\");\n\nvar _utils2 = require(\"../../utils\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar initialState = {\n  componentsDataStructure: {},\n  contentTypeDataStructure: {},\n  formErrors: {},\n  initialData: {},\n  modifiedData: null,\n  shouldCheckErrors: false,\n  modifiedDZName: null\n};\nexports.initialState = initialState;\n\nvar reducer = function reducer(state, action) {\n  return (// eslint-disable-next-line consistent-return\n    (0, _immer[\"default\"])(state, function (draftState) {\n      switch (action.type) {\n        case 'ADD_NON_REPEATABLE_COMPONENT_TO_FIELD':\n          {\n            (0, _set2[\"default\"])(draftState, ['modifiedData'].concat((0, _toConsumableArray2[\"default\"])(action.keys)), state.componentsDataStructure[action.componentUid]);\n            break;\n          }\n\n        case 'ADD_REPEATABLE_COMPONENT_TO_FIELD':\n          {\n            var currentValue = (0, _get[\"default\"])(state, ['modifiedData'].concat((0, _toConsumableArray2[\"default\"])(action.keys)), []).slice();\n\n            var defaultDataStructure = _objectSpread(_objectSpread({}, state.componentsDataStructure[action.componentUid]), {}, {\n              __temp_key__: (0, _utils2.getMaxTempKey)(currentValue) + 1\n            });\n\n            if (Array.isArray(currentValue)) {\n              currentValue.push(defaultDataStructure);\n            } else {\n              currentValue = [defaultDataStructure];\n            }\n\n            (0, _set2[\"default\"])(draftState, ['modifiedData'].concat((0, _toConsumableArray2[\"default\"])(action.keys)), currentValue);\n\n            if (action.shouldCheckErrors) {\n              draftState.shouldCheckErrors = !state.shouldCheckErrors;\n            }\n\n            break;\n          }\n\n        case 'ADD_COMPONENT_TO_DYNAMIC_ZONE':\n          {\n            draftState.modifiedDZName = action.keys[0];\n\n            if (action.shouldCheckErrors) {\n              draftState.shouldCheckErrors = !state.shouldCheckErrors;\n            }\n\n            var _defaultDataStructure = _objectSpread(_objectSpread({}, state.componentsDataStructure[action.componentUid]), {}, {\n              __component: action.componentUid\n            });\n\n            var _currentValue = (0, _get[\"default\"])(state, ['modifiedData'].concat((0, _toConsumableArray2[\"default\"])(action.keys)), null);\n\n            var updatedValue = _currentValue ? [].concat((0, _toConsumableArray2[\"default\"])(_currentValue), [_defaultDataStructure]) : [_defaultDataStructure];\n            (0, _set2[\"default\"])(draftState, ['modifiedData'].concat((0, _toConsumableArray2[\"default\"])(action.keys)), updatedValue);\n            break;\n          }\n\n        case 'ADD_RELATION':\n          {\n            if (!Array.isArray(action.value) || !action.value.length) {\n              break;\n            }\n\n            var el = action.value[0].value;\n\n            var _currentValue2 = (0, _get[\"default\"])(state, ['modifiedData'].concat((0, _toConsumableArray2[\"default\"])(action.keys)), null);\n\n            if (!_currentValue2) {\n              (0, _set2[\"default\"])(draftState, ['modifiedData'].concat((0, _toConsumableArray2[\"default\"])(action.keys)), [el]);\n              break;\n            }\n\n            (0, _set2[\"default\"])(draftState, ['modifiedData'].concat((0, _toConsumableArray2[\"default\"])(action.keys)), [].concat((0, _toConsumableArray2[\"default\"])(_currentValue2), [el]));\n            break;\n          }\n\n        case 'INIT_FORM':\n          {\n            draftState.formErrors = {};\n            draftState.initialData = action.initialValues;\n            draftState.modifiedData = action.initialValues;\n            draftState.modifiedDZName = null;\n            draftState.shouldCheckErrors = false;\n            break;\n          }\n\n        case 'MOVE_COMPONENT_FIELD':\n          {\n            var _currentValue3 = (0, _get[\"default\"])(state, ['modifiedData'].concat((0, _toConsumableArray2[\"default\"])(action.pathToComponent)));\n\n            var valueToInsert = (0, _get[\"default\"])(state, ['modifiedData'].concat((0, _toConsumableArray2[\"default\"])(action.pathToComponent), [action.dragIndex]));\n\n            var _updatedValue = (0, _utils.moveFields)(_currentValue3, action.dragIndex, action.hoverIndex, valueToInsert);\n\n            (0, _set2[\"default\"])(draftState, ['modifiedData'].concat((0, _toConsumableArray2[\"default\"])(action.pathToComponent)), _updatedValue);\n            break;\n          }\n\n        case 'MOVE_COMPONENT_UP':\n        case 'MOVE_COMPONENT_DOWN':\n          {\n            var currentIndex = action.currentIndex,\n                dynamicZoneName = action.dynamicZoneName,\n                shouldCheckErrors = action.shouldCheckErrors;\n\n            if (shouldCheckErrors) {\n              draftState.shouldCheckErrors = !state.shouldCheckErrors;\n            }\n\n            var _currentValue4 = state.modifiedData[dynamicZoneName];\n            var nextIndex = action.type === 'MOVE_COMPONENT_UP' ? currentIndex - 1 : currentIndex + 1;\n            var _valueToInsert = state.modifiedData[dynamicZoneName][currentIndex];\n\n            var _updatedValue2 = (0, _utils.moveFields)(_currentValue4, currentIndex, nextIndex, _valueToInsert);\n\n            (0, _set2[\"default\"])(draftState, ['modifiedData', action.dynamicZoneName], _updatedValue2);\n            break;\n          }\n\n        case 'MOVE_FIELD':\n          {\n            var _currentValue5 = (0, _get[\"default\"])(state, ['modifiedData'].concat((0, _toConsumableArray2[\"default\"])(action.keys)), []).slice();\n\n            var _valueToInsert2 = (0, _get[\"default\"])(state, ['modifiedData'].concat((0, _toConsumableArray2[\"default\"])(action.keys), [action.dragIndex]));\n\n            var _updatedValue3 = (0, _utils.moveFields)(_currentValue5, action.dragIndex, action.overIndex, _valueToInsert2);\n\n            (0, _set2[\"default\"])(draftState, ['modifiedData'].concat((0, _toConsumableArray2[\"default\"])(action.keys)), _updatedValue3);\n            break;\n          }\n\n        case 'ON_CHANGE':\n          {\n            var _action$keys = (0, _slicedToArray2[\"default\"])(action.keys, 1),\n                nonRepeatableComponentKey = _action$keys[0]; // This is used to set the initialData for inputs\n            // that needs an asynchronous initial value like the UID field\n            // This is just a temporary patch.\n            // TODO : Refactor the default form creation (workflow) to accept async default values.\n\n\n            if (action.shouldSetInitialValue) {\n              (0, _set2[\"default\"])(draftState, ['initialData'].concat((0, _toConsumableArray2[\"default\"])(action.keys)), action.value);\n            } // FIXME: not sure this is needed...\n\n\n            if (action.keys.length === 2 && (0, _get[\"default\"])(state, ['modifiedData', nonRepeatableComponentKey]) === null) {\n              (0, _set2[\"default\"])(draftState, ['modifiedData', nonRepeatableComponentKey], (0, _defineProperty2[\"default\"])({}, action.keys[1], action.value));\n              break;\n            }\n\n            (0, _set2[\"default\"])(draftState, ['modifiedData'].concat((0, _toConsumableArray2[\"default\"])(action.keys)), action.value);\n            break;\n          }\n\n        case 'REMOVE_COMPONENT_FROM_DYNAMIC_ZONE':\n          {\n            if (action.shouldCheckErrors) {\n              draftState.shouldCheckErrors = !state.shouldCheckErrors;\n            }\n\n            draftState.modifiedData[action.dynamicZoneName].splice(action.index, 1);\n            break;\n          }\n\n        case 'REMOVE_COMPONENT_FROM_FIELD':\n          {\n            var componentPathToRemove = ['modifiedData'].concat((0, _toConsumableArray2[\"default\"])(action.keys));\n            (0, _set2[\"default\"])(draftState, componentPathToRemove, null);\n            break;\n          }\n\n        case 'REMOVE_PASSWORD_FIELD':\n          {\n            (0, _unset[\"default\"])(draftState, ['modifiedData'].concat((0, _toConsumableArray2[\"default\"])(action.keys)));\n            break;\n          }\n\n        case 'REMOVE_REPEATABLE_FIELD':\n          {\n            var keysLength = action.keys.length - 1;\n            var pathToComponentData = ['modifiedData'].concat((0, _toConsumableArray2[\"default\"])((0, _take[\"default\"])(action.keys, keysLength)));\n            var hasErrors = Object.keys(state.formErrors).length > 0;\n\n            if (hasErrors) {\n              draftState.shouldCheckErrors = !state.shouldCheckErrors;\n            }\n\n            var _currentValue6 = (0, _get[\"default\"])(state, pathToComponentData).slice();\n\n            _currentValue6.splice(parseInt(action.keys[keysLength], 10), 1);\n\n            (0, _set2[\"default\"])(draftState, pathToComponentData, _currentValue6);\n            break;\n          }\n\n        case 'REMOVE_RELATION':\n          {\n            var pathArray = action.keys.split('.');\n            var pathArrayLength = pathArray.length - 1;\n            var pathToData = ['modifiedData'].concat((0, _toConsumableArray2[\"default\"])((0, _take[\"default\"])(pathArray, pathArrayLength)));\n\n            var _currentValue7 = (0, _get[\"default\"])(state, pathToData).slice();\n\n            var indexToRemove = parseInt(pathArray[pathArrayLength], 10);\n\n            _currentValue7.splice(indexToRemove, 1);\n\n            (0, _set2[\"default\"])(draftState, pathToData, _currentValue7);\n            break;\n          }\n\n        case 'SET_DEFAULT_DATA_STRUCTURES':\n          {\n            draftState.componentsDataStructure = action.componentsDataStructure;\n            draftState.contentTypeDataStructure = action.contentTypeDataStructure;\n            break;\n          }\n\n        case 'SET_FORM_ERRORS':\n          {\n            draftState.modifiedDZName = null;\n            draftState.formErrors = action.errors;\n            break;\n          }\n\n        case 'TRIGGER_FORM_VALIDATION':\n          {\n            var _hasErrors = Object.keys(state.formErrors).length > 0;\n\n            if (_hasErrors) {\n              draftState.shouldCheckErrors = !state.shouldCheckErrors;\n            }\n\n            break;\n          }\n\n        default:\n          return draftState;\n      }\n    })\n  );\n};\n\nvar _default = reducer;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}