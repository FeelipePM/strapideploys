{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _reactQuery = require(\"react-query\");\n\nvar _upperFirst = _interopRequireDefault(require(\"lodash/upperFirst\"));\n\nvar _pick = _interopRequireDefault(require(\"lodash/pick\"));\n\nvar _cloneDeep = _interopRequireDefault(require(\"lodash/cloneDeep\"));\n\nvar _flatMap = _interopRequireDefault(require(\"lodash/flatMap\"));\n\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\n\nvar _get = _interopRequireDefault(require(\"lodash/get\"));\n\nvar _set = _interopRequireDefault(require(\"lodash/set\"));\n\nvar _helperPlugin = require(\"@strapi/helper-plugin\");\n\nvar _reactRouterDom = require(\"react-router-dom\");\n\nvar _Main = require(\"@strapi/design-system/Main\");\n\nvar _Layout = require(\"@strapi/design-system/Layout\");\n\nvar _Link = require(\"@strapi/design-system/Link\");\n\nvar _Button = require(\"@strapi/design-system/Button\");\n\nvar _Box = require(\"@strapi/design-system/Box\");\n\nvar _Typography = require(\"@strapi/design-system/Typography\");\n\nvar _Grid = require(\"@strapi/design-system/Grid\");\n\nvar _Select = require(\"@strapi/design-system/Select\");\n\nvar _Stack = require(\"@strapi/design-system/Stack\");\n\nvar _Divider = require(\"@strapi/design-system/Divider\");\n\nvar _ArrowLeft = _interopRequireDefault(require(\"@strapi/icons/ArrowLeft\"));\n\nvar _Check = _interopRequireDefault(require(\"@strapi/icons/Check\"));\n\nvar _utils = require(\"../../utils\");\n\nvar _reducer = _interopRequireWildcard(require(\"./reducer\"));\n\nvar _init = _interopRequireDefault(require(\"./init\"));\n\nvar _DisplayedFields = _interopRequireDefault(require(\"./components/DisplayedFields\"));\n\nvar _RelationalFields = _interopRequireDefault(require(\"./components/RelationalFields\"));\n\nvar _FormModal = _interopRequireDefault(require(\"./components/FormModal\"));\n\nvar _LayoutDndProvider = _interopRequireDefault(require(\"../../components/LayoutDndProvider\"));\n\nvar _layout = require(\"./utils/layout\");\n\nvar _api = _interopRequireDefault(require(\"./utils/api\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar EditSettingsView = function EditSettingsView(_ref) {\n  var mainLayout = _ref.mainLayout,\n      components = _ref.components,\n      isContentTypeView = _ref.isContentTypeView,\n      slug = _ref.slug,\n      updateLayout = _ref.updateLayout;\n\n  var _useReducer = (0, _react.useReducer)(_reducer[\"default\"], _reducer.initialState, function () {\n    return (0, _init[\"default\"])(_reducer.initialState, mainLayout, components);\n  }),\n      _useReducer2 = (0, _slicedToArray2[\"default\"])(_useReducer, 2),\n      reducerState = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var _useState = (0, _react.useState)(false),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      isDraggingSibling = _useState2[0],\n      setIsDraggingSibling = _useState2[1];\n\n  var _useTracking = (0, _helperPlugin.useTracking)(),\n      trackUsage = _useTracking.trackUsage;\n\n  var toggleNotification = (0, _helperPlugin.useNotification)();\n\n  var _useHistory = (0, _reactRouterDom.useHistory)(),\n      goBack = _useHistory.goBack;\n\n  var _useState3 = (0, _react.useState)(false),\n      _useState4 = (0, _slicedToArray2[\"default\"])(_useState3, 2),\n      isModalFormOpen = _useState4[0],\n      setIsModalFormOpen = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(false),\n      _useState6 = (0, _slicedToArray2[\"default\"])(_useState5, 2),\n      isConfirmDialogOpen = _useState6[0],\n      setIsConfirmDialogOpen = _useState6[1];\n\n  var componentLayouts = reducerState.componentLayouts,\n      initialData = reducerState.initialData,\n      modifiedData = reducerState.modifiedData,\n      metaToEdit = reducerState.metaToEdit,\n      metaForm = reducerState.metaForm;\n\n  var _useIntl = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl.formatMessage;\n\n  var modelName = (0, _get[\"default\"])(mainLayout, ['info', 'displayName'], '');\n  var attributes = (0, _get[\"default\"])(modifiedData, ['attributes'], {});\n  var entryTitleOptions = Object.keys(attributes).filter(function (attr) {\n    var type = (0, _get[\"default\"])(attributes, [attr, 'type'], '');\n    return !['dynamiczone', 'json', 'text', 'relation', 'component', 'boolean', 'date', 'media', 'richtext', 'timestamp'].includes(type) && !!type;\n  });\n  var editLayout = (0, _get[\"default\"])(modifiedData, ['layouts', 'edit'], []);\n  var displayedFields = (0, _flatMap[\"default\"])(editLayout, 'rowContent');\n  var editLayoutRemainingFields = Object.keys(modifiedData.attributes).filter(function (attr) {\n    if (!isContentTypeView) {\n      return true;\n    }\n\n    return (0, _get[\"default\"])(modifiedData, ['attributes', attr, 'type'], '') !== 'relation';\n  }).filter(function (attr) {\n    return (0, _get[\"default\"])(modifiedData, ['metadatas', attr, 'edit', 'visible'], false) === true;\n  }).filter(function (attr) {\n    return displayedFields.findIndex(function (el) {\n      return el.name === attr;\n    }) === -1;\n  }).sort();\n  var relationsLayout = (0, _get[\"default\"])(modifiedData, ['layouts', 'editRelations'], []);\n  var editRelationsLayoutRemainingFields = Object.keys(attributes).filter(function (attr) {\n    return attributes[attr].type === 'relation';\n  }).filter(function (attr) {\n    return relationsLayout.indexOf(attr) === -1;\n  });\n\n  var handleChange = function handleChange(_ref2) {\n    var _ref2$target = _ref2.target,\n        name = _ref2$target.name,\n        value = _ref2$target.value;\n    dispatch({\n      type: 'ON_CHANGE',\n      keys: name.split('.'),\n      value: value\n    });\n  };\n\n  var handleToggleModal = function handleToggleModal() {\n    setIsModalFormOpen(function (prev) {\n      return !prev;\n    });\n  };\n\n  var toggleConfirmDialog = function toggleConfirmDialog() {\n    setIsConfirmDialogOpen(function (prev) {\n      return !prev;\n    });\n  };\n\n  var handleMetaChange = function handleMetaChange(_ref3) {\n    var _ref3$target = _ref3.target,\n        name = _ref3$target.name,\n        value = _ref3$target.value;\n    dispatch({\n      type: 'ON_CHANGE_META',\n      keys: name.split('.'),\n      value: value\n    });\n  };\n\n  var handleSizeChange = function handleSizeChange(_ref4) {\n    var name = _ref4.name,\n        value = _ref4.value;\n    dispatch({\n      type: 'ON_CHANGE_SIZE',\n      name: name,\n      value: value\n    });\n  };\n\n  var handleMetaSubmit = function handleMetaSubmit(e) {\n    e.preventDefault();\n    dispatch({\n      type: 'SUBMIT_META_FORM'\n    });\n    handleToggleModal();\n  };\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    toggleConfirmDialog();\n  };\n\n  var submitMutation = (0, _reactQuery.useMutation)(function (body) {\n    return (0, _api[\"default\"])(body, slug, isContentTypeView);\n  }, {\n    onSuccess: function onSuccess(_ref5) {\n      var data = _ref5.data;\n\n      if (updateLayout) {\n        updateLayout(data.data);\n      }\n\n      dispatch({\n        type: 'SUBMIT_SUCCEEDED'\n      });\n      toggleConfirmDialog();\n      trackUsage('didEditEditSettings');\n    },\n    onError: function onError() {\n      toggleNotification({\n        type: 'warning',\n        message: {\n          id: 'notification.error'\n        }\n      });\n    }\n  });\n  var isSubmittingForm = submitMutation.isLoading;\n\n  var handleConfirm = function handleConfirm() {\n    var body = (0, _pick[\"default\"])((0, _cloneDeep[\"default\"])(modifiedData), ['layouts', 'metadatas', 'settings']);\n    (0, _set[\"default\"])(body, 'layouts.edit', (0, _layout.unformatLayout)(body.layouts.edit));\n    submitMutation.mutate(body);\n  };\n\n  var handleMoveRelation = function handleMoveRelation(fromIndex, toIndex) {\n    dispatch({\n      type: 'MOVE_RELATION',\n      fromIndex: fromIndex,\n      toIndex: toIndex\n    });\n  };\n\n  var handleMoveField = function handleMoveField(fromIndex, toIndex) {\n    dispatch({\n      type: 'MOVE_FIELD',\n      fromIndex: fromIndex,\n      toIndex: toIndex\n    });\n  };\n\n  var moveItem = function moveItem(dragIndex, hoverIndex, dragRowIndex, hoverRowIndex) {\n    // Same row = just reorder\n    if (dragRowIndex === hoverRowIndex) {\n      dispatch({\n        type: 'REORDER_ROW',\n        dragRowIndex: dragRowIndex,\n        dragIndex: dragIndex,\n        hoverIndex: hoverIndex\n      });\n    } else {\n      dispatch({\n        type: 'REORDER_DIFF_ROW',\n        dragIndex: dragIndex,\n        hoverIndex: hoverIndex,\n        dragRowIndex: dragRowIndex,\n        hoverRowIndex: hoverRowIndex\n      });\n    }\n  };\n\n  var moveRow = function moveRow(fromIndex, toIndex) {\n    dispatch({\n      type: 'MOVE_ROW',\n      fromIndex: fromIndex,\n      toIndex: toIndex\n    });\n  };\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_LayoutDndProvider[\"default\"], {\n    isContentTypeView: isContentTypeView,\n    attributes: attributes,\n    modifiedData: modifiedData,\n    slug: slug,\n    componentLayouts: componentLayouts,\n    selectedField: metaToEdit,\n    fieldForm: metaForm,\n    onMoveRelation: handleMoveRelation,\n    onMoveField: handleMoveField,\n    moveRow: moveRow,\n    moveItem: moveItem,\n    setEditFieldToSelect: function setEditFieldToSelect(name) {\n      dispatch({\n        type: 'SET_FIELD_TO_EDIT',\n        name: name\n      });\n      handleToggleModal();\n    },\n    isDraggingSibling: isDraggingSibling,\n    setIsDraggingSibling: setIsDraggingSibling\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Main.Main, null, /*#__PURE__*/_react[\"default\"].createElement(\"form\", {\n    onSubmit: handleSubmit\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Layout.HeaderLayout, {\n    title: formatMessage({\n      id: (0, _utils.getTrad)('components.SettingsViewWrapper.pluginHeader.title'),\n      defaultMessage: \"Configure the view - \".concat((0, _upperFirst[\"default\"])(modelName))\n    }, {\n      name: (0, _upperFirst[\"default\"])(modelName)\n    }),\n    subtitle: formatMessage({\n      id: (0, _utils.getTrad)('components.SettingsViewWrapper.pluginHeader.description.edit-settings'),\n      defaultMessage: 'Customize how the edit view will look like.'\n    }),\n    navigationAction: /*#__PURE__*/_react[\"default\"].createElement(_Link.Link, {\n      startIcon: /*#__PURE__*/_react[\"default\"].createElement(_ArrowLeft[\"default\"], null),\n      onClick: function onClick(e) {\n        e.preventDefault();\n        goBack();\n      },\n      to: \"/\"\n    }, formatMessage({\n      id: 'app.components.go-back',\n      defaultMessage: 'Back'\n    })),\n    primaryAction: /*#__PURE__*/_react[\"default\"].createElement(_Button.Button, {\n      disabled: (0, _isEqual[\"default\"])(initialData, modifiedData),\n      startIcon: /*#__PURE__*/_react[\"default\"].createElement(_Check[\"default\"], null),\n      type: \"submit\"\n    }, formatMessage({\n      id: 'form.button.save',\n      defaultMessage: 'Save'\n    }))\n  }), /*#__PURE__*/_react[\"default\"].createElement(_Layout.ContentLayout, null, /*#__PURE__*/_react[\"default\"].createElement(_Box.Box, {\n    background: \"neutral0\",\n    hasRadius: true,\n    shadow: \"filterShadow\",\n    paddingTop: 6,\n    paddingBottom: 6,\n    paddingLeft: 7,\n    paddingRight: 7\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Stack.Stack, {\n    spacing: 4\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Typography.Typography, {\n    variant: \"delta\",\n    as: \"h2\"\n  }, formatMessage({\n    id: (0, _utils.getTrad)('containers.SettingPage.settings'),\n    defaultMessage: 'Settings'\n  })), /*#__PURE__*/_react[\"default\"].createElement(_Grid.Grid, null, /*#__PURE__*/_react[\"default\"].createElement(_Grid.GridItem, {\n    col: 6,\n    s: 12\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Select.Select, {\n    label: formatMessage({\n      id: (0, _utils.getTrad)('containers.SettingPage.editSettings.entry.title'),\n      defaultMessage: 'Entry title'\n    }),\n    hint: formatMessage({\n      id: (0, _utils.getTrad)('containers.SettingPage.editSettings.entry.title.description'),\n      defaultMessage: 'Set the display field of your entry'\n    }),\n    onChange: function onChange(value) {\n      handleChange({\n        target: {\n          name: 'settings.mainField',\n          value: value === '' ? null : value\n        }\n      });\n    },\n    value: modifiedData.settings.mainField\n  }, entryTitleOptions.map(function (attribute) {\n    return /*#__PURE__*/_react[\"default\"].createElement(_Select.Option, {\n      key: attribute,\n      value: attribute\n    }, attribute);\n  })))), /*#__PURE__*/_react[\"default\"].createElement(_Box.Box, {\n    paddingTop: 2,\n    paddingBottom: 2\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Divider.Divider, null)), /*#__PURE__*/_react[\"default\"].createElement(_Typography.Typography, {\n    variant: \"delta\",\n    as: \"h3\"\n  }, formatMessage({\n    id: (0, _utils.getTrad)('containers.SettingPage.view'),\n    defaultMessage: 'View'\n  })), /*#__PURE__*/_react[\"default\"].createElement(_Grid.Grid, {\n    gap: 4\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Grid.GridItem, {\n    col: isContentTypeView ? 8 : 12,\n    s: 12\n  }, /*#__PURE__*/_react[\"default\"].createElement(_DisplayedFields[\"default\"], {\n    attributes: attributes,\n    editLayout: editLayout,\n    editLayoutRemainingFields: editLayoutRemainingFields,\n    onAddField: function onAddField(field) {\n      dispatch({\n        type: 'ON_ADD_FIELD',\n        name: field\n      });\n    },\n    onRemoveField: function onRemoveField(rowId, index) {\n      dispatch({\n        type: 'REMOVE_FIELD',\n        rowIndex: rowId,\n        fieldIndex: index\n      });\n    }\n  })), isContentTypeView && /*#__PURE__*/_react[\"default\"].createElement(_Grid.GridItem, {\n    col: 4,\n    s: 12\n  }, /*#__PURE__*/_react[\"default\"].createElement(_RelationalFields[\"default\"], {\n    editRelationsLayoutRemainingFields: editRelationsLayoutRemainingFields,\n    relationsLayout: relationsLayout,\n    onAddField: function onAddField(name) {\n      return dispatch({\n        type: 'ADD_RELATION',\n        name: name\n      });\n    },\n    onRemoveField: function onRemoveField(index) {\n      return dispatch({\n        type: 'REMOVE_RELATION',\n        index: index\n      });\n    }\n  })))))), /*#__PURE__*/_react[\"default\"].createElement(_helperPlugin.ConfirmDialog, {\n    bodyText: {\n      id: (0, _utils.getTrad)('popUpWarning.warning.updateAllSettings'),\n      defaultMessage: 'This will modify all your settings'\n    },\n    iconRightButton: /*#__PURE__*/_react[\"default\"].createElement(_Check[\"default\"], null),\n    isConfirmButtonLoading: isSubmittingForm,\n    isOpen: isConfirmDialogOpen,\n    onToggleDialog: toggleConfirmDialog,\n    onConfirm: handleConfirm,\n    variantRightButton: \"success-light\"\n  })), isModalFormOpen && /*#__PURE__*/_react[\"default\"].createElement(_FormModal[\"default\"], {\n    onSubmit: handleMetaSubmit,\n    onToggle: handleToggleModal,\n    type: (0, _get[\"default\"])(attributes, [metaToEdit, 'type'], ''),\n    onMetaChange: handleMetaChange,\n    onSizeChange: handleSizeChange\n  })));\n};\n\nEditSettingsView.defaultProps = {\n  isContentTypeView: false,\n  updateLayout: null\n};\nEditSettingsView.propTypes = {\n  components: _propTypes[\"default\"].object.isRequired,\n  isContentTypeView: _propTypes[\"default\"].bool,\n  mainLayout: _propTypes[\"default\"].shape({\n    attributes: _propTypes[\"default\"].object.isRequired,\n    info: _propTypes[\"default\"].object.isRequired,\n    layouts: _propTypes[\"default\"].shape({\n      list: _propTypes[\"default\"].array.isRequired,\n      editRelations: _propTypes[\"default\"].array.isRequired,\n      edit: _propTypes[\"default\"].array.isRequired\n    }).isRequired,\n    metadatas: _propTypes[\"default\"].object.isRequired,\n    options: _propTypes[\"default\"].object.isRequired\n  }).isRequired,\n  slug: _propTypes[\"default\"].string.isRequired,\n  updateLayout: _propTypes[\"default\"].func\n};\nvar _default = EditSettingsView;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}