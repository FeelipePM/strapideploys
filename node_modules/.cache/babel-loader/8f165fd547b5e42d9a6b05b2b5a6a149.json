{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.urlsToAssets = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _constants = require(\"../constants\");\n\nvar _typeFromMime = require(\"./typeFromMime\");\n\nvar urlsToAssets = /*#__PURE__*/function () {\n  var _ref = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(urls) {\n    var assetPromises, assetsResults, assets;\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            assetPromises = urls.map(function (url) {\n              return _axios[\"default\"].get(url, {\n                responseType: 'blob',\n                timeout: 60000\n              }).then(function (res) {\n                var loadedFile = new File([res.data], res.config.url, {\n                  type: res.headers['content-type']\n                });\n                return {\n                  name: loadedFile.name,\n                  url: res.config.url,\n                  mime: res.headers['content-type'],\n                  rawFile: loadedFile\n                };\n              });\n            }); // Retrieve the assets metadata\n\n            _context.next = 3;\n            return Promise.all(assetPromises);\n\n          case 3:\n            assetsResults = _context.sent;\n            assets = assetsResults.map(function (fullFilledAsset) {\n              return {\n                source: _constants.AssetSource.Url,\n                name: fullFilledAsset.name,\n                type: (0, _typeFromMime.typeFromMime)(fullFilledAsset.mime),\n                url: fullFilledAsset.url,\n                ext: fullFilledAsset.url.split('.').pop(),\n                mime: fullFilledAsset.mime,\n                rawFile: fullFilledAsset.rawFile\n              };\n            });\n            return _context.abrupt(\"return\", assets);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function urlsToAssets(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.urlsToAssets = urlsToAssets;","map":null,"metadata":{},"sourceType":"script"}