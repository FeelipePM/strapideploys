{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initialState = exports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _immer = _interopRequireDefault(require(\"immer\"));\n\nvar _pluralize = _interopRequireDefault(require(\"pluralize\"));\n\nvar _set = _interopRequireDefault(require(\"lodash/set\"));\n\nvar _snakeCase = _interopRequireDefault(require(\"lodash/snakeCase\"));\n\nvar _getRelationType = _interopRequireDefault(require(\"../../utils/getRelationType\"));\n\nvar _nameToSlug = _interopRequireDefault(require(\"../../utils/nameToSlug\"));\n\nvar _createUid = require(\"./utils/createUid\");\n\nvar _relations = require(\"./utils/relations\");\n\nvar actions = _interopRequireWildcard(require(\"./constants\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar initialState = {\n  formErrors: {},\n  modifiedData: {},\n  initialData: {},\n  componentToCreate: {},\n  isCreatingComponentWhileAddingAField: false\n};\nexports.initialState = initialState;\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return (// eslint-disable-next-line consistent-return\n    (0, _immer[\"default\"])(state, function (draftState) {\n      switch (action.type) {\n        case actions.ON_CHANGE:\n          {\n            var keys = action.keys,\n                value = action.value;\n            var obj = state.modifiedData;\n            var hasDefaultValue = Boolean(obj[\"default\"]); // There is no need to remove the default key if the default value isn't defined\n\n            if (hasDefaultValue && keys.length === 1 && keys.includes('type')) {\n              var previousType = obj.type;\n\n              if (previousType && ['date', 'datetime', 'time'].includes(previousType)) {\n                // return obj.updateIn(keys, () => value).remove('default');\n                delete draftState.modifiedData[\"default\"];\n              }\n            }\n\n            (0, _set[\"default\"])(draftState, ['modifiedData'].concat((0, _toConsumableArray2[\"default\"])(keys)), value);\n            break;\n          }\n\n        case actions.ON_CHANGE_RELATION_TARGET:\n          {\n            var _action$target = action.target,\n                oneThatIsCreatingARelationWithAnother = _action$target.oneThatIsCreatingARelationWithAnother,\n                selectedContentTypeFriendlyName = _action$target.selectedContentTypeFriendlyName,\n                targetContentTypeAllowedRelations = _action$target.targetContentTypeAllowedRelations,\n                _value = _action$target.value; // Special case for the admin user...\n\n            var didChangeRelationTypeBecauseOfRestrictedRelation = false;\n            var changedRelationType = null;\n            (0, _set[\"default\"])(draftState, ['modifiedData', 'target'], _value);\n            var modifiedData = state.modifiedData; // Don't change the relation type if the allowed relations are not restricted\n            // TODO: replace with an obj { relation: 'x', bidirctional: true|false } when BE ready\n\n            if (Array.isArray(targetContentTypeAllowedRelations)) {\n              var currentRelationType = (0, _getRelationType[\"default\"])(modifiedData.relation, modifiedData.targetAttribute);\n\n              if (!targetContentTypeAllowedRelations.includes(currentRelationType)) {\n                var relationToSet = targetContentTypeAllowedRelations[0];\n                didChangeRelationTypeBecauseOfRestrictedRelation = true;\n                changedRelationType = relationToSet;\n\n                if (relationToSet === 'oneWay') {\n                  (0, _set[\"default\"])(draftState, ['modifiedData', 'relation'], 'oneToOne');\n                } else if (relationToSet === 'manyWay') {\n                  (0, _set[\"default\"])(draftState, ['modifiedData', 'relation'], 'oneToMany');\n                } else {\n                  (0, _set[\"default\"])(draftState, ['modifiedData', 'relation'], relationToSet);\n                }\n              }\n            }\n\n            var nameToSet;\n\n            if (didChangeRelationTypeBecauseOfRestrictedRelation) {\n              nameToSet = (0, _pluralize[\"default\"])((0, _snakeCase[\"default\"])((0, _nameToSlug[\"default\"])(selectedContentTypeFriendlyName)), (0, _relations.shouldPluralizeName)(changedRelationType));\n            } else {\n              nameToSet = (0, _pluralize[\"default\"])((0, _snakeCase[\"default\"])((0, _nameToSlug[\"default\"])(selectedContentTypeFriendlyName)), (0, _relations.shouldPluralizeName)(modifiedData.relation));\n            }\n\n            (0, _set[\"default\"])(draftState, ['modifiedData', 'name'], nameToSet);\n            var currentTargetAttribute = state.modifiedData.targetAttribute;\n\n            if (currentTargetAttribute === null) {\n              break;\n            } // Changing the target and the relation is either oneWay or manyWay\n            // Case when we need to change the relation to oneWay (ex: admin user)\n\n\n            if (didChangeRelationTypeBecauseOfRestrictedRelation && ['oneWay', 'manyWay'].includes(changedRelationType)) {\n              (0, _set[\"default\"])(draftState, ['modifiedData', 'targetAttribute'], null);\n              break;\n            }\n\n            var targetAttributeToSet = (0, _pluralize[\"default\"])((0, _snakeCase[\"default\"])((0, _nameToSlug[\"default\"])(oneThatIsCreatingARelationWithAnother)), (0, _relations.shouldPluralizeTargetAttribute)(modifiedData.relation));\n            (0, _set[\"default\"])(draftState, ['modifiedData', 'targetAttribute'], targetAttributeToSet);\n            break;\n          }\n\n        case actions.ON_CHANGE_RELATION_TYPE:\n          {\n            var _action$target2 = action.target,\n                _oneThatIsCreatingARelationWithAnother = _action$target2.oneThatIsCreatingARelationWithAnother,\n                _value2 = _action$target2.value;\n            var currentName = state.modifiedData.name; // Switching from oneWay\n\n            if (!['oneWay', 'manyWay'].includes(_value2)) {\n              (0, _set[\"default\"])(draftState, ['modifiedData', 'relation'], _value2);\n              var _currentTargetAttribute = state.modifiedData.targetAttribute;\n              (0, _set[\"default\"])(draftState, ['modifiedData', 'name'], (0, _pluralize[\"default\"])((0, _snakeCase[\"default\"])((0, _nameToSlug[\"default\"])(currentName)), (0, _relations.shouldPluralizeName)(_value2)));\n              (0, _set[\"default\"])(draftState, ['modifiedData', 'targetAttribute'], (0, _pluralize[\"default\"])(_currentTargetAttribute || (0, _snakeCase[\"default\"])((0, _nameToSlug[\"default\"])(_oneThatIsCreatingARelationWithAnother)), (0, _relations.shouldPluralizeTargetAttribute)(_value2)));\n              break;\n            }\n\n            if (_value2 === 'oneWay') {\n              (0, _set[\"default\"])(draftState, ['modifiedData', 'relation'], 'oneToOne');\n              (0, _set[\"default\"])(draftState, ['modifiedData', 'targetAttribute'], null);\n              (0, _set[\"default\"])(draftState, ['modifiedData', 'name'], (0, _pluralize[\"default\"])((0, _snakeCase[\"default\"])(currentName), 1));\n              break;\n            } // manyWay\n\n\n            (0, _set[\"default\"])(draftState, ['modifiedData', 'relation'], 'oneToMany');\n            (0, _set[\"default\"])(draftState, ['modifiedData', 'targetAttribute'], null);\n            (0, _set[\"default\"])(draftState, ['modifiedData', 'name'], (0, _pluralize[\"default\"])((0, _snakeCase[\"default\"])(currentName), 2));\n            break;\n          }\n\n        case actions.RESET_PROPS:\n          return initialState;\n\n        case actions.RESET_PROPS_AND_SET_FORM_FOR_ADDING_AN_EXISTING_COMPO:\n          {\n            // This is run when the user doesn't want to create a new component\n            var nextState = _objectSpread(_objectSpread({}, initialState), {}, {\n              modifiedData: _objectSpread({\n                type: 'component',\n                repeatable: true\n              }, action.options)\n            });\n\n            return nextState;\n          }\n\n        case actions.RESET_PROPS_AND_SAVE_CURRENT_DATA:\n          {\n            // This is run when the user has created a new component\n            var componentToCreate = state.modifiedData.componentToCreate;\n\n            var _modifiedData = _objectSpread(_objectSpread({\n              displayName: componentToCreate.displayName,\n              type: 'component',\n              repeatable: false\n            }, action.options), {}, {\n              component: (0, _createUid.createComponentUid)(componentToCreate.displayName, componentToCreate.category)\n            });\n\n            var _nextState = _objectSpread(_objectSpread({}, initialState), {}, {\n              componentToCreate: componentToCreate,\n              modifiedData: _modifiedData,\n              isCreatingComponentWhileAddingAField: state.modifiedData.createComponent\n            });\n\n            return _nextState;\n          }\n\n        case actions.RESET_PROPS_AND_SET_THE_FORM_FOR_ADDING_A_COMPO_TO_A_DZ:\n          {\n            var createdDZ = state.modifiedData;\n\n            var dataToSet = _objectSpread(_objectSpread({}, createdDZ), {}, {\n              createComponent: true,\n              componentToCreate: {\n                type: 'component'\n              }\n            });\n\n            return _objectSpread(_objectSpread({}, initialState), {}, {\n              modifiedData: dataToSet\n            });\n          }\n\n        case actions.SET_DATA_TO_EDIT:\n          {\n            draftState.modifiedData = action.data;\n            draftState.initialData = action.data;\n            break;\n          }\n\n        case actions.SET_ATTRIBUTE_DATA_SCHEMA:\n          {\n            var attributeType = action.attributeType,\n                isEditing = action.isEditing,\n                modifiedDataToSetForEditing = action.modifiedDataToSetForEditing,\n                nameToSetForRelation = action.nameToSetForRelation,\n                targetUid = action.targetUid,\n                step = action.step,\n                _action$options = action.options,\n                options = _action$options === void 0 ? {} : _action$options;\n\n            if (isEditing) {\n              draftState.modifiedData = modifiedDataToSetForEditing;\n              draftState.initialData = modifiedDataToSetForEditing;\n              break;\n            }\n\n            var _dataToSet;\n\n            if (attributeType === 'component') {\n              if (step === '1') {\n                _dataToSet = {\n                  type: 'component',\n                  createComponent: true,\n                  componentToCreate: {\n                    type: 'component'\n                  }\n                };\n              } else {\n                _dataToSet = _objectSpread(_objectSpread({}, options), {}, {\n                  type: 'component',\n                  repeatable: true\n                });\n              }\n            } else if (attributeType === 'dynamiczone') {\n              _dataToSet = _objectSpread(_objectSpread({}, options), {}, {\n                type: 'dynamiczone',\n                components: []\n              });\n            } else if (attributeType === 'text') {\n              _dataToSet = _objectSpread(_objectSpread({}, options), {}, {\n                type: 'string'\n              });\n            } else if (attributeType === 'number' || attributeType === 'date') {\n              _dataToSet = options;\n            } else if (attributeType === 'media') {\n              _dataToSet = _objectSpread({\n                allowedTypes: ['images', 'files', 'videos', 'audios'],\n                type: 'media',\n                multiple: true\n              }, options);\n            } else if (attributeType === 'enumeration') {\n              _dataToSet = _objectSpread(_objectSpread({}, options), {}, {\n                type: 'enumeration',\n                \"enum\": []\n              });\n            } else if (attributeType === 'relation') {\n              _dataToSet = {\n                name: (0, _snakeCase[\"default\"])(nameToSetForRelation),\n                relation: 'oneToOne',\n                targetAttribute: null,\n                target: targetUid,\n                type: 'relation'\n              };\n            } else {\n              _dataToSet = _objectSpread(_objectSpread({}, options), {}, {\n                type: attributeType,\n                \"default\": null\n              });\n            }\n\n            draftState.modifiedData = _dataToSet;\n            break;\n          }\n\n        case actions.SET_DYNAMIC_ZONE_DATA_SCHEMA:\n          {\n            draftState.modifiedData = action.attributeToEdit;\n            draftState.initialData = action.attributeToEdit;\n            break;\n          }\n\n        case actions.SET_ERRORS:\n          {\n            draftState.formErrors = action.errors;\n            break;\n          }\n\n        default:\n          return draftState;\n      }\n    })\n  );\n};\n\nvar _default = reducer;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}