{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _upperFirst = _interopRequireDefault(require(\"lodash/upperFirst\"));\n\nvar _styledComponents = _interopRequireDefault(require(\"styled-components\"));\n\nvar _ModalLayout = require(\"@strapi/design-system/ModalLayout\");\n\nvar _Typography = require(\"@strapi/design-system/Typography\");\n\nvar _Button = require(\"@strapi/design-system/Button\");\n\nvar _Flex = require(\"@strapi/design-system/Flex\");\n\nvar _Grid = require(\"@strapi/design-system/Grid\");\n\nvar _TextInput = require(\"@strapi/design-system/TextInput\");\n\nvar _ToggleInput = require(\"@strapi/design-system/ToggleInput\");\n\nvar _utils = require(\"../../../utils\");\n\nvar _FieldTypeIcon = _interopRequireDefault(require(\"../../../components/FieldTypeIcon\"));\n\nvar HeaderContainer = /*#__PURE__*/(0, _styledComponents[\"default\"])(_Flex.Flex).withConfig({\n  displayName: \"EditFieldForm__HeaderContainer\",\n  componentId: \"sc-fftkcj-0\"\n})([\"svg{width:\", \"rem;height:\", \"rem;margin-right:\", \";}\"], 32 / 16, 24 / 16, function (_ref) {\n  var theme = _ref.theme;\n  return theme.spaces[3];\n});\n\nvar EditFieldForm = function EditFieldForm(_ref2) {\n  var attributes = _ref2.attributes,\n      fieldForm = _ref2.fieldForm,\n      fieldToEdit = _ref2.fieldToEdit,\n      onCloseModal = _ref2.onCloseModal,\n      onChangeEditLabel = _ref2.onChangeEditLabel,\n      onSubmit = _ref2.onSubmit,\n      type = _ref2.type;\n\n  var _useIntl = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl.formatMessage;\n\n  var relationType = attributes[fieldToEdit].relationType;\n  var shouldDisplaySortToggle = !['media', 'relation'].includes(type);\n\n  if (['oneWay', 'oneToOne', 'manyToOne'].includes(relationType)) {\n    shouldDisplaySortToggle = true;\n  }\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_ModalLayout.ModalLayout, {\n    onClose: onCloseModal,\n    labelledBy: \"title\"\n  }, /*#__PURE__*/_react[\"default\"].createElement(\"form\", {\n    onSubmit: onSubmit\n  }, /*#__PURE__*/_react[\"default\"].createElement(_ModalLayout.ModalHeader, null, /*#__PURE__*/_react[\"default\"].createElement(HeaderContainer, null, /*#__PURE__*/_react[\"default\"].createElement(_FieldTypeIcon[\"default\"], {\n    type: type\n  }), /*#__PURE__*/_react[\"default\"].createElement(_Typography.Typography, {\n    fontWeight: \"bold\",\n    textColor: \"neutral800\",\n    as: \"h2\",\n    id: \"title\"\n  }, formatMessage({\n    id: (0, _utils.getTrad)('containers.ListSettingsView.modal-form.edit-label'),\n    defaultMessage: 'Edit {fieldName}'\n  }, {\n    fieldName: (0, _upperFirst[\"default\"])(fieldToEdit)\n  })))), /*#__PURE__*/_react[\"default\"].createElement(_ModalLayout.ModalBody, null, /*#__PURE__*/_react[\"default\"].createElement(_Grid.Grid, {\n    gap: 4\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Grid.GridItem, {\n    s: 12,\n    col: 6\n  }, /*#__PURE__*/_react[\"default\"].createElement(_TextInput.TextInput, {\n    id: \"label-input\",\n    label: formatMessage({\n      id: (0, _utils.getTrad)('form.Input.label'),\n      defaultMessage: 'Label'\n    }),\n    name: \"label\",\n    onChange: function onChange(e) {\n      return onChangeEditLabel(e);\n    },\n    value: fieldForm.label,\n    hint: formatMessage({\n      id: (0, _utils.getTrad)('form.Input.label.inputDescription'),\n      defaultMessage: \"This value overrides the label displayed in the table's head\"\n    })\n  })), shouldDisplaySortToggle && /*#__PURE__*/_react[\"default\"].createElement(_Grid.GridItem, {\n    s: 12,\n    col: 6\n  }, /*#__PURE__*/_react[\"default\"].createElement(_ToggleInput.ToggleInput, {\n    \"data-testid\": \"Enable sort on this field\",\n    checked: fieldForm.sortable,\n    label: formatMessage({\n      id: (0, _utils.getTrad)('form.Input.sort.field'),\n      defaultMessage: 'Enable sort on this field'\n    }),\n    name: \"sortable\",\n    onChange: function onChange(e) {\n      return onChangeEditLabel({\n        target: {\n          name: 'sortable',\n          value: e.target.checked\n        }\n      });\n    },\n    onLabel: formatMessage({\n      id: 'app.components.ToggleCheckbox.on-label',\n      defaultMessage: 'on'\n    }),\n    offLabel: formatMessage({\n      id: 'app.components.ToggleCheckbox.off-label',\n      defaultMessage: 'off'\n    })\n  })))), /*#__PURE__*/_react[\"default\"].createElement(_ModalLayout.ModalFooter, {\n    startActions: /*#__PURE__*/_react[\"default\"].createElement(_Button.Button, {\n      onClick: onCloseModal,\n      variant: \"tertiary\"\n    }, formatMessage({\n      id: 'app.components.Button.cancel',\n      defaultMessage: 'Cancel'\n    })),\n    endActions: /*#__PURE__*/_react[\"default\"].createElement(_Button.Button, {\n      type: \"submit\"\n    }, formatMessage({\n      id: 'form.button.finish',\n      defaultMessage: 'Finish'\n    }))\n  })));\n};\n\nEditFieldForm.propTypes = {\n  attributes: _propTypes[\"default\"].objectOf(_propTypes[\"default\"].shape({\n    relationType: _propTypes[\"default\"].string\n  })).isRequired,\n  fieldForm: _propTypes[\"default\"].shape({\n    label: _propTypes[\"default\"].string,\n    sortable: _propTypes[\"default\"].bool\n  }).isRequired,\n  fieldToEdit: _propTypes[\"default\"].string.isRequired,\n  onChangeEditLabel: _propTypes[\"default\"].func.isRequired,\n  onCloseModal: _propTypes[\"default\"].func.isRequired,\n  onSubmit: _propTypes[\"default\"].func.isRequired,\n  type: _propTypes[\"default\"].string.isRequired\n};\nvar _default = EditFieldForm;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}