{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.disableAttributesLocalisation = exports[\"default\"] = exports.addLocalisationToFields = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _localizedFields = _interopRequireDefault(require(\"./localizedFields\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar localizedPath = ['pluginOptions', 'i18n', 'localized'];\n\nvar addLocalisationToFields = function addLocalisationToFields(attributes) {\n  return Object.keys(attributes).reduce(function (acc, current) {\n    var currentAttribute = attributes[current];\n\n    if (_localizedFields[\"default\"].includes(currentAttribute.type)) {\n      var i18n = {\n        localized: true\n      };\n      var pluginOptions = currentAttribute.pluginOptions ? _objectSpread(_objectSpread({}, currentAttribute.pluginOptions), {}, {\n        i18n: i18n\n      }) : {\n        i18n: i18n\n      };\n      acc[current] = _objectSpread(_objectSpread({}, currentAttribute), {}, {\n        pluginOptions: pluginOptions\n      });\n      return acc;\n    }\n\n    acc[current] = currentAttribute;\n    return acc;\n  }, {});\n};\n\nexports.addLocalisationToFields = addLocalisationToFields;\n\nvar disableAttributesLocalisation = function disableAttributesLocalisation(attributes) {\n  return Object.keys(attributes).reduce(function (acc, current) {\n    acc[current] = (0, _lodash.omit)(attributes[current], 'pluginOptions.i18n');\n    return acc;\n  }, {});\n};\n\nexports.disableAttributesLocalisation = disableAttributesLocalisation;\n\nvar mutateCTBContentTypeSchema = function mutateCTBContentTypeSchema(nextSchema, prevSchema) {\n  // Don't perform mutations components\n  if (!(0, _lodash.has)(nextSchema, localizedPath)) {\n    return nextSchema;\n  }\n\n  var isNextSchemaLocalized = (0, _lodash.get)(nextSchema, localizedPath, false);\n  var isPrevSchemaLocalized = (0, _lodash.get)(prevSchema, ['schema'].concat(localizedPath), false); // No need to perform modification on the schema, if the i18n feature was not changed\n  // at the ct level\n\n  if (isNextSchemaLocalized && isPrevSchemaLocalized) {\n    return nextSchema;\n  }\n\n  if (isNextSchemaLocalized) {\n    var attributes = addLocalisationToFields(nextSchema.attributes);\n    return _objectSpread(_objectSpread({}, nextSchema), {}, {\n      attributes: attributes\n    });\n  } // Remove the i18n object from the pluginOptions\n\n\n  if (!isNextSchemaLocalized) {\n    var pluginOptions = (0, _lodash.omit)(nextSchema.pluginOptions, 'i18n');\n\n    var _attributes = disableAttributesLocalisation(nextSchema.attributes);\n\n    return _objectSpread(_objectSpread({}, nextSchema), {}, {\n      pluginOptions: pluginOptions,\n      attributes: _attributes\n    });\n  }\n\n  return nextSchema;\n};\n\nvar _default = mutateCTBContentTypeSchema;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}