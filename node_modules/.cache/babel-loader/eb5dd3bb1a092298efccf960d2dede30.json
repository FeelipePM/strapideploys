{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _styledComponents = _interopRequireDefault(require(\"styled-components\"));\n\nvar _helperPlugin = require(\"@strapi/helper-plugin\");\n\nvar _Check = _interopRequireDefault(require(\"@strapi/icons/Check\"));\n\nvar _Cross = _interopRequireDefault(require(\"@strapi/icons/Cross\"));\n\nvar _Loader = _interopRequireDefault(require(\"@strapi/icons/Loader\"));\n\nvar _Box = require(\"@strapi/design-system/Box\");\n\nvar _Flex = require(\"@strapi/design-system/Flex\");\n\nvar _Typography = require(\"@strapi/design-system/Typography\");\n\nvar _Stack = require(\"@strapi/design-system/Stack\");\n\nvar _Grid = require(\"@strapi/design-system/Grid\");\n\n// Being discussed in Notion: create a <Icon /> component in Parts\nvar Icon = /*#__PURE__*/_styledComponents[\"default\"].svg.withConfig({\n  displayName: \"TriggerContainer__Icon\",\n  componentId: \"sc-3cghkc-0\"\n})(function (_ref) {\n  var theme = _ref.theme,\n      color = _ref.color;\n  return \"\\n  width: \".concat(12 / 16, \"rem;\\n  height: \").concat(12 / 16, \"rem;\\n\\n  path {\\n    fill: \").concat(theme.colors[color], \";\\n  }\\n\");\n});\n\nvar Status = function Status(_ref2) {\n  var isPending = _ref2.isPending,\n      statusCode = _ref2.statusCode;\n\n  var _useIntl = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl.formatMessage;\n\n  if (isPending) {\n    return /*#__PURE__*/_react[\"default\"].createElement(_Stack.Stack, {\n      horizontal: true,\n      spacing: 2,\n      style: {\n        alignItems: 'center'\n      }\n    }, /*#__PURE__*/_react[\"default\"].createElement(Icon, {\n      as: _Loader[\"default\"]\n    }), /*#__PURE__*/_react[\"default\"].createElement(_Typography.Typography, null, formatMessage({\n      id: 'Settings.webhooks.trigger.pending',\n      defaultMessage: 'pending'\n    })));\n  }\n\n  if (statusCode >= 200 && statusCode < 300) {\n    return /*#__PURE__*/_react[\"default\"].createElement(_Stack.Stack, {\n      horizontal: true,\n      spacing: 2,\n      style: {\n        alignItems: 'center'\n      }\n    }, /*#__PURE__*/_react[\"default\"].createElement(Icon, {\n      as: _Check[\"default\"],\n      color: \"success700\"\n    }), /*#__PURE__*/_react[\"default\"].createElement(_Typography.Typography, null, formatMessage({\n      id: 'Settings.webhooks.trigger.success',\n      defaultMessage: 'success'\n    })));\n  }\n\n  if (statusCode >= 300) {\n    return /*#__PURE__*/_react[\"default\"].createElement(_Stack.Stack, {\n      horizontal: true,\n      spacing: 2,\n      style: {\n        alignItems: 'center'\n      }\n    }, /*#__PURE__*/_react[\"default\"].createElement(Icon, {\n      as: _Cross[\"default\"],\n      color: \"danger700\"\n    }), /*#__PURE__*/_react[\"default\"].createElement(_Typography.Typography, null, formatMessage({\n      id: 'Settings.error',\n      defaultMessage: 'error'\n    }), \" \", statusCode));\n  }\n\n  return null;\n};\n\nStatus.propTypes = {\n  isPending: _propTypes[\"default\"].bool.isRequired,\n  statusCode: _propTypes[\"default\"].number\n};\nStatus.defaultProps = {\n  statusCode: undefined\n};\n\nvar Message = function Message(_ref3) {\n  var statusCode = _ref3.statusCode,\n      message = _ref3.message;\n\n  var _useIntl2 = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl2.formatMessage;\n\n  if (statusCode >= 200 && statusCode < 300) {\n    return /*#__PURE__*/_react[\"default\"].createElement(_Flex.Flex, {\n      justifyContent: \"flex-end\"\n    }, /*#__PURE__*/_react[\"default\"].createElement(_Typography.Typography, {\n      textColor: \"neutral600\",\n      ellipsis: true\n    }, formatMessage({\n      id: 'Settings.webhooks.trigger.success.label',\n      defaultMessage: 'Trigger succeeded'\n    })));\n  }\n\n  if (statusCode >= 300) {\n    return /*#__PURE__*/_react[\"default\"].createElement(_Flex.Flex, {\n      justifyContent: \"flex-end\"\n    }, /*#__PURE__*/_react[\"default\"].createElement(_Flex.Flex, {\n      maxWidth: (0, _helperPlugin.pxToRem)(250),\n      justifyContent: \"flex-end\",\n      title: message\n    }, /*#__PURE__*/_react[\"default\"].createElement(_Typography.Typography, {\n      ellipsis: true,\n      textColor: \"neutral600\"\n    }, message)));\n  }\n\n  return null;\n};\n\nMessage.propTypes = {\n  statusCode: _propTypes[\"default\"].number,\n  message: _propTypes[\"default\"].string\n};\nMessage.defaultProps = {\n  statusCode: undefined,\n  message: undefined\n};\n\nvar CancelButton = function CancelButton(_ref4) {\n  var onCancel = _ref4.onCancel;\n\n  var _useIntl3 = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl3.formatMessage;\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_Flex.Flex, {\n    justifyContent: \"flex-end\"\n  }, /*#__PURE__*/_react[\"default\"].createElement(\"button\", {\n    onClick: onCancel,\n    type: \"button\"\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Stack.Stack, {\n    horizontal: true,\n    spacing: 2,\n    style: {\n      alignItems: 'center'\n    }\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Typography.Typography, {\n    textColor: \"neutral400\"\n  }, formatMessage({\n    id: 'Settings.webhooks.trigger.cancel',\n    defaultMessage: 'cancel'\n  })), /*#__PURE__*/_react[\"default\"].createElement(Icon, {\n    as: _Cross[\"default\"],\n    color: \"neutral400\"\n  }))));\n};\n\nCancelButton.propTypes = {\n  onCancel: _propTypes[\"default\"].func.isRequired\n};\n\nvar TriggerContainer = function TriggerContainer(_ref5) {\n  var isPending = _ref5.isPending,\n      onCancel = _ref5.onCancel,\n      response = _ref5.response;\n  var statusCode = response.statusCode,\n      message = response.message;\n\n  var _useIntl4 = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl4.formatMessage;\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_Box.Box, {\n    background: \"neutral0\",\n    padding: 5,\n    shadow: \"filterShadow\",\n    hasRadius: true\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Grid.Grid, {\n    gap: 4,\n    style: {\n      alignItems: 'center'\n    }\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Grid.GridItem, {\n    col: 3\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Typography.Typography, null, formatMessage({\n    id: 'Settings.webhooks.trigger.test',\n    defaultMessage: 'Test-trigger'\n  }))), /*#__PURE__*/_react[\"default\"].createElement(_Grid.GridItem, {\n    col: 3\n  }, /*#__PURE__*/_react[\"default\"].createElement(Status, {\n    isPending: isPending,\n    statusCode: statusCode\n  })), /*#__PURE__*/_react[\"default\"].createElement(_Grid.GridItem, {\n    col: 6\n  }, !isPending ? /*#__PURE__*/_react[\"default\"].createElement(Message, {\n    statusCode: statusCode,\n    message: message\n  }) : /*#__PURE__*/_react[\"default\"].createElement(CancelButton, {\n    onCancel: onCancel\n  }))));\n};\n\nTriggerContainer.defaultProps = {\n  isPending: false,\n  onCancel: function onCancel() {},\n  response: {}\n};\nTriggerContainer.propTypes = {\n  isPending: _propTypes[\"default\"].bool,\n  onCancel: _propTypes[\"default\"].func,\n  response: _propTypes[\"default\"].object\n};\nvar _default = TriggerContainer;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}