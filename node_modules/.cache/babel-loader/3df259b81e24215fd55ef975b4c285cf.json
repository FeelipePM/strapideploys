{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sortContentType = exports.getCreatedAndModifiedComponents = exports.getComponentsToPost = exports.formatMainDataType = exports.formatComponent = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _pluginId = _interopRequireDefault(require(\"../../../pluginId\"));\n\nvar _makeUnique = _interopRequireDefault(require(\"../../../utils/makeUnique\"));\n\nvar _excluded = [\"name\"];\n\nvar getCreatedAndModifiedComponents = function getCreatedAndModifiedComponents(allComponents, initialComponents) {\n  var componentUIDsToReturn = Object.keys(allComponents).filter(function (compoUid) {\n    var currentCompo = (0, _lodash.get)(allComponents, compoUid, {});\n    var initialCompo = (0, _lodash.get)(initialComponents, compoUid, {});\n    var hasComponentBeenCreated = (0, _lodash.get)(currentCompo, ['isTemporary'], false);\n    var hasComponentBeenModified = !(0, _lodash.isEqual)(currentCompo, initialCompo);\n    return hasComponentBeenCreated || hasComponentBeenModified;\n  });\n  return (0, _makeUnique[\"default\"])(componentUIDsToReturn);\n};\n\nexports.getCreatedAndModifiedComponents = getCreatedAndModifiedComponents;\n\nvar formatComponent = function formatComponent(component, mainDataUID) {\n  var formattedAttributes = formatAttributes((0, _lodash.get)(component, 'schema.attributes', []), mainDataUID); // Set tmpUID if the component has just been created\n  // Keep the uid if the component already exists\n\n  var compoUID = (0, _lodash.get)(component, 'isTemporary', false) ? {\n    tmpUID: component.uid\n  } : {\n    uid: component.uid\n  };\n  var formattedComponent = Object.assign({}, compoUID, {\n    category: component.category\n  }, // Omit the attributes since we want to format them\n  (0, _lodash.omit)(component.schema, 'attributes'), // Add the formatted attributes\n  {\n    attributes: formattedAttributes\n  });\n  return formattedComponent;\n};\n\nexports.formatComponent = formatComponent;\n\nvar formatMainDataType = function formatMainDataType(data) {\n  var isComponent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var mainDataUID = (0, _lodash.get)(data, 'uid', null);\n  var formattedAttributes = formatAttributes((0, _lodash.get)(data, 'schema.attributes', []), mainDataUID);\n  var initObj = isComponent ? {\n    category: (0, _lodash.get)(data, 'category', '')\n  } : {};\n  var formattedContentType = Object.assign(initObj, (0, _lodash.omit)(data.schema, 'attributes'), {\n    attributes: formattedAttributes\n  });\n  delete formattedContentType.uid;\n  delete formattedContentType.isTemporary;\n  delete formattedContentType.visible;\n  delete formattedContentType.restrictRelationsTo;\n  return formattedContentType;\n};\n/**\n *\n * @param {Object} attributes\n * @param {String} mainDataUID uid of the main data type\n */\n\n\nexports.formatMainDataType = formatMainDataType;\n\nvar formatAttributes = function formatAttributes(attributes, mainDataUID) {\n  return attributes.reduce(function (acc, _ref) {\n    var name = _ref.name,\n        rest = (0, _objectWithoutProperties2[\"default\"])(_ref, _excluded);\n    var currentAttribute = rest;\n    var hasARelationWithMainDataUID = currentAttribute.target === mainDataUID;\n    var isRelationType = currentAttribute.type === 'relation';\n    var currentTargetAttribute = (0, _lodash.get)(currentAttribute, 'targetAttribute', null);\n\n    if (!hasARelationWithMainDataUID) {\n      if (isRelationType) {\n        var relationAttr = Object.assign({}, currentAttribute, {\n          targetAttribute: formatRelationTargetAttribute(currentTargetAttribute)\n        });\n        acc[name] = removeNullKeys(relationAttr);\n      } else {\n        acc[name] = removeNullKeys(currentAttribute);\n      }\n    }\n\n    if (hasARelationWithMainDataUID) {\n      var target = currentAttribute.target;\n      var formattedRelationAttribute = Object.assign({}, currentAttribute, {\n        target: target,\n        targetAttribute: formatRelationTargetAttribute(currentTargetAttribute)\n      });\n      acc[name] = removeNullKeys(formattedRelationAttribute);\n    }\n\n    return acc;\n  }, {});\n};\n\nvar formatRelationTargetAttribute = function formatRelationTargetAttribute(targetAttribute) {\n  return targetAttribute === '-' ? null : targetAttribute;\n};\n\nvar removeNullKeys = function removeNullKeys(obj) {\n  return Object.keys(obj).reduce(function (acc, current) {\n    if (obj[current] !== null && current !== 'plugin') {\n      acc[current] = obj[current];\n    }\n\n    return acc;\n  }, {});\n};\n\nvar getComponentsToPost = function getComponentsToPost(allComponents, initialComponents, mainDataUID) {\n  var isCreatingData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var componentsToFormat = getCreatedAndModifiedComponents(allComponents, initialComponents);\n  var formattedComponents = componentsToFormat.map(function (compoUID) {\n    var currentCompo = (0, _lodash.get)(allComponents, compoUID, {});\n    var formattedComponent = formatComponent(currentCompo, mainDataUID, isCreatingData);\n    return formattedComponent;\n  });\n  return formattedComponents;\n};\n\nexports.getComponentsToPost = getComponentsToPost;\n\nvar sortContentType = function sortContentType(types) {\n  return (0, _lodash.sortBy)(Object.keys(types).map(function (uid) {\n    return {\n      visible: types[uid].schema.visible,\n      name: uid,\n      title: types[uid].schema.displayName,\n      plugin: types[uid].plugin || null,\n      uid: uid,\n      to: \"/plugins/\".concat(_pluginId[\"default\"], \"/content-types/\").concat(uid),\n      kind: types[uid].schema.kind,\n      restrictRelationsTo: types[uid].schema.restrictRelationsTo\n    };\n  }).filter(function (obj) {\n    return obj !== null;\n  }), function (obj) {\n    return (0, _lodash.camelCase)(obj.title);\n  });\n};\n\nexports.sortContentType = sortContentType;","map":null,"metadata":{},"sourceType":"script"}