{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _toString = _interopRequireDefault(require(\"lodash/toString\"));\n\nvar _parseISO = _interopRequireDefault(require(\"date-fns/parseISO\"));\n\nvar _getNumberOfDecimals = require(\"./utils/getNumberOfDecimals\");\n\nvar CellValue = function CellValue(_ref) {\n  var type = _ref.type,\n      value = _ref.value;\n\n  var _useIntl = (0, _reactIntl.useIntl)(),\n      formatDate = _useIntl.formatDate,\n      formatTime = _useIntl.formatTime,\n      formatNumber = _useIntl.formatNumber;\n\n  var formattedValue = value;\n\n  if (type === 'date') {\n    formattedValue = formatDate((0, _parseISO[\"default\"])(value), {\n      dateStyle: 'full'\n    });\n  }\n\n  if (type === 'datetime') {\n    formattedValue = formatDate(value, {\n      dateStyle: 'full',\n      timeStyle: 'short'\n    });\n  }\n\n  if (type === 'time') {\n    var _value$split = value.split(':'),\n        _value$split2 = (0, _slicedToArray2[\"default\"])(_value$split, 3),\n        hour = _value$split2[0],\n        minute = _value$split2[1],\n        second = _value$split2[2];\n\n    var date = new Date();\n    date.setHours(hour);\n    date.setMinutes(minute);\n    date.setSeconds(second);\n    formattedValue = formatTime(date, {\n      numeric: 'auto',\n      style: 'short'\n    });\n  }\n\n  if (['float', 'decimal'].includes(type)) {\n    var numberOfDecimals = (0, _getNumberOfDecimals.getNumberOfDecimals)(value);\n    formattedValue = formatNumber(value, {\n      minimumFractionDigits: numberOfDecimals,\n      maximumFractionDigits: numberOfDecimals\n    });\n  }\n\n  if (['integer', 'biginteger'].includes(type)) {\n    formattedValue = formatNumber(value, {\n      maximumFractionDigits: 0\n    });\n  }\n\n  return (0, _toString[\"default\"])(formattedValue);\n};\n\nCellValue.propTypes = {\n  type: _propTypes[\"default\"].string.isRequired,\n  value: _propTypes[\"default\"].any.isRequired\n};\nvar _default = CellValue;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}