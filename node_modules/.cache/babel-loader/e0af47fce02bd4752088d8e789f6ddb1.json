{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unformatLayout = exports.setFieldSize = exports.getRowSize = exports.getFieldSize = exports.getDefaultInputSize = exports.formatLayout = exports.createLayout = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n/* eslint-disable indent */\nvar getRowSize = function getRowSize(arr) {\n  return arr.reduce(function (sum, value) {\n    return sum + value.size;\n  }, 0);\n};\n\nexports.getRowSize = getRowSize;\n\nvar createLayout = function createLayout(arr) {\n  return arr.reduce(function (acc, current, index) {\n    var row = {\n      rowId: index,\n      rowContent: current\n    };\n    return acc.concat(row);\n  }, []);\n};\n\nexports.createLayout = createLayout;\n\nvar formatLayout = function formatLayout(arr) {\n  return arr.reduce(function (acc, current) {\n    var toPush = [];\n    var currentRow = current.rowContent.reduce(function (acc2, curr) {\n      var acc2Size = getRowSize(acc2);\n\n      if (curr.name === '_TEMP_') {\n        return acc2;\n      }\n\n      if (acc2Size + curr.size <= 12) {\n        acc2.push(curr);\n      } else {\n        toPush.push(curr);\n      }\n\n      return acc2;\n    }, []);\n    var rowId = acc.length === 0 ? 0 : Math.max.apply(Math, acc.map(function (o) {\n      return o.rowId;\n    })) + 1;\n    var currentRowSize = getRowSize(currentRow);\n\n    if (currentRowSize < 12) {\n      currentRow.push({\n        name: '_TEMP_',\n        size: 12 - currentRowSize\n      });\n    }\n\n    acc.push({\n      rowId: rowId,\n      rowContent: currentRow\n    });\n\n    if (toPush.length > 0) {\n      var toPushSize = getRowSize(toPush);\n\n      if (toPushSize < 12) {\n        toPush.push({\n          name: '_TEMP_',\n          size: 12 - toPushSize\n        });\n      }\n\n      acc.push({\n        rowId: rowId + 1,\n        rowContent: toPush\n      });\n      toPush = [];\n    }\n\n    return acc;\n  }, []).filter(function (row) {\n    return row.rowContent.length > 0;\n  }).filter(function (row) {\n    if (row.rowContent.length === 1) {\n      return row.rowContent[0].name !== '_TEMP_';\n    }\n\n    return true;\n  });\n};\n\nexports.formatLayout = formatLayout;\n\nvar unformatLayout = function unformatLayout(arr) {\n  return arr.reduce(function (acc, current) {\n    var currentRow = current.rowContent.filter(function (content) {\n      return content.name !== '_TEMP_';\n    });\n    return acc.concat([currentRow]);\n  }, []);\n};\n\nexports.unformatLayout = unformatLayout;\n\nvar getDefaultInputSize = function getDefaultInputSize(type) {\n  switch (type) {\n    case 'boolean':\n    case 'date':\n    case 'integer':\n    case 'float':\n    case 'biginteger':\n    case 'decimal':\n    case 'time':\n      return 4;\n\n    case 'json':\n    case 'component':\n    case 'richtext':\n    case 'dynamiczone':\n      return 12;\n\n    default:\n      return 6;\n  }\n};\n\nexports.getDefaultInputSize = getDefaultInputSize;\n\nvar getFieldSize = function getFieldSize(name) {\n  var layouts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return layouts.reduce(function (acc, _ref) {\n    var _rowContent$find$size, _rowContent$find;\n\n    var rowContent = _ref.rowContent;\n    var size = (_rowContent$find$size = (_rowContent$find = rowContent.find(function (row) {\n      return row.name === name;\n    })) === null || _rowContent$find === void 0 ? void 0 : _rowContent$find.size) !== null && _rowContent$find$size !== void 0 ? _rowContent$find$size : null;\n\n    if (size) {\n      acc = size;\n    }\n\n    return acc;\n  }, null);\n};\n\nexports.getFieldSize = getFieldSize;\n\nvar setFieldSize = function setFieldSize(name, size) {\n  var layouts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  return layouts.map(function (row) {\n    row.rowContent = row.rowContent.map(function (column) {\n      if (column.name === name) {\n        return _objectSpread(_objectSpread({}, column), {}, {\n          size: size\n        });\n      }\n\n      return column;\n    });\n    return row;\n  });\n};\n\nexports.setFieldSize = setFieldSize;","map":null,"metadata":{},"sourceType":"script"}