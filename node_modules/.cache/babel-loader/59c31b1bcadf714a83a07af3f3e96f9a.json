{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findLayouts = exports[\"default\"] = exports.createDefaultPropertyForms = exports.createDefaultPropertiesForm = exports.createDefaultConditionsForm = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _findMatchingPermissions = _interopRequireDefault(require(\"./findMatchingPermissions\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n/**\n * Creates the default condition form: { [conditionId]: false }\n * @param {object} conditions.id Id of the condition\n * @returns {object}\n */\nvar createDefaultConditionsForm = function createDefaultConditionsForm(conditions) {\n  var initialConditions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return conditions.reduce(function (acc, current) {\n    acc[current.id] = initialConditions.indexOf(current.id) !== -1;\n    return acc;\n  }, {});\n};\n/**\n * Create the default form a property (fields, locales) with all the values\n * set to false\n * @param {object} property.children ex: {children: [{value: 'foo',}]}\n * @param {array<string>} The found property values retrieved from the role associated permissions\n * @returns {object} ex: { foo: false }\n *\n */\n\n\nexports.createDefaultConditionsForm = createDefaultConditionsForm;\n\nvar createDefaultPropertyForms = function createDefaultPropertyForms(_ref, propertyValues) {\n  var children = _ref.children;\n  var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return children.reduce(function (acc, current) {\n    if (current.children) {\n      return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2[\"default\"])({}, current.value, createDefaultPropertyForms(current, propertyValues, \"\".concat(prefix).concat(current.value, \".\"))));\n    }\n\n    var hasProperty = propertyValues.indexOf(\"\".concat(prefix).concat(current.value)) !== -1;\n    acc[current.value] = hasProperty;\n    return acc;\n  }, {});\n};\n/**\n * Creates the default form for all the properties found in a content type's layout\n * @param {array<string>} propertiesArray ex; ['fields', 'locales']\n * @param {object} ctLayout layout of the content type ex:\n * ctLayout = {\n *  properties: [{\n *    value: 'fields',\n *    children: [{value: 'name'}]\n *  }\n * }\n * @returns {object} In this case it will return { fields: { name: false } }\n */\n\n\nexports.createDefaultPropertyForms = createDefaultPropertyForms;\n\nvar createDefaultPropertiesForm = function createDefaultPropertiesForm(propertiesArray, ctLayout, matchingPermission) {\n  return propertiesArray.reduce(function (acc, currentPropertyName) {\n    var foundProperty = ctLayout.properties.find(function (_ref2) {\n      var value = _ref2.value;\n      return value === currentPropertyName;\n    });\n\n    if (foundProperty) {\n      var matchingPermissionPropertyValues = (0, _lodash.get)(matchingPermission, ['properties', foundProperty.value], []);\n      var propertyForm = createDefaultPropertyForms(foundProperty, matchingPermissionPropertyValues);\n      acc.properties[currentPropertyName] = propertyForm;\n    }\n\n    return acc;\n  }, {\n    properties: {}\n  });\n};\n/**\n * Return an object of content types layout of an action's subject ex: { adress: {uid, label, properties } }\n * @param {array<object>} allLayouts All the content types' layout\n * @param {object} subjects\n */\n\n\nexports.createDefaultPropertiesForm = createDefaultPropertiesForm;\n\nvar findLayouts = function findLayouts(allLayouts, subjects) {\n  return subjects.reduce(function (acc, current) {\n    var foundLayout = allLayouts.find(function (_ref3) {\n      var uid = _ref3.uid;\n      return uid === current;\n    }) || null;\n\n    if (foundLayout) {\n      acc[current] = foundLayout;\n    }\n\n    return acc;\n  }, {});\n};\n/**\n * Creates the default for for a content type\n * @param {object} layout.subjects All the content types to display\n * @param {array<object>} actionArray An action has the following shape:\n * action = {label: 'string', actionId: 'string', subjects: [object], applyToProperties: ['string]}\n * @param {array<object>} conditionArray Ex: { id: 'string', category: 'string' }\n * @returns {object} Ex:\n * {\n *  ctUId: {\n *    [actionId]: {\n *      [propertyName]: { enabled: false, conditions: { [id]: false } }\n *    }\n *  }\n * }\n */\n\n\nexports.findLayouts = findLayouts;\n\nvar createDefaultCTFormFromLayout = function createDefaultCTFormFromLayout(_ref4, actionArray, conditionArray) {\n  var subjects = _ref4.subjects;\n  var initialPermissions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  return actionArray.reduce(function (defaultForm, current) {\n    var actionSubjects = current.subjects;\n    var subjectLayouts = findLayouts(subjects, actionSubjects); // This can happen when an action is not related to a content type\n    // for instance the D&P permission is applied only with the cts that\n    // have the D&P features enabled\n\n    if ((0, _lodash.isEmpty)(subjectLayouts)) {\n      return defaultForm;\n    } // The object has the following shape: { [ctUID]: { [actionId]: { [property]: { enabled: false } } } }\n\n\n    var contentTypesActions = Object.keys(subjectLayouts).reduce(function (acc, currentCTUID) {\n      var actionId = current.actionId,\n          applyToProperties = current.applyToProperties;\n      var currentSubjectLayout = subjectLayouts[currentCTUID];\n      var properties = currentSubjectLayout.properties.map(function (_ref5) {\n        var value = _ref5.value;\n        return value;\n      });\n      var doesNothaveProperty = properties.every(function (property) {\n        return (applyToProperties || []).indexOf(property) === -1;\n      });\n      var matchingPermission = (0, _findMatchingPermissions[\"default\"])(initialPermissions, actionId, currentCTUID);\n      var conditionsForm = createDefaultConditionsForm(conditionArray, (0, _lodash.get)(matchingPermission, 'conditions', []));\n\n      if ((0, _lodash.isEmpty)(applyToProperties) || doesNothaveProperty) {\n        (0, _lodash.set)(acc, [currentCTUID, actionId], {\n          properties: {\n            enabled: matchingPermission !== undefined\n          },\n          conditions: conditionsForm\n        });\n        return acc;\n      }\n\n      var propertiesForm = createDefaultPropertiesForm(applyToProperties, subjectLayouts[currentCTUID], matchingPermission);\n      (0, _lodash.set)(acc, [currentCTUID, actionId], _objectSpread(_objectSpread({}, propertiesForm), {}, {\n        conditions: conditionsForm\n      }));\n      return acc;\n    }, {});\n    return (0, _lodash.merge)(defaultForm, contentTypesActions);\n  }, {});\n};\n\nvar _default = createDefaultCTFormFromLayout;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}