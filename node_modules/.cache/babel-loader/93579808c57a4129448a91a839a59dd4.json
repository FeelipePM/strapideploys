{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _get = _interopRequireDefault(require(\"lodash/get\"));\n\nvar _toLower = _interopRequireDefault(require(\"lodash/toLower\"));\n\nvar _getTrad = _interopRequireDefault(require(\"../../../utils/getTrad\"));\n\nvar _attributes = require(\"../attributes\");\n\nvar _category = require(\"../category\");\n\nvar _contentType = require(\"../contentType\");\n\nvar _component = require(\"../component\");\n\nvar _dynamicZone = require(\"../dynamicZone\");\n\nvar _excluded = [\"data\", \"type\", \"step\", \"extensions\"],\n    _excluded2 = [\"extensions\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar forms = {\n  attribute: {\n    schema: function schema(currentSchema, attributeType, reservedNames, alreadyTakenTargetContentTypeAttributes, options, extensions) {\n      var attributes = (0, _get[\"default\"])(currentSchema, ['schema', 'attributes'], []);\n      var usedAttributeNames = attributes.filter(function (_ref) {\n        var name = _ref.name;\n        return name !== options.initialData.name;\n      }).map(function (_ref2) {\n        var name = _ref2.name;\n        return name;\n      });\n\n      try {\n        var attributeShape = _attributes.attributeTypes[attributeType](usedAttributeNames, reservedNames.attributes, alreadyTakenTargetContentTypeAttributes, options);\n\n        return extensions.makeValidator(['attribute', attributeType], attributeShape, usedAttributeNames, reservedNames.attributes, alreadyTakenTargetContentTypeAttributes, options);\n      } catch (err) {\n        console.error('Error yup build schema', err);\n        return _attributes.attributeTypes[\"default\"](usedAttributeNames, reservedNames.attributes);\n      }\n    },\n    form: {\n      advanced: function advanced(_ref3) {\n        var data = _ref3.data,\n            type = _ref3.type,\n            step = _ref3.step,\n            extensions = _ref3.extensions,\n            rest = (0, _objectWithoutProperties2[\"default\"])(_ref3, _excluded);\n\n        try {\n          var baseForm = _attributes.attributesForm.advanced[type](data, step).sections;\n\n          var itemsToAdd = extensions.getAdvancedForm(['attribute', type], _objectSpread({\n            data: data,\n            type: type,\n            step: step\n          }, rest));\n          var sections = baseForm.reduce(function (acc, current) {\n            if (current.sectionTitle === null) {\n              acc.push(current);\n            } else {\n              acc.push(_objectSpread(_objectSpread({}, current), {}, {\n                items: [].concat((0, _toConsumableArray2[\"default\"])(current.items), (0, _toConsumableArray2[\"default\"])(itemsToAdd))\n              }));\n            }\n\n            return acc;\n          }, []); // IF we want a dedicated section for the plugins\n          // const sections = [\n          //   ...baseForm,\n          //   {\n          //     sectionTitle: { id: 'Zone pour plugins', defaultMessage: 'Zone pour plugins' },\n          //     items: itemsToAdd,\n          //   },\n          // ];\n\n          return {\n            sections: sections\n          };\n        } catch (err) {\n          console.error(err);\n          return {\n            sections: []\n          };\n        }\n      },\n      base: function base(_ref4) {\n        var data = _ref4.data,\n            type = _ref4.type,\n            step = _ref4.step,\n            attributes = _ref4.attributes;\n\n        try {\n          return _attributes.attributesForm.base[type](data, step, attributes);\n        } catch (err) {\n          return _attributes.commonBaseForm;\n        }\n      }\n    }\n  },\n  contentType: {\n    schema: function schema(alreadyTakenNames, isEditing, ctUid, reservedNames, extensions, contentTypes) {\n      var singularNames = Object.values(contentTypes).map(function (contentType) {\n        return contentType.schema.singularName;\n      });\n      var pluralNames = Object.values(contentTypes).map(function (contentType) {\n        return contentType.schema.pluralNames;\n      });\n      var takenNames = isEditing ? alreadyTakenNames.filter(function (uid) {\n        return uid !== ctUid;\n      }) : alreadyTakenNames;\n      var takenSingularNames = isEditing ? singularNames.filter(function (singName) {\n        var currentSingularName = (0, _get[\"default\"])(contentTypes, [ctUid, 'schema', 'singularName'], '');\n        return currentSingularName !== singName;\n      }) : singularNames;\n      var takenPluralNames = isEditing ? pluralNames.filter(function (pluralName) {\n        var currentPluralName = (0, _get[\"default\"])(contentTypes, [ctUid, 'schema', 'pluralName'], '');\n        return currentPluralName !== pluralName;\n      }) : pluralNames;\n      var contentTypeShape = (0, _contentType.createContentTypeSchema)(takenNames, reservedNames.models, takenSingularNames, takenPluralNames); // FIXME\n\n      return extensions.makeValidator(['contentType'], contentTypeShape, takenNames, reservedNames.models, takenSingularNames, takenPluralNames);\n    },\n    form: {\n      base: function base(_ref5) {\n        var actionType = _ref5.actionType;\n\n        if (actionType === 'create') {\n          return _contentType.contentTypeForm.base.create();\n        }\n\n        return _contentType.contentTypeForm.base.edit();\n      },\n      advanced: function advanced(_ref6) {\n        var extensions = _ref6.extensions,\n            rest = (0, _objectWithoutProperties2[\"default\"])(_ref6, _excluded2);\n\n        var baseForm = _contentType.contentTypeForm.advanced[\"default\"](rest).sections;\n\n        var itemsToAdd = extensions.getAdvancedForm(['contentType']);\n        return {\n          sections: [].concat((0, _toConsumableArray2[\"default\"])(baseForm), [{\n            sectionTitle: {\n              id: (0, _getTrad[\"default\"])('form.attribute.item.settings.name'),\n              defaultMessage: 'Settings'\n            },\n            items: itemsToAdd\n          }])\n        };\n      }\n    }\n  },\n  component: {\n    schema: function schema(alreadyTakenAttributes, componentCategory, reservedNames) {\n      var isEditing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var compoUid = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      var takenNames = isEditing ? alreadyTakenAttributes.filter(function (uid) {\n        return uid !== compoUid;\n      }) : alreadyTakenAttributes;\n      return (0, _component.createComponentSchema)(takenNames, reservedNames.models, componentCategory);\n    },\n    form: {\n      advanced: function advanced() {\n        return {\n          sections: _component.componentForm.advanced()\n        };\n      },\n      base: function base() {\n        return {\n          sections: _component.componentForm.base()\n        };\n      }\n    }\n  },\n  addComponentToDynamicZone: {\n    form: {\n      advanced: function advanced() {\n        return _dynamicZone.dynamiczoneForm.advanced[\"default\"]();\n      },\n      base: function base(_ref7) {\n        var data = _ref7.data;\n        var isCreatingComponent = (0, _get[\"default\"])(data, 'createComponent', false);\n\n        if (isCreatingComponent) {\n          return _dynamicZone.dynamiczoneForm.base.createComponent();\n        }\n\n        return _dynamicZone.dynamiczoneForm.base[\"default\"]();\n      }\n    }\n  },\n  editCategory: {\n    schema: function schema(allCategories, initialData) {\n      var allowedCategories = allCategories.filter(function (cat) {\n        return cat !== initialData.name;\n      }).map(function (cat) {\n        return (0, _toLower[\"default\"])(cat);\n      });\n      return (0, _category.createCategorySchema)(allowedCategories);\n    },\n    form: {\n      advanced: function advanced() {\n        return {\n          sections: []\n        };\n      },\n      base: function base() {\n        return _category.categoryForm.base;\n      }\n    }\n  }\n};\nvar _default = forms;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}