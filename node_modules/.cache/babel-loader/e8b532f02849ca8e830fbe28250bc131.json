{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initialState = exports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _immer = _interopRequireDefault(require(\"immer\"));\n\nvar _set = _interopRequireDefault(require(\"lodash/set\"));\n\nvar _get = _interopRequireDefault(require(\"lodash/get\"));\n\nvar _cloneDeep = _interopRequireDefault(require(\"lodash/cloneDeep\"));\n\nvar _utils = require(\"../../utils\");\n\nvar _layout = require(\"./utils/layout\");\n\nvar initialState = {\n  fieldForm: {},\n  componentLayouts: {},\n  metaToEdit: '',\n  initialData: {},\n  metaForm: {},\n  modifiedData: {}\n};\nexports.initialState = initialState;\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return (// eslint-disable-next-line consistent-return\n    (0, _immer[\"default\"])(state, function (draftState) {\n      var layoutPathEdit = ['modifiedData', 'layouts', 'edit'];\n      var layoutPathRelations = ['modifiedData', 'layouts', 'editRelations'];\n\n      switch (action.type) {\n        case 'ADD_RELATION':\n          {\n            var editRelationLayoutValue = (0, _get[\"default\"])(state, layoutPathRelations, []);\n            (0, _set[\"default\"])(draftState, layoutPathRelations, [].concat((0, _toConsumableArray2[\"default\"])(editRelationLayoutValue), [action.name]));\n            break;\n          }\n\n        case 'MOVE_RELATION':\n          {\n            var _editRelationLayoutValue = (0, _get[\"default\"])(state, layoutPathRelations, []);\n\n            var fromIndex = action.fromIndex,\n                toIndex = action.toIndex;\n            (0, _set[\"default\"])(draftState, layoutPathRelations, (0, _utils.arrayMoveItem)(_editRelationLayoutValue, fromIndex, toIndex));\n            break;\n          }\n\n        case 'MOVE_ROW':\n          {\n            var editFieldLayoutValue = (0, _get[\"default\"])(state, layoutPathEdit, []);\n            var _fromIndex = action.fromIndex,\n                _toIndex = action.toIndex;\n            (0, _set[\"default\"])(draftState, layoutPathEdit, (0, _utils.arrayMoveItem)(editFieldLayoutValue, _fromIndex, _toIndex));\n            break;\n          }\n\n        case 'ON_ADD_FIELD':\n          {\n            var newState = (0, _cloneDeep[\"default\"])(state);\n            var size = (0, _layout.getDefaultInputSize)((0, _get[\"default\"])(newState, ['modifiedData', 'attributes', action.name, 'type'], ''));\n            var listSize = (0, _get[\"default\"])(newState, layoutPathEdit, []).length;\n            var actualRowContentPath = [].concat(layoutPathEdit, [listSize - 1, 'rowContent']);\n            var rowContentToSet = (0, _get[\"default\"])(newState, actualRowContentPath, []);\n            var newList = (0, _get[\"default\"])(newState, layoutPathEdit, []);\n\n            if (Array.isArray(rowContentToSet)) {\n              (0, _set[\"default\"])(newList, [listSize > 0 ? listSize - 1 : 0, 'rowContent'], [].concat((0, _toConsumableArray2[\"default\"])(rowContentToSet), [{\n                name: action.name,\n                size: size\n              }]));\n            } else {\n              (0, _set[\"default\"])(newList, [listSize > 0 ? listSize - 1 : 0, 'rowContent'], [{\n                name: action.name,\n                size: size\n              }]);\n            }\n\n            var formattedList = (0, _layout.formatLayout)(newList);\n            (0, _set[\"default\"])(draftState, layoutPathEdit, formattedList);\n            break;\n          }\n\n        case 'ON_CHANGE':\n          {\n            (0, _set[\"default\"])(draftState, ['modifiedData'].concat((0, _toConsumableArray2[\"default\"])(action.keys)), action.value);\n            break;\n          }\n\n        case 'ON_CHANGE_META':\n          {\n            (0, _set[\"default\"])(draftState, ['metaForm', 'metadata'].concat((0, _toConsumableArray2[\"default\"])(action.keys)), action.value);\n            break;\n          }\n\n        case 'ON_CHANGE_SIZE':\n          {\n            (0, _set[\"default\"])(draftState, ['metaForm', 'size'], action.value);\n            break;\n          }\n\n        case 'ON_RESET':\n          {\n            draftState.modifiedData = state.initialData;\n            break;\n          }\n\n        case 'REMOVE_FIELD':\n          {\n            var row = (0, _get[\"default\"])(state, [].concat(layoutPathEdit, [action.rowIndex, 'rowContent']), []);\n\n            var _newState = (0, _cloneDeep[\"default\"])(state);\n\n            if (row.length === 1 || row.length === 2 && (0, _get[\"default\"])(row, [1, 'name'], '') === '_TEMP_') {\n              var currentRowFieldList = (0, _get[\"default\"])(state, layoutPathEdit, []);\n              (0, _set[\"default\"])(_newState, layoutPathEdit, currentRowFieldList.filter(function (_, index) {\n                return action.rowIndex !== index;\n              }));\n            } else {\n              (0, _set[\"default\"])(_newState, [].concat(layoutPathEdit, [action.rowIndex, 'rowContent']), row.filter(function (_, index) {\n                return index !== action.fieldIndex;\n              }));\n            }\n\n            var updatedList = (0, _layout.formatLayout)((0, _get[\"default\"])(_newState, layoutPathEdit, []));\n            (0, _set[\"default\"])(draftState, layoutPathEdit, updatedList);\n            break;\n          }\n\n        case 'REMOVE_RELATION':\n          {\n            var relationList = (0, _get[\"default\"])(state, layoutPathRelations, []);\n            (0, _set[\"default\"])(draftState, layoutPathRelations, relationList.filter(function (_, index) {\n              return action.index !== index;\n            }));\n            break;\n          }\n\n        case 'REORDER_DIFF_ROW':\n          {\n            var actualRowContent = (0, _get[\"default\"])(state, [].concat(layoutPathEdit, [action.dragRowIndex, 'rowContent']), []);\n            var targetRowContent = (0, _get[\"default\"])(state, [].concat(layoutPathEdit, [action.hoverRowIndex, 'rowContent']), []);\n            var itemToInsert = (0, _get[\"default\"])(state, [].concat(layoutPathEdit, [action.dragRowIndex, 'rowContent', action.dragIndex]), {});\n            var rowContent = [].concat((0, _toConsumableArray2[\"default\"])(targetRowContent), [itemToInsert]);\n\n            var _newState2 = (0, _cloneDeep[\"default\"])(state);\n\n            (0, _set[\"default\"])(_newState2, [].concat(layoutPathEdit, [action.dragRowIndex, 'rowContent']), actualRowContent.filter(function (_, index) {\n              return action.dragIndex !== index;\n            }));\n            (0, _set[\"default\"])(_newState2, [].concat(layoutPathEdit, [action.hoverRowIndex, 'rowContent']), (0, _utils.arrayMoveItem)(rowContent, rowContent.length - 1, action.hoverIndex));\n\n            var _updatedList = (0, _layout.formatLayout)((0, _get[\"default\"])(_newState2, layoutPathEdit, []));\n\n            (0, _set[\"default\"])(draftState, layoutPathEdit, _updatedList);\n            break;\n          }\n\n        case 'REORDER_ROW':\n          {\n            var _newState3 = (0, _cloneDeep[\"default\"])(state);\n\n            var _rowContent = (0, _get[\"default\"])(_newState3, [].concat(layoutPathEdit, [action.dragRowIndex, 'rowContent']), []);\n\n            (0, _set[\"default\"])(_newState3, [].concat(layoutPathEdit, [action.dragRowIndex, 'rowContent']), (0, _utils.arrayMoveItem)(_rowContent, action.dragIndex, action.hoverIndex));\n\n            var _updatedList2 = (0, _layout.formatLayout)((0, _get[\"default\"])(_newState3, layoutPathEdit, []));\n\n            (0, _set[\"default\"])(draftState, layoutPathEdit, _updatedList2);\n            break;\n          }\n\n        case 'SET_FIELD_TO_EDIT':\n          {\n            var _getFieldSize, _state$modifiedData, _state$modifiedData$l;\n\n            draftState.metaToEdit = action.name;\n            draftState.metaForm = {\n              metadata: (0, _get[\"default\"])(state, ['modifiedData', 'metadatas', action.name, 'edit'], {}),\n              size: (_getFieldSize = (0, _layout.getFieldSize)(action.name, (_state$modifiedData = state.modifiedData) === null || _state$modifiedData === void 0 ? void 0 : (_state$modifiedData$l = _state$modifiedData.layouts) === null || _state$modifiedData$l === void 0 ? void 0 : _state$modifiedData$l.edit)) !== null && _getFieldSize !== void 0 ? _getFieldSize : (0, _layout.getDefaultInputSize)()\n            };\n            break;\n          }\n\n        case 'SUBMIT_META_FORM':\n          {\n            (0, _set[\"default\"])(draftState, ['modifiedData', 'metadatas', state.metaToEdit, 'edit'], state.metaForm.metadata);\n            var layoutsCopy = (0, _cloneDeep[\"default\"])((0, _get[\"default\"])(state, layoutPathEdit, []));\n            var nextLayoutValue = (0, _layout.setFieldSize)(state.metaToEdit, state.metaForm.size, layoutsCopy);\n\n            if (nextLayoutValue.length > 0) {\n              (0, _set[\"default\"])(draftState, layoutPathEdit, (0, _layout.formatLayout)(nextLayoutValue));\n            }\n\n            break;\n          }\n\n        case 'SUBMIT_SUCCEEDED':\n          {\n            draftState.initialData = state.modifiedData;\n            break;\n          }\n\n        case 'UNSET_FIELD_TO_EDIT':\n          {\n            draftState.metaToEdit = '';\n            draftState.metaForm = {};\n            break;\n          }\n\n        default:\n          return draftState;\n      }\n    })\n  );\n};\n\nvar _default = reducer;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}